{"version":3,"file":"index.umd.cjs","sources":["../src/core/utils/BufferAttributeUtils.js","../src/core/utils/mergeGeometries.js","../src/core/utils/GeometryPreparationUtils.js","../src/utils/bufferToHash.js","../src/core/utils/MeshDiff.js","../src/core/utils/convertToStaticGeometry.js","../src/core/utils/BakedGeometry.js","../src/core/utils/StaticGeometryGenerator.js","../src/core/PathTracingSceneGenerator.js","../src/materials/MaterialBase.js","../src/materials/fullscreen/BlendMaterial.js","../src/shader/rand/sobol.glsl.js","../src/utils/SobolNumberMapGenerator.js","../src/objects/PhysicalCamera.js","../src/uniforms/PhysicalCameraUniform.js","../src/utils/TextureUtils.js","../src/uniforms/EquirectHdrInfoUniform.js","../src/uniforms/LightsInfoUniformStruct.js","../src/uniforms/FloatAttributeTextureArray.js","../src/uniforms/AttributesTextureArray.js","../src/core/utils/sceneUpdateUtils.js","../src/uniforms/MaterialsTexture.js","../src/uniforms/RenderTarget2DArray.js","../src/uniforms/stratified/StratifiedSampler.js","../src/uniforms/stratified/StratifiedSamplerCombined.js","../src/uniforms/StratifiedSamplesTexture.js","../src/textures/blueNoise/utils.js","../src/textures/blueNoise/BlueNoiseSamples.js","../src/textures/blueNoise/BlueNoiseGenerator.js","../src/textures/BlueNoiseTexture.js","../src/shader/structs/camera_struct.glsl.js","../src/shader/structs/equirect_struct.glsl.js","../src/shader/structs/lights_struct.glsl.js","../src/shader/structs/material_struct.glsl.js","../src/shader/structs/surface_record_struct.glsl.js","../src/shader/sampling/equirect_sampling_functions.glsl.js","../src/shader/sampling/light_sampling_functions.glsl.js","../src/shader/sampling/shape_sampling_functions.glsl.js","../src/shader/common/fresnel_functions.glsl.js","../src/shader/common/math_functions.glsl.js","../src/shader/common/shape_intersection_functions.glsl.js","../src/shader/common/texture_sample_functions.glsl.js","../src/shader/common/util_functions.glsl.js","../src/shader/rand/pcg.glsl.js","../src/shader/rand/stratified.glsl.js","../src/shader/bsdf/bsdf_functions.glsl.js","../src/shader/bsdf/fog_functions.glsl.js","../src/shader/bsdf/ggx_functions.glsl.js","../src/shader/bsdf/iridescence_functions.glsl.js","../src/shader/bsdf/sheen_functions.glsl.js","../src/shader/bvh/inside_fog_volume_function.glsl.js","../src/shader/bvh/ray_any_hit_function.glsl.js","../src/materials/pathtracing/glsl/attenuate_hit_function.glsl.js","../src/materials/pathtracing/glsl/camera_util_functions.glsl.js","../src/materials/pathtracing/glsl/direct_light_contribution_function.glsl.js","../src/materials/pathtracing/glsl/get_surface_record_function.glsl.js","../src/materials/pathtracing/glsl/render_structs.glsl.js","../src/materials/pathtracing/glsl/trace_scene_function.glsl.js","../src/materials/pathtracing/PhysicalPathTracingMaterial.js","../src/core/PathTracingRenderer.js","../src/textures/ProceduralEquirectTexture.js","../src/textures/GradientEquirectTexture.js","../src/materials/fullscreen/ClampedInterpolationMaterial.js","../src/core/WebGLPathTracer.js","../src/objects/EquirectCamera.js","../src/objects/PhysicalSpotLight.js","../src/objects/ShapedAreaLight.js","../src/utils/BlurredEnvMapGenerator.js","../src/materials/fullscreen/DenoiseMaterial.js","../src/materials/surface/FogVolumeMaterial.js","../src/index.js"],"sourcesContent":["import { BufferAttribute } from 'three';\r\n\r\n// target offset is the number of elements in the target buffer stride to skip before copying the\r\n// attributes contents in to.\r\nexport function copyAttributeContents( attr, target, targetOffset = 0 ) {\r\n\r\n\tif ( attr.isInterleavedBufferAttribute ) {\r\n\r\n\t\tconst itemSize = attr.itemSize;\r\n\t\tfor ( let i = 0, l = attr.count; i < l; i ++ ) {\r\n\r\n\t\t\tconst io = i + targetOffset;\r\n\t\t\ttarget.setX( io, attr.getX( i ) );\r\n\t\t\tif ( itemSize >= 2 ) target.setY( io, attr.getY( i ) );\r\n\t\t\tif ( itemSize >= 3 ) target.setZ( io, attr.getZ( i ) );\r\n\t\t\tif ( itemSize >= 4 ) target.setW( io, attr.getW( i ) );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tconst array = target.array;\r\n\t\tconst cons = array.constructor;\r\n\t\tconst byteOffset = array.BYTES_PER_ELEMENT * attr.itemSize * targetOffset;\r\n\t\tconst temp = new cons( array.buffer, byteOffset, attr.array.length );\r\n\t\ttemp.set( attr.array );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Clones the given attribute with a new compatible buffer attribute but no data\r\nexport function createAttributeClone( attr, countOverride = null ) {\r\n\r\n\tconst cons = attr.array.constructor;\r\n\tconst normalized = attr.normalized;\r\n\tconst itemSize = attr.itemSize;\r\n\tconst count = countOverride === null ? attr.count : countOverride;\r\n\r\n\treturn new BufferAttribute( new cons( itemSize * count ), itemSize, normalized );\r\n\r\n}\r\n\r\n// Confirms that the two provided attributes are compatible\r\nexport function validateAttributes( attr1, attr2 ) {\r\n\r\n\tif ( ! attr1 && ! attr2 ) {\r\n\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tconst sameCount = attr1.count === attr2.count;\r\n\tconst sameNormalized = attr1.normalized === attr2.normalized;\r\n\tconst sameType = attr1.array.constructor === attr2.array.constructor;\r\n\tconst sameItemSize = attr1.itemSize === attr2.itemSize;\r\n\r\n\tif ( ! sameCount || ! sameNormalized || ! sameType || ! sameItemSize ) {\r\n\r\n\t\tthrow new Error();\r\n\r\n\t}\r\n\r\n}\r\n","import { BufferAttribute, BufferGeometry } from 'three';\r\nimport { copyAttributeContents, createAttributeClone } from './BufferAttributeUtils.js';\r\n\r\nfunction validateMergeability( geometries ) {\r\n\r\n\tconst isIndexed = geometries[ 0 ].index !== null;\r\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\r\n\tif ( ! geometries[ 0 ].getAttribute( 'position' ) ) {\r\n\r\n\t\tthrow new Error( 'StaticGeometryGenerator: position attribute is required.' );\r\n\r\n\t}\r\n\r\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\r\n\r\n\t\tconst geometry = geometries[ i ];\r\n\t\tlet attributesCount = 0;\r\n\r\n\t\t// ensure that all geometries are indexed, or none\r\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\r\n\r\n\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\r\n\r\n\t\t}\r\n\r\n\t\t// gather attributes, exit early if they're different\r\n\t\tfor ( const name in geometry.attributes ) {\r\n\r\n\t\t\tif ( ! attributesUsed.has( name ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tattributesCount ++;\r\n\r\n\t\t}\r\n\r\n\t\t// ensure geometries have the same number of attributes\r\n\t\tif ( attributesCount !== attributesUsed.size ) {\r\n\r\n\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have the same number of attributes.' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction getTotalIndexCount( geometries ) {\r\n\r\n\tlet result = 0;\r\n\tfor ( let i = 0, l = geometries.length; i < l; i ++ ) {\r\n\r\n\t\tresult += geometries[ i ].getIndex().count;\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nfunction getTotalAttributeCount( geometries ) {\r\n\r\n\tlet result = 0;\r\n\tfor ( let i = 0, l = geometries.length; i < l; i ++ ) {\r\n\r\n\t\tresult += geometries[ i ].getAttribute( 'position' ).count;\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nfunction trimMismatchedAttributes( target, indexCount, attrCount ) {\r\n\r\n\tif ( target.index && target.index.count !== indexCount ) {\r\n\r\n\t\ttarget.setIndex( null );\r\n\r\n\t}\r\n\r\n\tconst attributes = target.attributes;\r\n\tfor ( const key in attributes ) {\r\n\r\n\t\tconst attr = attributes[ key ];\r\n\t\tif ( attr.count !== attrCount ) {\r\n\r\n\t\t\ttarget.deleteAttribute( key );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Modified version of BufferGeometryUtils.mergeBufferGeometries that ignores morph targets and updates a attributes in place\r\nexport function mergeGeometries( geometries, options = {}, targetGeometry = new BufferGeometry() ) {\r\n\r\n\tconst {\r\n\t\tuseGroups = false,\r\n\t\tforceUpdate = false,\r\n\t\tskipAssigningAttributes = [],\r\n\t\toverwriteIndex = true,\r\n\t} = options;\r\n\r\n\t// check if we can merge these geometries\r\n\tvalidateMergeability( geometries );\r\n\r\n\tconst isIndexed = geometries[ 0 ].index !== null;\r\n\tconst totalIndexCount = isIndexed ? getTotalIndexCount( geometries ) : - 1;\r\n\tconst totalAttributeCount = getTotalAttributeCount( geometries );\r\n\ttrimMismatchedAttributes( targetGeometry, totalIndexCount, totalAttributeCount );\r\n\r\n\t// set up groups\r\n\tif ( useGroups ) {\r\n\r\n\t\tlet offset = 0;\r\n\t\tfor ( let i = 0, l = geometries.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst geometry = geometries[ i ];\r\n\r\n\t\t\tlet primitiveCount;\r\n\t\t\tif ( isIndexed ) {\r\n\r\n\t\t\t\tprimitiveCount = geometry.getIndex().count;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tprimitiveCount = geometry.getAttribute( 'position' ).count;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttargetGeometry.addGroup( offset, primitiveCount, i );\r\n\t\t\toffset += primitiveCount;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// generate the final geometry\r\n\t// skip the assigning any attributes for items in the above array\r\n\tif ( isIndexed ) {\r\n\r\n\t\t// set up the index if it doesn't exist\r\n\t\tlet forceUpdateIndex = false;\r\n\t\tif ( ! targetGeometry.index ) {\r\n\r\n\t\t\ttargetGeometry.setIndex( new BufferAttribute( new Uint32Array( totalIndexCount ), 1, false ) );\r\n\t\t\tforceUpdateIndex = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( forceUpdateIndex || overwriteIndex ) {\r\n\r\n\t\t\t// copy the index data to the target geometry\r\n\t\t\tlet targetOffset = 0;\r\n\t\t\tlet indexOffset = 0;\r\n\t\t\tconst targetIndex = targetGeometry.getIndex();\r\n\t\t\tfor ( let i = 0, l = geometries.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst geometry = geometries[ i ];\r\n\t\t\t\tconst index = geometry.getIndex();\r\n\t\t\t\tconst skip = ! forceUpdate && ! forceUpdateIndex && skipAssigningAttributes[ i ];\r\n\t\t\t\tif ( ! skip ) {\r\n\r\n\t\t\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\r\n\r\n\t\t\t\t\t\ttargetIndex.setX( targetOffset + j, index.getX( j ) + indexOffset );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetOffset += index.count;\r\n\t\t\t\tindexOffset += geometry.getAttribute( 'position' ).count;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// copy all the attribute data over\r\n\tconst attributes = Object.keys( geometries[ 0 ].attributes );\r\n\tfor ( let i = 0, l = attributes.length; i < l; i ++ ) {\r\n\r\n\t\tlet forceUpdateAttr = false;\r\n\t\tconst key = attributes[ i ];\r\n\t\tif ( ! targetGeometry.getAttribute( key ) ) {\r\n\r\n\t\t\tconst firstAttr = geometries[ 0 ].getAttribute( key );\r\n\t\t\ttargetGeometry.setAttribute( key, createAttributeClone( firstAttr, totalAttributeCount ) );\r\n\t\t\tforceUpdateAttr = true;\r\n\r\n\t\t}\r\n\r\n\t\tlet offset = 0;\r\n\t\tconst targetAttribute = targetGeometry.getAttribute( key );\r\n\t\tfor ( let g = 0, l = geometries.length; g < l; g ++ ) {\r\n\r\n\t\t\tconst geometry = geometries[ g ];\r\n\t\t\tconst skip = ! forceUpdate && ! forceUpdateAttr && skipAssigningAttributes[ g ];\r\n\t\t\tconst attr = geometry.getAttribute( key );\r\n \t\t\tif ( ! skip ) {\r\n\r\n\t\t\t\tcopyAttributeContents( attr, targetAttribute, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t\toffset += attr.count;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","import { BufferAttribute } from 'three';\r\n\r\nexport function updateMaterialIndexAttribute( geometry, materials, allMaterials ) {\r\n\r\n\tconst indexAttr = geometry.index;\r\n\tconst posAttr = geometry.attributes.position;\r\n\tconst vertCount = posAttr.count;\r\n\tconst totalCount = indexAttr ? indexAttr.count : vertCount;\r\n\tlet groups = geometry.groups;\r\n\tif ( groups.length === 0 ) {\r\n\r\n\t\tgroups = [ { count: totalCount, start: 0, materialIndex: 0 } ];\r\n\r\n\t}\r\n\r\n\tlet materialIndexAttribute = geometry.getAttribute( 'materialIndex' );\r\n\tif ( ! materialIndexAttribute || materialIndexAttribute.count !== vertCount ) {\r\n\r\n\t\t// use an array with the minimum precision required to store all material id references.\r\n\t\tlet array;\r\n\t\tif ( allMaterials.length <= 255 ) {\r\n\r\n\t\t\tarray = new Uint8Array( vertCount );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tarray = new Uint16Array( vertCount );\r\n\r\n\t\t}\r\n\r\n\t\tmaterialIndexAttribute = new BufferAttribute( array, 1, false );\r\n\t\tgeometry.deleteAttribute( 'materialIndex' );\r\n\t\tgeometry.setAttribute( 'materialIndex', materialIndexAttribute );\r\n\r\n\t}\r\n\r\n\tconst materialArray = materialIndexAttribute.array;\r\n\tfor ( let i = 0; i < groups.length; i ++ ) {\r\n\r\n\t\tconst group = groups[ i ];\r\n\t\tconst start = group.start;\r\n\t\tconst count = group.count;\r\n\t\tconst endCount = Math.min( count, totalCount - start );\r\n\r\n\t\tconst mat = Array.isArray( materials ) ? materials[ group.materialIndex ] : materials;\r\n\t\tconst materialIndex = allMaterials.indexOf( mat );\r\n\r\n\t\tfor ( let j = 0; j < endCount; j ++ ) {\r\n\r\n\t\t\tlet index = start + j;\r\n\t\t\tif ( indexAttr ) {\r\n\r\n\t\t\t\tindex = indexAttr.getX( index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterialArray[ index ] = materialIndex;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function setCommonAttributes( geometry, attributes ) {\r\n\r\n\tif ( ! geometry.index ) {\r\n\r\n\t\t// TODO: compute a typed array\r\n\t\tconst indexCount = geometry.attributes.position.count;\r\n\t\tconst array = new Array( indexCount );\r\n\t\tfor ( let i = 0; i < indexCount; i ++ ) {\r\n\r\n\t\t\tarray[ i ] = i;\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.setIndex( array );\r\n\r\n\t}\r\n\r\n\tif ( ! geometry.attributes.normal && ( attributes && attributes.includes( 'normal' ) ) ) {\r\n\r\n\t\tgeometry.computeVertexNormals();\r\n\r\n\t}\r\n\r\n\tif ( ! geometry.attributes.uv && ( attributes && attributes.includes( 'uv' ) ) ) {\r\n\r\n\t\tconst vertCount = geometry.attributes.position.count;\r\n\t\tgeometry.setAttribute( 'uv', new BufferAttribute( new Float32Array( vertCount * 2 ), 2, false ) );\r\n\r\n\t}\r\n\r\n\tif ( ! geometry.attributes.uv2 && ( attributes && attributes.includes( 'uv2' ) ) ) {\r\n\r\n\t\tconst vertCount = geometry.attributes.position.count;\r\n\t\tgeometry.setAttribute( 'uv2', new BufferAttribute( new Float32Array( vertCount * 2 ), 2, false ) );\r\n\r\n\t}\r\n\r\n\tif ( ! geometry.attributes.tangent && ( attributes && attributes.includes( 'tangent' ) ) ) {\r\n\r\n\t\t// compute tangents requires a uv and normal buffer\r\n\t\tif ( geometry.attributes.uv && geometry.attributes.normal ) {\r\n\r\n\t\t\tgeometry.computeTangents();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst vertCount = geometry.attributes.position.count;\r\n\t\t\tgeometry.setAttribute( 'tangent', new BufferAttribute( new Float32Array( vertCount * 4 ), 4, false ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tif ( ! geometry.attributes.color && ( attributes && attributes.includes( 'color' ) ) ) {\r\n\r\n\t\tconst vertCount = geometry.attributes.position.count;\r\n\t\tconst array = new Float32Array( vertCount * 4 );\r\n\t\tarray.fill( 1.0 );\r\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( array, 4 ) );\r\n\r\n\t}\r\n\r\n}\r\n","// https://www.geeksforgeeks.org/how-to-create-hash-from-string-in-javascript/\r\n// https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\r\nexport function bufferToHash( buffer ) {\r\n\r\n\tlet hash = 0;\r\n\r\n\tif ( buffer.byteLength !== 0 ) {\r\n\r\n\t\tconst uintArray = new Uint8Array( buffer );\r\n\t\tfor ( let i = 0; i < buffer.byteLength; i ++ ) {\r\n\r\n\t\t\tconst byte = uintArray[ i ];\r\n\t\t\thash = ( ( hash << 5 ) - hash ) + byte;\r\n\t\t\thash |= 0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn hash;\r\n\r\n}\r\n","import { Matrix4 } from 'three';\r\nimport { bufferToHash } from '../../utils/bufferToHash.js';\r\n\r\nfunction attributeSort( a, b ) {\r\n\r\n\tif ( a.uuid > b.uuid ) return 1;\r\n\tif ( a.uuid < b.uuid ) return - 1;\r\n\treturn 0;\r\n\r\n}\r\n\r\nfunction getGeometryHash( geometry ) {\r\n\r\n\tlet hash = '';\r\n\tconst attributes = Object.values( geometry.attributes );\r\n\tif ( geometry.index ) {\r\n\r\n\t\tattributes.push( geometry.index );\r\n\r\n\t}\r\n\r\n\tattributes.sort( attributeSort );\r\n\r\n\tfor ( const attr of attributes ) {\r\n\r\n\t\thash += `${ attr.uuid }_${ attr.version }|`;\r\n\r\n\t}\r\n\r\n\treturn hash;\r\n\r\n}\r\n\r\nfunction getSkeletonHash( mesh ) {\r\n\r\n\tconst skeleton = mesh.skeleton;\r\n\tif ( skeleton ) {\r\n\r\n\t\tif ( ! skeleton.boneTexture ) {\r\n\r\n\t\t\tskeleton.computeBoneTexture();\r\n\r\n\t\t}\r\n\r\n\t\t// we can't use the texture version here because it will change even\r\n\t\t// when the bones haven't\r\n\t\tconst dataHash = bufferToHash( skeleton.boneTexture.image.data.buffer );\r\n\t\treturn `${ dataHash }_${ skeleton.boneTexture.uuid }`;\r\n\r\n\t} else {\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Checks whether the geometry changed between this and last evaluation\r\nexport class MeshDiff {\r\n\r\n\tconstructor( mesh = null ) {\r\n\r\n\t\tthis.matrixWorld = new Matrix4();\r\n\t\tthis.geometryHash = null;\r\n\t\tthis.skeletonHash = null;\r\n\t\tthis.primitiveCount = - 1;\r\n\r\n\t\tif ( mesh !== null ) {\r\n\r\n\t\t\tthis.updateFrom( mesh );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateFrom( mesh ) {\r\n\r\n\t\tconst geometry = mesh.geometry;\r\n\t\tconst primitiveCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\r\n\t\tthis.matrixWorld.copy( mesh.matrixWorld );\r\n\t\tthis.geometryHash = getGeometryHash( geometry );\r\n\t\tthis.primitiveCount = primitiveCount;\r\n\t\tthis.skeletonHash = getSkeletonHash( mesh );\r\n\r\n\t}\r\n\r\n\tdidChange( mesh ) {\r\n\r\n\t\tconst geometry = mesh.geometry;\r\n\t\tconst primitiveCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\r\n\r\n\t\tconst identical =\r\n\t\t\tthis.matrixWorld.equals( mesh.matrixWorld ) &&\r\n\t\t\tthis.geometryHash === getGeometryHash( geometry ) &&\r\n\t\t\tthis.skeletonHash === getSkeletonHash( mesh ) &&\r\n\t\t\tthis.primitiveCount === primitiveCount;\r\n\r\n\t\treturn ! identical;\r\n\r\n\t}\r\n\r\n}\r\n","import { BufferGeometry, Matrix3, Matrix4, Vector3, Vector4 } from 'three';\r\nimport { copyAttributeContents, createAttributeClone, validateAttributes } from './BufferAttributeUtils.js';\r\n\r\nconst _positionVector = /*@__PURE__*/ new Vector3();\r\nconst _normalVector = /*@__PURE__*/ new Vector3();\r\nconst _tangentVector = /*@__PURE__*/ new Vector3();\r\nconst _tangentVector4 = /*@__PURE__*/ new Vector4();\r\n\r\nconst _morphVector = /*@__PURE__*/ new Vector3();\r\nconst _temp = /*@__PURE__*/ new Vector3();\r\n\r\nconst _skinIndex = /*@__PURE__*/ new Vector4();\r\nconst _skinWeight = /*@__PURE__*/ new Vector4();\r\nconst _matrix = /*@__PURE__*/ new Matrix4();\r\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\n// A version of \"SkinnedMesh.boneTransform\" for normals\r\nfunction boneNormalTransform( mesh, index, target ) {\r\n\r\n\tconst skeleton = mesh.skeleton;\r\n\tconst geometry = mesh.geometry;\r\n\tconst bones = skeleton.bones;\r\n\tconst boneInverses = skeleton.boneInverses;\r\n\r\n\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\r\n\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\r\n\r\n\t_matrix.elements.fill( 0 );\r\n\r\n\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\tconst weight = _skinWeight.getComponent( i );\r\n\r\n\t\tif ( weight !== 0 ) {\r\n\r\n\t\t\tconst boneIndex = _skinIndex.getComponent( i );\r\n\t\t\t_boneMatrix.multiplyMatrices( bones[ boneIndex ].matrixWorld, boneInverses[ boneIndex ] );\r\n\r\n\t\t\taddScaledMatrix( _matrix, _boneMatrix, weight );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_matrix.multiply( mesh.bindMatrix ).premultiply( mesh.bindMatrixInverse );\r\n\ttarget.transformDirection( _matrix );\r\n\r\n\treturn target;\r\n\r\n}\r\n\r\n// Applies the morph target data to the target vector\r\nfunction applyMorphTarget( morphData, morphInfluences, morphTargetsRelative, i, target ) {\r\n\r\n\t_morphVector.set( 0, 0, 0 );\r\n\tfor ( let j = 0, jl = morphData.length; j < jl; j ++ ) {\r\n\r\n\t\tconst influence = morphInfluences[ j ];\r\n\t\tconst morphAttribute = morphData[ j ];\r\n\r\n\t\tif ( influence === 0 ) continue;\r\n\r\n\t\t_temp.fromBufferAttribute( morphAttribute, i );\r\n\r\n\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t_morphVector.addScaledVector( _temp, influence );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_morphVector.addScaledVector( _temp.sub( target ), influence );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttarget.add( _morphVector );\r\n\r\n}\r\n\r\n// Adds the \"matrix\" multiplied by \"scale\" to \"target\"\r\nfunction addScaledMatrix( target, matrix, scale ) {\r\n\r\n\tconst targetArray = target.elements;\r\n\tconst matrixArray = matrix.elements;\r\n\tfor ( let i = 0, l = matrixArray.length; i < l; i ++ ) {\r\n\r\n\t\ttargetArray[ i ] += matrixArray[ i ] * scale;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// inverts the geometry in place\r\nfunction invertGeometry( geometry ) {\r\n\r\n\tconst { index, attributes } = geometry;\r\n\tif ( index ) {\r\n\r\n\t\tfor ( let i = 0, l = index.count; i < l; i += 3 ) {\r\n\r\n\t\t\tconst v0 = index.getX( i );\r\n\t\t\tconst v2 = index.getX( i + 2 );\r\n\t\t\tindex.setX( i, v2 );\r\n\t\t\tindex.setX( i + 2, v0 );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tfor ( const key in attributes ) {\r\n\r\n\t\t\tconst attr = attributes[ key ];\r\n\t\t\tconst itemSize = attr.itemSize;\r\n\t\t\tfor ( let i = 0, l = attr.count; i < l; i += 3 ) {\r\n\r\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tconst v0 = attr.getComponent( i, j );\r\n\t\t\t\t\tconst v2 = attr.getComponent( i + 2, j );\r\n\t\t\t\t\tattr.setComponent( i, j, v2 );\r\n\t\t\t\t\tattr.setComponent( i + 2, j, v0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn geometry;\r\n\r\n}\r\n\r\nexport function convertToStaticGeometry( mesh, options = {}, targetGeometry = new BufferGeometry() ) {\r\n\r\n\toptions = {\r\n\t\tapplyWorldTransforms: true,\r\n\t\tattributes: [],\r\n\t\t...options\r\n\t};\r\n\r\n\tconst geometry = mesh.geometry;\r\n\tconst applyWorldTransforms = options.applyWorldTransforms;\r\n\tconst includeNormal = options.attributes.includes( 'normal' );\r\n\tconst includeTangent = options.attributes.includes( 'tangent' );\r\n\tconst attributes = geometry.attributes;\r\n\tconst targetAttributes = targetGeometry.attributes;\r\n\r\n\t// strip any unused and unneeded attributes\r\n\tfor ( const key in targetGeometry.attributes ) {\r\n\r\n\t\tif ( ! options.attributes.includes( key ) || ! ( key in geometry.attributes ) ) {\r\n\r\n\t\t\ttargetGeometry.deleteAttribute( key );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// initialize the attributes if they don't exist\r\n\tif ( ! targetGeometry.index && geometry.index ) {\r\n\r\n\t\ttargetGeometry.index = geometry.index.clone();\r\n\r\n\t}\r\n\r\n\tif ( ! targetAttributes.position ) {\r\n\r\n\t\ttargetGeometry.setAttribute( 'position', createAttributeClone( attributes.position ) );\r\n\r\n\t}\r\n\r\n\tif ( includeNormal && ! targetAttributes.normal && attributes.normal ) {\r\n\r\n\t\ttargetGeometry.setAttribute( 'normal', createAttributeClone( attributes.normal ) );\r\n\r\n\t}\r\n\r\n\tif ( includeTangent && ! targetAttributes.tangent && attributes.tangent ) {\r\n\r\n\t\ttargetGeometry.setAttribute( 'tangent', createAttributeClone( attributes.tangent ) );\r\n\r\n\t}\r\n\r\n\t// ensure the attributes are consistent\r\n\tvalidateAttributes( geometry.index, targetGeometry.index );\r\n\tvalidateAttributes( attributes.position, targetAttributes.position );\r\n\r\n\tif ( includeNormal ) {\r\n\r\n\t\tvalidateAttributes( attributes.normal, targetAttributes.normal );\r\n\r\n\t}\r\n\r\n\tif ( includeTangent ) {\r\n\r\n\t\tvalidateAttributes( attributes.tangent, targetAttributes.tangent );\r\n\r\n\t}\r\n\r\n\t// generate transformed vertex attribute data\r\n\tconst position = attributes.position;\r\n\tconst normal = includeNormal ? attributes.normal : null;\r\n\tconst tangent = includeTangent ? attributes.tangent : null;\r\n\tconst morphPosition = geometry.morphAttributes.position;\r\n\tconst morphNormal = geometry.morphAttributes.normal;\r\n\tconst morphTangent = geometry.morphAttributes.tangent;\r\n\tconst morphTargetsRelative = geometry.morphTargetsRelative;\r\n\tconst morphInfluences = mesh.morphTargetInfluences;\r\n\tconst normalMatrix = new Matrix3();\r\n\tnormalMatrix.getNormalMatrix( mesh.matrixWorld );\r\n\r\n\t// copy the index\r\n\tif ( geometry.index ) {\r\n\r\n\t\ttargetGeometry.index.array.set( geometry.index.array );\r\n\r\n\t}\r\n\r\n\t// copy and apply other attributes\r\n\tfor ( let i = 0, l = attributes.position.count; i < l; i ++ ) {\r\n\r\n\t\t_positionVector.fromBufferAttribute( position, i );\r\n\t\tif ( normal ) {\r\n\r\n\t\t\t_normalVector.fromBufferAttribute( normal, i );\r\n\r\n\t\t}\r\n\r\n\t\tif ( tangent ) {\r\n\r\n\t\t\t_tangentVector4.fromBufferAttribute( tangent, i );\r\n\t\t\t_tangentVector.fromBufferAttribute( tangent, i );\r\n\r\n\t\t}\r\n\r\n\t\t// apply morph target transform\r\n\t\tif ( morphInfluences ) {\r\n\r\n\t\t\tif ( morphPosition ) {\r\n\r\n\t\t\t\tapplyMorphTarget( morphPosition, morphInfluences, morphTargetsRelative, i, _positionVector );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( morphNormal ) {\r\n\r\n\t\t\t\tapplyMorphTarget( morphNormal, morphInfluences, morphTargetsRelative, i, _normalVector );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( morphTangent ) {\r\n\r\n\t\t\t\tapplyMorphTarget( morphTangent, morphInfluences, morphTargetsRelative, i, _tangentVector );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// apply bone transform\r\n\t\tif ( mesh.isSkinnedMesh ) {\r\n\r\n\t\t\tmesh.applyBoneTransform( i, _positionVector );\r\n\t\t\tif ( normal ) {\r\n\r\n\t\t\t\tboneNormalTransform( mesh, i, _normalVector );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tangent ) {\r\n\r\n\t\t\t\tboneNormalTransform( mesh, i, _tangentVector );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// update the vectors of the attributes\r\n\t\tif ( applyWorldTransforms ) {\r\n\r\n\t\t\t_positionVector.applyMatrix4( mesh.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\ttargetAttributes.position.setXYZ( i, _positionVector.x, _positionVector.y, _positionVector.z );\r\n\r\n\t\tif ( normal ) {\r\n\r\n\t\t\tif ( applyWorldTransforms ) {\r\n\r\n\t\t\t\t_normalVector.applyNormalMatrix( normalMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttargetAttributes.normal.setXYZ( i, _normalVector.x, _normalVector.y, _normalVector.z );\r\n\r\n\t\t}\r\n\r\n\t\tif ( tangent ) {\r\n\r\n\t\t\tif ( applyWorldTransforms ) {\r\n\r\n\t\t\t\t_tangentVector.transformDirection( mesh.matrixWorld );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttargetAttributes.tangent.setXYZW( i, _tangentVector.x, _tangentVector.y, _tangentVector.z, _tangentVector4.w );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// copy other attributes over\r\n\tfor ( const i in options.attributes ) {\r\n\r\n\t\tconst key = options.attributes[ i ];\r\n\t\tif ( key === 'position' || key === 'tangent' || key === 'normal' || ! ( key in attributes ) ) {\r\n\r\n\t\t\tcontinue;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! targetAttributes[ key ] ) {\r\n\r\n\t\t\ttargetGeometry.setAttribute( key, createAttributeClone( attributes[ key ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tvalidateAttributes( attributes[ key ], targetAttributes[ key ] );\r\n\t\tcopyAttributeContents( attributes[ key ], targetAttributes[ key ] );\r\n\r\n\t}\r\n\r\n\tif ( mesh.matrixWorld.determinant() < 0 ) {\r\n\r\n\t\tinvertGeometry( targetGeometry );\r\n\r\n\t}\r\n\r\n\treturn targetGeometry;\r\n\r\n}\r\n","import { BufferGeometry } from 'three';\r\nimport { MeshDiff } from './MeshDiff.js';\r\nimport { convertToStaticGeometry } from './convertToStaticGeometry.js';\r\n\r\nexport class BakedGeometry extends BufferGeometry {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\t\tthis.version = 0;\r\n\t\tthis.hash = null;\r\n\t\tthis._diff = new MeshDiff();\r\n\r\n\t}\r\n\r\n\tupdateFrom( mesh, options ) {\r\n\r\n\t\tconst diff = this._diff;\r\n\t\tif ( diff.didChange( mesh ) ) {\r\n\r\n\t\t\tconvertToStaticGeometry( mesh, options, this );\r\n\t\t\tdiff.updateFrom( mesh );\r\n\t\t\tthis.version ++;\r\n\t\t\tthis.hash = `${ this.uuid }_${ this.version }`;\r\n\t\t\treturn true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","import { BufferAttribute, BufferGeometry, Mesh, MeshBasicMaterial } from 'three';\r\nimport { mergeGeometries } from './mergeGeometries.js';\r\nimport { setCommonAttributes } from './GeometryPreparationUtils.js';\r\nimport { BakedGeometry } from './BakedGeometry.js';\r\n\r\nexport const NO_CHANGE = 0;\r\nexport const GEOMETRY_ADJUSTED = 1;\r\nexport const GEOMETRY_REBUILT = 2;\r\n\r\n// iterate over only the meshes in the provided objects\r\nfunction flatTraverseMeshes( objects, cb ) {\r\n\r\n\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\tconst object = objects[ i ];\r\n\t\tobject.traverseVisible( o => {\r\n\r\n\t\t\tif ( o.isMesh ) {\r\n\r\n\t\t\t\tcb( o );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// return the set of materials used by the provided meshes\r\nfunction getMaterials( meshes ) {\r\n\r\n\tconst materials = [];\r\n\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\r\n\r\n\t\tconst mesh = meshes[ i ];\r\n\t\tif ( Array.isArray( mesh.material ) ) {\r\n\r\n\t\t\tmaterials.push( ...mesh.material );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmaterials.push( mesh.material );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn materials;\r\n\r\n}\r\n\r\nfunction mergeGeometryList( geometries, target, options ) {\r\n\r\n\t// If we have no geometry to merge then provide an empty geometry.\r\n\tif ( geometries.length === 0 ) {\r\n\r\n\t\t// if there are no geometries then just create a fake empty geometry to provide\r\n\t\ttarget.setIndex( null );\r\n\r\n\t\t// remove all geometry\r\n\t\tconst attrs = target.attributes;\r\n\t\tfor ( const key in attrs ) {\r\n\r\n\t\t\ttarget.deleteAttribute( key );\r\n\r\n\t\t}\r\n\r\n\t\t// create dummy attributes\r\n\t\tfor ( const key in options.attributes ) {\r\n\r\n\t\t\ttarget.setAttribute( options.attributes[ key ], new BufferAttribute( new Float32Array( 0 ), 4, false ) );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tmergeGeometries( geometries, options, target );\r\n\r\n\t}\r\n\r\n\t// Mark all attributes as needing an update\r\n\tfor ( const key in target.attributes ) {\r\n\r\n\t\ttarget.attributes[ key ].needsUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport class StaticGeometryGenerator {\r\n\r\n\tconstructor( objects ) {\r\n\r\n\t\tthis.objects = null;\r\n\t\tthis.useGroups = true;\r\n\t\tthis.applyWorldTransforms = true;\r\n\t\tthis.generateMissingAttributes = true;\r\n\t\tthis.overwriteIndex = true;\r\n\t\tthis.attributes = [ 'position', 'normal', 'color', 'tangent', 'uv', 'uv2' ];\r\n\t\tthis._intermediateGeometry = new Map();\r\n\t\tthis._geometryMergeSets = new WeakMap();\r\n\t\tthis._mergeOrder = [];\r\n\t\tthis._dummyMesh = null;\r\n\r\n\t\tthis.setObjects( objects || [] );\r\n\r\n\t}\r\n\r\n\t_getDummyMesh() {\r\n\r\n\t\t// return a consistent dummy mesh\r\n\t\tif ( ! this._dummyMesh ) {\r\n\r\n\t\t\tconst dummyMaterial = new MeshBasicMaterial();\r\n\t\t\tconst emptyGeometry = new BufferGeometry();\r\n\t\t\temptyGeometry.setAttribute( 'position', new BufferAttribute( new Float32Array( 9 ), 3 ) );\r\n\t\t\tthis._dummyMesh = new Mesh( emptyGeometry, dummyMaterial );\r\n\r\n\t\t}\r\n\r\n\t\treturn this._dummyMesh;\r\n\r\n\t}\r\n\r\n\t_getMeshes() {\r\n\r\n\t\t// iterate over only the meshes in the provided objects\r\n\t\tconst meshes = [];\r\n\t\tflatTraverseMeshes( this.objects, mesh => {\r\n\r\n\t\t\tmeshes.push( mesh );\r\n\r\n\t\t} );\r\n\r\n\t\t// Sort the geometry so it's in a reliable order\r\n\t\tmeshes.sort( ( a, b ) => {\r\n\r\n\t\t\tif ( a.uuid > b.uuid ) return 1;\r\n\t\t\tif ( a.uuid < b.uuid ) return - 1;\r\n\t\t\treturn 0;\r\n\r\n\t\t} );\r\n\r\n\t\tif ( meshes.length === 0 ) {\r\n\r\n\t\t\tmeshes.push( this._getDummyMesh() );\r\n\r\n\t\t}\r\n\r\n\t\treturn meshes;\r\n\r\n\t}\r\n\r\n\t_updateIntermediateGeometries() {\r\n\r\n\t\tconst { _intermediateGeometry } = this;\r\n\r\n\t\tconst meshes = this._getMeshes();\r\n\t\tconst unusedMeshKeys = new Set( _intermediateGeometry.keys() );\r\n\t\tconst convertOptions = {\r\n\t\t\tattributes: this.attributes,\r\n\t\t\tapplyWorldTransforms: this.applyWorldTransforms,\r\n\t\t};\r\n\r\n\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst mesh = meshes[ i ];\r\n\t\t\tconst meshKey = mesh.uuid;\r\n\t\t\tunusedMeshKeys.delete( meshKey );\r\n\r\n\t\t\t// initialize the intermediate geometry\r\n\t\t\tif ( ! _intermediateGeometry.has( meshKey ) ) {\r\n\r\n\t\t\t\t_intermediateGeometry.set( meshKey, new BakedGeometry() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// transform the geometry into the intermediate buffer geometry, saving whether\r\n\t\t\t// or not it changed.\r\n\t\t\tconst geom = _intermediateGeometry.get( meshKey );\r\n\t\t\tif ( geom.updateFrom( mesh, convertOptions ) ) {\r\n\r\n\t\t\t\t// TODO: provide option for only generating the set of attributes that are present\r\n\t\t\t\t// and are in the attributes array\r\n\t\t\t\tif ( this.generateMissingAttributes ) {\r\n\r\n\t\t\t\t\tsetCommonAttributes( geom, this.attributes );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tunusedMeshKeys.forEach( key => {\r\n\r\n\t\t\t_intermediateGeometry.delete( key );\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tsetObjects( objects ) {\r\n\r\n\t\tif ( Array.isArray( objects ) ) {\r\n\r\n\t\t\tthis.objects = [ ...objects ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.objects = [ objects ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( targetGeometry = new BufferGeometry() ) {\r\n\r\n\t\t// track which attributes have been updated and which to skip to avoid unnecessary attribute copies\r\n\t\tconst { useGroups, overwriteIndex, _intermediateGeometry, _geometryMergeSets } = this;\r\n\r\n\t\tconst meshes = this._getMeshes();\r\n\t\tconst skipAssigningAttributes = [];\r\n\t\tconst mergeGeometry = [];\r\n\t\tconst previousMergeInfo = _geometryMergeSets.get( targetGeometry ) || [];\r\n\r\n\t\t// update all the intermediate static geometry representations\r\n\t\tthis._updateIntermediateGeometries();\r\n\r\n\t\t// get the list of geometries to merge\r\n\t\tlet forceUpdate = false;\r\n\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst mesh = meshes[ i ];\r\n\t\t\tconst geom = _intermediateGeometry.get( mesh.uuid );\r\n\t\t\tmergeGeometry.push( geom );\r\n\r\n\t\t\tconst info = previousMergeInfo[ i ];\r\n\t\t\tif ( ! info || info.uuid !== geom.uuid ) {\r\n\r\n\t\t\t\tskipAssigningAttributes.push( false );\r\n\t\t\t\tforceUpdate = true;\r\n\r\n\t\t\t} else if ( info.version !== geom.version ) {\r\n\r\n\t\t\t\tskipAssigningAttributes.push( false );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tskipAssigningAttributes.push( true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// If we have no geometry to merge then provide an empty geometry.\r\n\t\tmergeGeometryList( mergeGeometry, targetGeometry, { useGroups, forceUpdate, skipAssigningAttributes, overwriteIndex } );\r\n\r\n\t\t// force update means the attribute buffer lengths have changed\r\n\t\tif ( forceUpdate ) {\r\n\r\n\t\t\ttargetGeometry.dispose();\r\n\r\n\t\t}\r\n\r\n\t\t_geometryMergeSets.set( targetGeometry, mergeGeometry.map( g => ( {\r\n\t\t\tversion: g.version,\r\n\t\t\tuuid: g.uuid,\r\n\t\t} ) ) );\r\n\r\n\t\tlet changeType = NO_CHANGE;\r\n\t\tif ( forceUpdate ) changeType = GEOMETRY_REBUILT;\r\n\t\telse if ( skipAssigningAttributes.includes( false ) ) changeType = GEOMETRY_ADJUSTED;\r\n\r\n\t\treturn {\r\n\t\t\tchangeType,\r\n\t\t\tmaterials: getMaterials( meshes ),\r\n\t\t\tgeometry: targetGeometry,\r\n\t\t};\r\n\r\n\t}\r\n\r\n}\r\n","import { BufferGeometry } from 'three';\r\nimport { MeshBVH, SAH } from 'three-mesh-bvh';\r\nimport { StaticGeometryGenerator, NO_CHANGE, GEOMETRY_ADJUSTED, GEOMETRY_REBUILT } from './utils/StaticGeometryGenerator.js';\r\nimport { updateMaterialIndexAttribute } from './utils/GeometryPreparationUtils.js';\r\n\r\n// collect the textures from the materials\r\nfunction getTextures( materials ) {\r\n\r\n\tconst textureSet = new Set();\r\n\tfor ( let i = 0, l = materials.length; i < l; i ++ ) {\r\n\r\n\t\tconst material = materials[ i ];\r\n\t\tfor ( const key in material ) {\r\n\r\n\t\t\tconst value = material[ key ];\r\n\t\t\tif ( value && value.isTexture ) {\r\n\r\n\t\t\t\ttextureSet.add( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn Array.from( textureSet );\r\n\r\n}\r\n\r\n// collect the lights in the scene\r\nfunction getLights( objects ) {\r\n\r\n\tconst lights = [];\r\n\tconst iesSet = new Set();\r\n\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\tobjects[ i ].traverse( c => {\r\n\r\n\t\t\tif ( c.visible ) {\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\tc.isRectAreaLight ||\r\n\t\t\t\t\tc.isSpotLight ||\r\n\t\t\t\t\tc.isPointLight ||\r\n\t\t\t\t\tc.isDirectionalLight\r\n\t\t\t\t) {\r\n\r\n\t\t\t\t\tlights.push( c );\r\n\r\n\t\t\t\t\tif ( c.iesMap ) {\r\n\r\n\t\t\t\t\t\tiesSet.add( c.iesMap );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tconst iesTextures = Array.from( iesSet ).sort( ( a, b ) => {\r\n\r\n\t\tif ( a.uuid < b.uuid ) return 1;\r\n\t\tif ( a.uuid > b.uuid ) return - 1;\r\n\t\treturn 0;\r\n\r\n\t} );\r\n\r\n\treturn { lights, iesTextures };\r\n\r\n}\r\n\r\nexport class PathTracingSceneGenerator {\r\n\r\n\tget initialized() {\r\n\r\n\t\treturn Boolean( this.bvh );\r\n\r\n\t}\r\n\r\n\tconstructor( objects ) {\r\n\r\n\t\t// options\r\n\t\tthis.bvhOptions = {};\r\n\t\tthis.attributes = [ 'position', 'normal', 'tangent', 'color', 'uv', 'uv2' ];\r\n\t\tthis.generateBVH = true;\r\n\r\n\t\t// state\r\n\t\tthis.bvh = null;\r\n\t\tthis.geometry = new BufferGeometry();\r\n\t\tthis.staticGeometryGenerator = new StaticGeometryGenerator( objects );\r\n\t\tthis._bvhWorker = null;\r\n\t\tthis._pendingGenerate = null;\r\n\t\tthis._buildAsync = false;\r\n\r\n\t}\r\n\r\n\tsetObjects( objects ) {\r\n\r\n\t\tthis.staticGeometryGenerator.setObjects( objects );\r\n\r\n\t}\r\n\r\n\tsetBVHWorker( bvhWorker ) {\r\n\r\n\t\tthis._bvhWorker = bvhWorker;\r\n\r\n\t}\r\n\r\n\tasync generateAsync( onProgress = null ) {\r\n\r\n\t\tif ( ! this._bvhWorker ) {\r\n\r\n\t\t\tthrow new Error( 'PathTracingSceneGenerator: \"setBVHWorker\" must be called before \"generateAsync\" can be called.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.bvh instanceof Promise ) {\r\n\r\n\t\t\t// if a bvh is already being generated we can wait for that to finish\r\n\t\t\t// and build another with the latest data while sharing the results.\r\n\t\t\tif ( ! this._pendingGenerate ) {\r\n\r\n\t\t\t\tthis._pendingGenerate = new Promise( async () => {\r\n\r\n\t\t\t\t\tawait this.bvh;\r\n\t\t\t\t\tthis._pendingGenerate = null;\r\n\r\n\t\t\t\t\t// TODO: support multiple callbacks queued?\r\n\t\t\t\t\treturn this.generateAsync( onProgress );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this._pendingGenerate;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._buildAsync = true;\r\n\t\t\tconst result = this.generate( onProgress );\r\n\t\t\tthis._buildAsync = false;\r\n\r\n\t\t\tresult.bvh = this.bvh = await result.bvh;\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( onProgress = null ) {\r\n\r\n\t\tconst { staticGeometryGenerator, geometry, attributes } = this;\r\n\t\tconst objects = staticGeometryGenerator.objects;\r\n\t\tstaticGeometryGenerator.attributes = attributes;\r\n\r\n\t\t// update the skeleton animations in case WebGLRenderer is not running\r\n\t\t// to update it.\r\n\t\tobjects.forEach( o => {\r\n\r\n\t\t\to.traverse( c => {\r\n\r\n\t\t\t\tif ( c.isSkinnedMesh && c.skeleton ) {\r\n\r\n\t\t\t\t\tc.skeleton.update();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t\t// generate the geometry\r\n\t\tconst result = staticGeometryGenerator.generate( geometry );\r\n\t\tconst materials = result.materials;\r\n\t\tconst textures = getTextures( materials );\r\n\t\tconst { lights, iesTextures } = getLights( objects );\r\n\r\n\t\tif ( result.changeType !== NO_CHANGE ) {\r\n\r\n\t\t\tupdateMaterialIndexAttribute( geometry, materials, materials );\r\n\r\n\t\t}\r\n\r\n\t\t// only generate a new bvh if the objects used have changed\r\n\t\tif ( this.generateBVH ) {\r\n\r\n\t\t\tif ( this.bvh instanceof Promise ) {\r\n\r\n\t\t\t\tthrow new Error( 'PathTracingSceneGenerator: BVH is already building asynchronously.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( result.changeType === GEOMETRY_REBUILT ) {\r\n\r\n\t\t\t\tconst bvhOptions = {\r\n\t\t\t\t\tstrategy: SAH,\r\n\t\t\t\t\tmaxLeafTris: 1,\r\n\t\t\t\t\tindirect: true,\r\n\t\t\t\t\tonProgress,\r\n\t\t\t\t\t...this.bvhOptions,\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif ( this._buildAsync ) {\r\n\r\n\t\t\t\t\tthis.bvh = this._bvhWorker.generate( geometry, bvhOptions );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis.bvh = new MeshBVH( geometry, bvhOptions );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( result.changeType === GEOMETRY_ADJUSTED ) {\r\n\r\n\t\t\t\tthis.bvh.refit();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tbvhChanged: result.changeType !== NO_CHANGE,\r\n\t\t\tbvh: this.bvh,\r\n\t\t\tlights,\r\n\t\t\tiesTextures,\r\n\t\t\tgeometry,\r\n\t\t\tmaterials,\r\n\t\t\ttextures,\r\n\t\t\tobjects,\r\n\t\t};\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport class DynamicPathTracingSceneGenerator extends PathTracingSceneGenerator {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\t\tconsole.warn( 'DynamicPathTracingSceneGenerator has been deprecated and renamed to \"PathTracingSceneGenerator\".' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport class PathTracingSceneWorker extends PathTracingSceneGenerator {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\t\tconsole.warn( 'PathTracingSceneWorker has been deprecated and renamed to \"PathTracingSceneGenerator\".' );\r\n\r\n\t}\r\n\r\n}\r\n","import { ShaderMaterial } from 'three';\r\n\r\nexport class MaterialBase extends ShaderMaterial {\r\n\r\n\tconstructor( shader ) {\r\n\r\n\t\tsuper( shader );\r\n\r\n\t\tfor ( const key in this.uniforms ) {\r\n\r\n\t\t\tObject.defineProperty( this, key, {\r\n\r\n\t\t\t\tget() {\r\n\r\n\t\t\t\t\treturn this.uniforms[ key ].value;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tset( v ) {\r\n\r\n\t\t\t\t\tthis.uniforms[ key ].value = v;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// sets the given named define value and sets \"needsUpdate\" to true if it's different\r\n\tsetDefine( name, value = undefined ) {\r\n\r\n\t\tif ( value === undefined || value === null ) {\r\n\r\n\t\t\tif ( name in this.defines ) {\r\n\r\n\t\t\t\tdelete this.defines[ name ];\r\n\t\t\t\tthis.needsUpdate = true;\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( this.defines[ name ] !== value ) {\r\n\r\n\t\t\t\tthis.defines[ name ] = value;\r\n\t\t\t\tthis.needsUpdate = true;\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n}\r\n","import { NoBlending } from 'three';\r\nimport { MaterialBase } from '../MaterialBase.js';\r\n\r\nexport class BlendMaterial extends MaterialBase {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper( {\r\n\r\n\t\t\tblending: NoBlending,\r\n\r\n\t\t\tuniforms: {\r\n\r\n\t\t\t\ttarget1: { value: null },\r\n\t\t\t\ttarget2: { value: null },\r\n\t\t\t\topacity: { value: 1.0 },\r\n\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: /* glsl */`\r\n\r\n\t\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t\t\t}`,\r\n\r\n\t\t\tfragmentShader: /* glsl */`\r\n\r\n\t\t\t\tuniform float opacity;\r\n\r\n\t\t\t\tuniform sampler2D target1;\r\n\t\t\t\tuniform sampler2D target2;\r\n\r\n\t\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvec4 color1 = texture2D( target1, vUv );\r\n\t\t\t\t\tvec4 color2 = texture2D( target2, vUv );\r\n\r\n\t\t\t\t\tfloat invOpacity = 1.0 - opacity;\r\n\t\t\t\t\tfloat totalAlpha = color1.a * invOpacity + color2.a * opacity;\r\n\r\n\t\t\t\t\tif ( color1.a != 0.0 || color2.a != 0.0 ) {\r\n\r\n\t\t\t\t\t\tgl_FragColor.rgb = color1.rgb * ( invOpacity * color1.a / totalAlpha ) + color2.rgb * ( opacity * color2.a / totalAlpha );\r\n\t\t\t\t\t\tgl_FragColor.a = totalAlpha;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tgl_FragColor = vec4( 0.0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}`\r\n\r\n\t\t} );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n}\r\n","// References\r\n// - https://jcgt.org/published/0009/04/01/\r\n// - Code from https://www.shadertoy.com/view/WtGyDm\r\n\r\n// functions to generate multi-dimensions variables of the same functions\r\n// to support 1, 2, 3, and 4 dimensional sobol sampling.\r\nfunction generateSobolFunctionVariants( dim = 1 ) {\r\n\r\n\tlet type = 'uint';\r\n\tif ( dim > 1 ) {\r\n\r\n\t\ttype = 'uvec' + dim;\r\n\r\n\t}\r\n\r\n\treturn /* glsl */`\r\n\t\t${ type } sobolReverseBits( ${ type } x ) {\r\n\r\n\t\t\tx = ( ( ( x & 0xaaaaaaaau ) >> 1 ) | ( ( x & 0x55555555u ) << 1 ) );\r\n\t\t\tx = ( ( ( x & 0xccccccccu ) >> 2 ) | ( ( x & 0x33333333u ) << 2 ) );\r\n\t\t\tx = ( ( ( x & 0xf0f0f0f0u ) >> 4 ) | ( ( x & 0x0f0f0f0fu ) << 4 ) );\r\n\t\t\tx = ( ( ( x & 0xff00ff00u ) >> 8 ) | ( ( x & 0x00ff00ffu ) << 8 ) );\r\n\t\t\treturn ( ( x >> 16 ) | ( x << 16 ) );\r\n\r\n\t\t}\r\n\r\n\t\t${ type } sobolHashCombine( uint seed, ${ type } v ) {\r\n\r\n\t\t\treturn seed ^ ( v + ${ type }( ( seed << 6 ) + ( seed >> 2 ) ) );\r\n\r\n\t\t}\r\n\r\n\t\t${ type } sobolLaineKarrasPermutation( ${ type } x, ${ type } seed ) {\r\n\r\n\t\t\tx += seed;\r\n\t\t\tx ^= x * 0x6c50b47cu;\r\n\t\t\tx ^= x * 0xb82f1e52u;\r\n\t\t\tx ^= x * 0xc7afe638u;\r\n\t\t\tx ^= x * 0x8d22f6e6u;\r\n\t\t\treturn x;\r\n\r\n\t\t}\r\n\r\n\t\t${ type } nestedUniformScrambleBase2( ${ type } x, ${ type } seed ) {\r\n\r\n\t\t\tx = sobolLaineKarrasPermutation( x, seed );\r\n\t\t\tx = sobolReverseBits( x );\r\n\t\t\treturn x;\r\n\r\n\t\t}\r\n\t`;\r\n\r\n}\r\n\r\nfunction generateSobolSampleFunctions( dim = 1 ) {\r\n\r\n\tlet utype = 'uint';\r\n\tlet vtype = 'float';\r\n\tlet num = '';\r\n\tlet components = '.r';\r\n\tlet combineValues = '1u';\r\n\tif ( dim > 1 ) {\r\n\r\n\t\tutype = 'uvec' + dim;\r\n\t\tvtype = 'vec' + dim;\r\n\t\tnum = dim + '';\r\n\t\tif ( dim === 2 ) {\r\n\r\n\t\t\tcomponents = '.rg';\r\n\t\t\tcombineValues = 'uvec2( 1u, 2u )';\r\n\r\n\t\t} else if ( dim === 3 ) {\r\n\r\n\t\t\tcomponents = '.rgb';\r\n\t\t\tcombineValues = 'uvec3( 1u, 2u, 3u )';\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcomponents = '';\r\n\t\t\tcombineValues = 'uvec4( 1u, 2u, 3u, 4u )';\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn /* glsl */`\r\n\r\n\t\t${ vtype } sobol${ num }( int effect ) {\r\n\r\n\t\t\tuint seed = sobolGetSeed( sobolBounceIndex, uint( effect ) );\r\n\t\t\tuint index = sobolPathIndex;\r\n\r\n\t\t\tuint shuffle_seed = sobolHashCombine( seed, 0u );\r\n\t\t\tuint shuffled_index = nestedUniformScrambleBase2( sobolReverseBits( index ), shuffle_seed );\r\n\t\t\t${ vtype } sobol_pt = sobolGetTexturePoint( shuffled_index )${ components };\r\n\t\t\t${ utype } result = ${ utype }( sobol_pt * 16777216.0 );\r\n\r\n\t\t\t${ utype } seed2 = sobolHashCombine( seed, ${ combineValues } );\r\n\t\t\tresult = nestedUniformScrambleBase2( result, seed2 );\r\n\r\n\t\t\treturn SOBOL_FACTOR * ${ vtype }( result >> 8 );\r\n\r\n\t\t}\r\n\t`;\r\n\r\n}\r\n\r\nexport const sobol_common = /* glsl */`\r\n\r\n\t// Utils\r\n\tconst float SOBOL_FACTOR = 1.0 / 16777216.0;\r\n\tconst uint SOBOL_MAX_POINTS = 256u * 256u;\r\n\r\n\t${ generateSobolFunctionVariants( 1 ) }\r\n\t${ generateSobolFunctionVariants( 2 ) }\r\n\t${ generateSobolFunctionVariants( 3 ) }\r\n\t${ generateSobolFunctionVariants( 4 ) }\r\n\r\n\tuint sobolHash( uint x ) {\r\n\r\n\t\t// finalizer from murmurhash3\r\n\t\tx ^= x >> 16;\r\n\t\tx *= 0x85ebca6bu;\r\n\t\tx ^= x >> 13;\r\n\t\tx *= 0xc2b2ae35u;\r\n\t\tx ^= x >> 16;\r\n\t\treturn x;\r\n\r\n\t}\r\n\r\n`;\r\n\r\nexport const sobol_point_generation = /* glsl */`\r\n\r\n\tconst uint SOBOL_DIRECTIONS_1[ 32 ] = uint[ 32 ](\r\n\t\t0x80000000u, 0xc0000000u, 0xa0000000u, 0xf0000000u,\r\n\t\t0x88000000u, 0xcc000000u, 0xaa000000u, 0xff000000u,\r\n\t\t0x80800000u, 0xc0c00000u, 0xa0a00000u, 0xf0f00000u,\r\n\t\t0x88880000u, 0xcccc0000u, 0xaaaa0000u, 0xffff0000u,\r\n\t\t0x80008000u, 0xc000c000u, 0xa000a000u, 0xf000f000u,\r\n\t\t0x88008800u, 0xcc00cc00u, 0xaa00aa00u, 0xff00ff00u,\r\n\t\t0x80808080u, 0xc0c0c0c0u, 0xa0a0a0a0u, 0xf0f0f0f0u,\r\n\t\t0x88888888u, 0xccccccccu, 0xaaaaaaaau, 0xffffffffu\r\n\t);\r\n\r\n\tconst uint SOBOL_DIRECTIONS_2[ 32 ] = uint[ 32 ](\r\n\t\t0x80000000u, 0xc0000000u, 0x60000000u, 0x90000000u,\r\n\t\t0xe8000000u, 0x5c000000u, 0x8e000000u, 0xc5000000u,\r\n\t\t0x68800000u, 0x9cc00000u, 0xee600000u, 0x55900000u,\r\n\t\t0x80680000u, 0xc09c0000u, 0x60ee0000u, 0x90550000u,\r\n\t\t0xe8808000u, 0x5cc0c000u, 0x8e606000u, 0xc5909000u,\r\n\t\t0x6868e800u, 0x9c9c5c00u, 0xeeee8e00u, 0x5555c500u,\r\n\t\t0x8000e880u, 0xc0005cc0u, 0x60008e60u, 0x9000c590u,\r\n\t\t0xe8006868u, 0x5c009c9cu, 0x8e00eeeeu, 0xc5005555u\r\n\t);\r\n\r\n\tconst uint SOBOL_DIRECTIONS_3[ 32 ] = uint[ 32 ](\r\n\t\t0x80000000u, 0xc0000000u, 0x20000000u, 0x50000000u,\r\n\t\t0xf8000000u, 0x74000000u, 0xa2000000u, 0x93000000u,\r\n\t\t0xd8800000u, 0x25400000u, 0x59e00000u, 0xe6d00000u,\r\n\t\t0x78080000u, 0xb40c0000u, 0x82020000u, 0xc3050000u,\r\n\t\t0x208f8000u, 0x51474000u, 0xfbea2000u, 0x75d93000u,\r\n\t\t0xa0858800u, 0x914e5400u, 0xdbe79e00u, 0x25db6d00u,\r\n\t\t0x58800080u, 0xe54000c0u, 0x79e00020u, 0xb6d00050u,\r\n\t\t0x800800f8u, 0xc00c0074u, 0x200200a2u, 0x50050093u\r\n\t);\r\n\r\n\tconst uint SOBOL_DIRECTIONS_4[ 32 ] = uint[ 32 ](\r\n\t\t0x80000000u, 0x40000000u, 0x20000000u, 0xb0000000u,\r\n\t\t0xf8000000u, 0xdc000000u, 0x7a000000u, 0x9d000000u,\r\n\t\t0x5a800000u, 0x2fc00000u, 0xa1600000u, 0xf0b00000u,\r\n\t\t0xda880000u, 0x6fc40000u, 0x81620000u, 0x40bb0000u,\r\n\t\t0x22878000u, 0xb3c9c000u, 0xfb65a000u, 0xddb2d000u,\r\n\t\t0x78022800u, 0x9c0b3c00u, 0x5a0fb600u, 0x2d0ddb00u,\r\n\t\t0xa2878080u, 0xf3c9c040u, 0xdb65a020u, 0x6db2d0b0u,\r\n\t\t0x800228f8u, 0x400b3cdcu, 0x200fb67au, 0xb00ddb9du\r\n\t);\r\n\r\n\tuint getMaskedSobol( uint index, uint directions[ 32 ] ) {\r\n\r\n\t\tuint X = 0u;\r\n\t\tfor ( int bit = 0; bit < 32; bit ++ ) {\r\n\r\n\t\t\tuint mask = ( index >> bit ) & 1u;\r\n\t\t\tX ^= mask * directions[ bit ];\r\n\r\n\t\t}\r\n\t\treturn X;\r\n\r\n\t}\r\n\r\n\tvec4 generateSobolPoint( uint index ) {\r\n\r\n\t\tif ( index >= SOBOL_MAX_POINTS ) {\r\n\r\n\t\t\treturn vec4( 0.0 );\r\n\r\n\t\t}\r\n\r\n\t\t// NOTE: this sobol \"direction\" is also available but we can't write out 5 components\r\n\t\t// uint x = index & 0x00ffffffu;\r\n\t\tuint x = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_1 ) ) & 0x00ffffffu;\r\n\t\tuint y = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_2 ) ) & 0x00ffffffu;\r\n\t\tuint z = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_3 ) ) & 0x00ffffffu;\r\n\t\tuint w = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_4 ) ) & 0x00ffffffu;\r\n\r\n\t\treturn vec4( x, y, z, w ) * SOBOL_FACTOR;\r\n\r\n\t}\r\n\r\n`;\r\n\r\nexport const sobol_functions = /* glsl */`\r\n\r\n\t// Seeds\r\n\tuniform sampler2D sobolTexture;\r\n\tuint sobolPixelIndex = 0u;\r\n\tuint sobolPathIndex = 0u;\r\n\tuint sobolBounceIndex = 0u;\r\n\r\n\tuint sobolGetSeed( uint bounce, uint effect ) {\r\n\r\n\t\treturn sobolHash(\r\n\t\t\tsobolHashCombine(\r\n\t\t\t\tsobolHashCombine(\r\n\t\t\t\t\tsobolHash( bounce ),\r\n\t\t\t\t\tsobolPixelIndex\r\n\t\t\t\t),\r\n\t\t\t\teffect\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tvec4 sobolGetTexturePoint( uint index ) {\r\n\r\n\t\tif ( index >= SOBOL_MAX_POINTS ) {\r\n\r\n\t\t\tindex = index % SOBOL_MAX_POINTS;\r\n\r\n\t\t}\r\n\r\n\t\tuvec2 dim = uvec2( textureSize( sobolTexture, 0 ).xy );\r\n\t\tuint y = index / dim.x;\r\n\t\tuint x = index - y * dim.x;\r\n\t\tvec2 uv = vec2( x, y ) / vec2( dim );\r\n\t\treturn texture( sobolTexture, uv );\r\n\r\n\t}\r\n\r\n\t${ generateSobolSampleFunctions( 1 ) }\r\n\t${ generateSobolSampleFunctions( 2 ) }\r\n\t${ generateSobolSampleFunctions( 3 ) }\r\n\t${ generateSobolSampleFunctions( 4 ) }\r\n\r\n`;\r\n","import { FloatType, NearestFilter, NoBlending, RGBAFormat, Vector2, WebGLRenderTarget } from 'three';\r\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\r\nimport { MaterialBase } from '../materials/MaterialBase.js';\r\nimport { sobol_common, sobol_point_generation } from '../shader/rand/sobol.glsl.js';\r\n\r\nclass SobolNumbersMaterial extends MaterialBase {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( {\r\n\r\n\t\t\tblending: NoBlending,\r\n\r\n\t\t\tuniforms: {\r\n\r\n\t\t\t\tresolution: { value: new Vector2() },\r\n\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: /* glsl */`\r\n\r\n\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\r\n\t\t\tfragmentShader: /* glsl */`\r\n\r\n\t\t\t\t${ sobol_common }\r\n\t\t\t\t${ sobol_point_generation }\r\n\r\n\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\tuniform vec2 resolution;\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tuint index = uint( gl_FragCoord.y ) * uint( resolution.x ) + uint( gl_FragCoord.x );\r\n\t\t\t\t\tgl_FragColor = generateSobolPoint( index );\r\n\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport class SobolNumberMapGenerator {\r\n\r\n\tgenerate( renderer, dimensions = 256 ) {\r\n\r\n\t\tconst target = new WebGLRenderTarget( dimensions, dimensions, {\r\n\r\n\t\t\ttype: FloatType,\r\n\t\t\tformat: RGBAFormat,\r\n\t\t\tminFilter: NearestFilter,\r\n\t\t\tmagFilter: NearestFilter,\r\n\t\t\tgenerateMipmaps: false,\r\n\r\n\t\t} );\r\n\r\n\t\tconst ogTarget = renderer.getRenderTarget();\r\n\t\trenderer.setRenderTarget( target );\r\n\r\n\t\tconst quad = new FullScreenQuad( new SobolNumbersMaterial() );\r\n\t\tquad.material.resolution.set( dimensions, dimensions );\r\n\t\tquad.render( renderer );\r\n\r\n\t\trenderer.setRenderTarget( ogTarget );\r\n\t\tquad.dispose();\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n}\r\n","import { PerspectiveCamera } from 'three';\r\n\r\nexport class PhysicalCamera extends PerspectiveCamera {\r\n\r\n\tset bokehSize( size ) {\r\n\r\n\t\tthis.fStop = this.getFocalLength() / size;\r\n\r\n\t}\r\n\r\n\tget bokehSize() {\r\n\r\n\t\treturn this.getFocalLength() / this.fStop;\r\n\r\n\t}\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\t\tthis.fStop = 1.4;\r\n\t\tthis.apertureBlades = 0;\r\n\t\tthis.apertureRotation = 0;\r\n\t\tthis.focusDistance = 25;\r\n\t\tthis.anamorphicRatio = 1;\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.fStop = source.fStop;\r\n\t\tthis.apertureBlades = source.apertureBlades;\r\n\t\tthis.apertureRotation = source.apertureRotation;\r\n\t\tthis.focusDistance = source.focusDistance;\r\n\t\tthis.anamorphicRatio = source.anamorphicRatio;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n","import { PhysicalCamera } from '../objects/PhysicalCamera.js';\r\nexport class PhysicalCameraUniform {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.bokehSize = 0;\r\n\t\tthis.apertureBlades = 0;\r\n\t\tthis.apertureRotation = 0;\r\n\t\tthis.focusDistance = 10;\r\n\t\tthis.anamorphicRatio = 1;\r\n\r\n\t}\r\n\r\n\tupdateFrom( camera ) {\r\n\r\n\t\tif ( camera instanceof PhysicalCamera ) {\r\n\r\n\t\t\tthis.bokehSize = camera.bokehSize;\r\n\t\t\tthis.apertureBlades = camera.apertureBlades;\r\n\t\t\tthis.apertureRotation = camera.apertureRotation;\r\n\t\t\tthis.focusDistance = camera.focusDistance;\r\n\t\t\tthis.anamorphicRatio = camera.anamorphicRatio;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.bokehSize = 0;\r\n\t\t\tthis.apertureRotation = 0;\r\n\t\t\tthis.apertureBlades = 0;\r\n\t\t\tthis.focusDistance = 10;\r\n\t\t\tthis.anamorphicRatio = 1;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","import { DataUtils } from 'three';\r\n\r\n\r\nexport function toHalfFloatArray( f32Array ) {\r\n\r\n\tconst f16Array = new Uint16Array( f32Array.length );\r\n\tfor ( let i = 0, n = f32Array.length; i < n; ++ i ) {\r\n\r\n\t\tf16Array[ i ] = DataUtils.toHalfFloat( f32Array[ i ] );\r\n\r\n\t}\r\n\r\n\treturn f16Array;\r\n\r\n}\r\n","import { DataTexture, RedFormat, LinearFilter, DataUtils, HalfFloatType, Source, RepeatWrapping, RGBAFormat, FloatType, ClampToEdgeWrapping } from 'three';\r\nimport { toHalfFloatArray } from '../utils/TextureUtils.js';\r\n\r\nfunction binarySearchFindClosestIndexOf( array, targetValue, offset = 0, count = array.length ) {\r\n\r\n\tlet lower = offset;\r\n\tlet upper = offset + count - 1;\r\n\r\n\twhile ( lower < upper ) {\r\n\r\n\t\t// calculate the midpoint for this iteration using a bitwise shift right operator to save 1 floating point multiplication\r\n\t\t// and 1 truncation from the double tilde operator to improve performance\r\n\t\t// this results in much better performance over using standard \"~ ~ ( (lower + upper) ) / 2\" to calculate the midpoint\r\n\t\tconst mid = ( lower + upper ) >> 1;\r\n\r\n\t\t// check if the middle array value is above or below the target and shift\r\n\t\t// which half of the array we're looking at\r\n\t\tif ( array[ mid ] < targetValue ) {\r\n\r\n\t\t\tlower = mid + 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tupper = mid;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn lower - offset;\r\n\r\n}\r\n\r\nfunction colorToLuminance( r, g, b ) {\r\n\r\n\t// https://en.wikipedia.org/wiki/Relative_luminance\r\n\treturn 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n\r\n}\r\n\r\n// ensures the data is all floating point values and flipY is false\r\nfunction preprocessEnvMap( envMap, targetType = HalfFloatType ) {\r\n\r\n\tconst map = envMap.clone();\r\n\tmap.source = new Source( { ...map.image } );\r\n\tconst { width, height, data } = map.image;\r\n\r\n\t// TODO: is there a simple way to avoid cloning and adjusting the env map data here?\r\n\t// convert the data from half float uint 16 arrays to float arrays for cdf computation\r\n\tlet newData = data;\r\n\tif ( map.type !== targetType ) {\r\n\r\n\t\tif ( targetType === HalfFloatType ) {\r\n\r\n\t\t\tnewData = new Uint16Array( data.length );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnewData = new Float32Array( data.length );\r\n\r\n\t\t}\r\n\r\n\t\tlet maxIntValue;\r\n\t\tif ( data instanceof Int8Array || data instanceof Int16Array || data instanceof Int32Array ) {\r\n\r\n\t\t\tmaxIntValue = 2 ** ( 8 * data.BYTES_PER_ELEMENT - 1 ) - 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmaxIntValue = 2 ** ( 8 * data.BYTES_PER_ELEMENT ) - 1;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\r\n\r\n\t\t\tlet v = data[ i ];\r\n\t\t\tif ( map.type === HalfFloatType ) {\r\n\r\n\t\t\t\tv = DataUtils.fromHalfFloat( data[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( map.type !== FloatType && map.type !== HalfFloatType ) {\r\n\r\n\t\t\t\tv /= maxIntValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( targetType === HalfFloatType ) {\r\n\r\n\t\t\t\tnewData[ i ] = DataUtils.toHalfFloat( v );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tmap.image.data = newData;\r\n\t\tmap.type = targetType;\r\n\r\n\t}\r\n\r\n\t// remove any y flipping for cdf computation\r\n\tif ( map.flipY ) {\r\n\r\n\t\tconst ogData = newData;\r\n\t\tnewData = newData.slice();\r\n\t\tfor ( let y = 0; y < height; y ++ ) {\r\n\r\n\t\t\tfor ( let x = 0; x < width; x ++ ) {\r\n\r\n\t\t\t\tconst newY = height - y - 1;\r\n\t\t\t\tconst ogIndex = 4 * ( y * width + x );\r\n\t\t\t\tconst newIndex = 4 * ( newY * width + x );\r\n\r\n\t\t\t\tnewData[ newIndex + 0 ] = ogData[ ogIndex + 0 ];\r\n\t\t\t\tnewData[ newIndex + 1 ] = ogData[ ogIndex + 1 ];\r\n\t\t\t\tnewData[ newIndex + 2 ] = ogData[ ogIndex + 2 ];\r\n\t\t\t\tnewData[ newIndex + 3 ] = ogData[ ogIndex + 3 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tmap.flipY = false;\r\n\t\tmap.image.data = newData;\r\n\r\n\t}\r\n\r\n\treturn map;\r\n\r\n}\r\n\r\nexport class EquirectHdrInfoUniform {\r\n\r\n\tconstructor() {\r\n\r\n\t\t// Default to a white texture and associated weights so we don't\r\n\t\t// just render black initially.\r\n\t\tconst blackTex = new DataTexture( toHalfFloatArray( new Float32Array( [ 0, 0, 0, 0 ] ) ), 1, 1 );\r\n\t\tblackTex.type = HalfFloatType;\r\n\t\tblackTex.format = RGBAFormat;\r\n\t\tblackTex.minFilter = LinearFilter;\r\n\t\tblackTex.magFilter = LinearFilter;\r\n\t\tblackTex.wrapS = RepeatWrapping;\r\n\t\tblackTex.wrapT = RepeatWrapping;\r\n\t\tblackTex.generateMipmaps = false;\r\n\t\tblackTex.needsUpdate = true;\r\n\r\n\t\t// Stores a map of [0, 1] value -> cumulative importance row & pdf\r\n\t\t// used to sampling a random value to a relevant row to sample from\r\n\t\tconst marginalWeights = new DataTexture( toHalfFloatArray( new Float32Array( [ 0, 1 ] ) ), 1, 2 );\r\n\t\tmarginalWeights.type = HalfFloatType;\r\n\t\tmarginalWeights.format = RedFormat;\r\n\t\tmarginalWeights.minFilter = LinearFilter;\r\n\t\tmarginalWeights.magFilter = LinearFilter;\r\n\t\tmarginalWeights.generateMipmaps = false;\r\n\t\tmarginalWeights.needsUpdate = true;\r\n\r\n\t\t// Stores a map of [0, 1] value -> cumulative importance column & pdf\r\n\t\t// used to sampling a random value to a relevant pixel to sample from\r\n\t\tconst conditionalWeights = new DataTexture( toHalfFloatArray( new Float32Array( [ 0, 0, 1, 1 ] ) ), 2, 2 );\r\n\t\tconditionalWeights.type = HalfFloatType;\r\n\t\tconditionalWeights.format = RedFormat;\r\n\t\tconditionalWeights.minFilter = LinearFilter;\r\n\t\tconditionalWeights.magFilter = LinearFilter;\r\n\t\tconditionalWeights.generateMipmaps = false;\r\n\t\tconditionalWeights.needsUpdate = true;\r\n\r\n\t\tthis.map = blackTex;\r\n\t\tthis.marginalWeights = marginalWeights;\r\n\t\tthis.conditionalWeights = conditionalWeights;\r\n\t\tthis.totalSum = 0;\r\n\r\n\t\t// TODO: Add support for float or half float types here. We need to pass this into\r\n\t\t// the preprocess function and ensure our CDF and MDF textures are appropriately sized\r\n\t\t// Ideally we wouldn't upscale a bit depth if we didn't need to.\r\n\t\t// this.type = HalfFloatType;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.marginalWeights.dispose();\r\n\t\tthis.conditionalWeights.dispose();\r\n\t\tthis.map.dispose();\r\n\r\n\t}\r\n\r\n\tupdateFrom( hdr ) {\r\n\r\n\t\t// https://github.com/knightcrawler25/GLSL-PathTracer/blob/3c6fd9b6b3da47cd50c527eeb45845eef06c55c3/src/loaders/hdrloader.cpp\r\n\t\t// https://pbr-book.org/3ed-2018/Light_Transport_I_Surface_Reflection/Sampling_Light_Sources#InfiniteAreaLights\r\n\t\tconst map = preprocessEnvMap( hdr );\r\n\t\tmap.wrapS = RepeatWrapping;\r\n\t\tmap.wrapT = ClampToEdgeWrapping;\r\n\r\n\t\tconst { width, height, data } = map.image;\r\n\r\n\t\t// \"conditional\" = \"pixel relative to row pixels sum\"\r\n\t\t// \"marginal\" = \"row relative to row sum\"\r\n\r\n\t\t// track the importance of any given pixel in the image by tracking its weight relative to other pixels in the image\r\n\t\tconst pdfConditional = new Float32Array( width * height );\r\n\t\tconst cdfConditional = new Float32Array( width * height );\r\n\r\n\t\tconst pdfMarginal = new Float32Array( height );\r\n\t\tconst cdfMarginal = new Float32Array( height );\r\n\r\n\t\tlet totalSumValue = 0.0;\r\n\t\tlet cumulativeWeightMarginal = 0.0;\r\n\t\tfor ( let y = 0; y < height; y ++ ) {\r\n\r\n\t\t\tlet cumulativeRowWeight = 0.0;\r\n\t\t\tfor ( let x = 0; x < width; x ++ ) {\r\n\r\n\t\t\t\tconst i = y * width + x;\r\n\t\t\t\tconst r = DataUtils.fromHalfFloat( data[ 4 * i + 0 ] );\r\n\t\t\t\tconst g = DataUtils.fromHalfFloat( data[ 4 * i + 1 ] );\r\n\t\t\t\tconst b = DataUtils.fromHalfFloat( data[ 4 * i + 2 ] );\r\n\r\n\t\t\t\t// the probability of the pixel being selected in this row is the\r\n\t\t\t\t// scale of the luminance relative to the rest of the pixels.\r\n\t\t\t\t// TODO: this should also account for the solid angle of the pixel when sampling\r\n\t\t\t\tconst weight = colorToLuminance( r, g, b );\r\n\t\t\t\tcumulativeRowWeight += weight;\r\n\t\t\t\ttotalSumValue += weight;\r\n\r\n\t\t\t\tpdfConditional[ i ] = weight;\r\n\t\t\t\tcdfConditional[ i ] = cumulativeRowWeight;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// can happen if the row is all black\r\n\t\t\tif ( cumulativeRowWeight !== 0 ) {\r\n\r\n\t\t\t\t// scale the pdf and cdf to [0.0, 1.0]\r\n\t\t\t\tfor ( let i = y * width, l = y * width + width; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tpdfConditional[ i ] /= cumulativeRowWeight;\r\n\t\t\t\t\tcdfConditional[ i ] /= cumulativeRowWeight;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcumulativeWeightMarginal += cumulativeRowWeight;\r\n\r\n\t\t\t// compute the marginal pdf and cdf along the height of the map.\r\n\t\t\tpdfMarginal[ y ] = cumulativeRowWeight;\r\n\t\t\tcdfMarginal[ y ] = cumulativeWeightMarginal;\r\n\r\n\t\t}\r\n\r\n\t\t// can happen if the texture is all black\r\n\t\tif ( cumulativeWeightMarginal !== 0 ) {\r\n\r\n\t\t\t// scale the marginal pdf and cdf to [0.0, 1.0]\r\n\t\t\tfor ( let i = 0, l = pdfMarginal.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tpdfMarginal[ i ] /= cumulativeWeightMarginal;\r\n\t\t\t\tcdfMarginal[ i ] /= cumulativeWeightMarginal;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// compute a sorted index of distributions and the probabilities along them for both\r\n\t\t// the marginal and conditional data. These will be used to sample with a random number\r\n\t\t// to retrieve a uv value to sample in the environment map.\r\n\t\t// These values continually increase so it's okay to interpolate between them.\r\n\t\tconst marginalDataArray = new Uint16Array( height );\r\n\t\tconst conditionalDataArray = new Uint16Array( width * height );\r\n\r\n\t\t// we add a half texel offset so we're sampling the center of the pixel\r\n\t\tfor ( let i = 0; i < height; i ++ ) {\r\n\r\n\t\t\tconst dist = ( i + 1 ) / height;\r\n\t\t\tconst row = binarySearchFindClosestIndexOf( cdfMarginal, dist );\r\n\r\n\t\t\tmarginalDataArray[ i ] = DataUtils.toHalfFloat( ( row + 0.5 ) / height );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let y = 0; y < height; y ++ ) {\r\n\r\n\t\t\tfor ( let x = 0; x < width; x ++ ) {\r\n\r\n\t\t\t\tconst i = y * width + x;\r\n\t\t\t\tconst dist = ( x + 1 ) / width;\r\n\t\t\t\tconst col = binarySearchFindClosestIndexOf( cdfConditional, dist, y * width, width );\r\n\r\n\t\t\t\tconditionalDataArray[ i ] = DataUtils.toHalfFloat( ( col + 0.5 ) / width );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.dispose();\r\n\r\n\t\tconst { marginalWeights, conditionalWeights } = this;\r\n\t\tmarginalWeights.image = { width: height, height: 1, data: marginalDataArray };\r\n\t\tmarginalWeights.needsUpdate = true;\r\n\r\n\t\tconditionalWeights.image = { width, height, data: conditionalDataArray };\r\n\t\tconditionalWeights.needsUpdate = true;\r\n\r\n\t\tthis.totalSum = totalSumValue;\r\n\t\tthis.map = map;\r\n\r\n\t}\r\n\r\n}\r\n","import { DataTexture, RGBAFormat, ClampToEdgeWrapping, FloatType, Vector3, Quaternion, Matrix4, NearestFilter } from 'three';\r\nimport { bufferToHash } from '../utils/bufferToHash.js';\r\n\r\nconst LIGHT_PIXELS = 6;\r\nconst RECT_AREA_LIGHT = 0;\r\nconst CIRC_AREA_LIGHT = 1;\r\nconst SPOT_LIGHT = 2;\r\nconst DIR_LIGHT = 3;\r\nconst POINT_LIGHT = 4;\r\n\r\nconst u = new Vector3();\r\nconst v = new Vector3();\r\nconst m = new Matrix4();\r\nconst worldQuaternion = new Quaternion();\r\nconst eye = new Vector3();\r\nconst target = new Vector3();\r\nconst up = new Vector3( 0, 1, 0 );\r\nexport class LightsInfoUniformStruct {\r\n\r\n\tconstructor() {\r\n\r\n\t\tconst tex = new DataTexture( new Float32Array( 4 ), 1, 1 );\r\n\t\ttex.format = RGBAFormat;\r\n\t\ttex.type = FloatType;\r\n\t\ttex.wrapS = ClampToEdgeWrapping;\r\n\t\ttex.wrapT = ClampToEdgeWrapping;\r\n\t\ttex.generateMipmaps = false;\r\n\t\ttex.minFilter = NearestFilter;\r\n\t\ttex.magFilter = NearestFilter;\r\n\r\n\t\tthis.tex = tex;\r\n\t\tthis.count = 0;\r\n\r\n\t}\r\n\r\n\tupdateFrom( lights, iesTextures = [] ) {\r\n\r\n\t\tconst tex = this.tex;\r\n\t\tconst pixelCount = Math.max( lights.length * LIGHT_PIXELS, 1 );\r\n\t\tconst dimension = Math.ceil( Math.sqrt( pixelCount ) );\r\n\r\n\t\tif ( tex.image.width !== dimension ) {\r\n\r\n\t\t\ttex.dispose();\r\n\r\n\t\t\ttex.image.data = new Float32Array( dimension * dimension * 4 );\r\n\t\t\ttex.image.width = dimension;\r\n\t\t\ttex.image.height = dimension;\r\n\r\n\t\t}\r\n\r\n\t\tconst floatArray = tex.image.data;\r\n\r\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst l = lights[ i ];\r\n\r\n\t\t\tconst baseIndex = i * LIGHT_PIXELS * 4;\r\n\t\t\tlet index = 0;\r\n\r\n\t\t\t// initialize to 0\r\n\t\t\tfor ( let p = 0; p < LIGHT_PIXELS * 4; p ++ ) {\r\n\r\n\t\t\t\tfloatArray[ baseIndex + p ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// sample 1\r\n\t\t    // position\r\n\t\t\tl.getWorldPosition( v );\r\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.x;\r\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.y;\r\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.z;\r\n\r\n\t\t\t// type\r\n\t\t\tlet type = RECT_AREA_LIGHT;\r\n\t\t\tif ( l.isRectAreaLight && l.isCircular ) {\r\n\r\n\t\t\t\ttype = CIRC_AREA_LIGHT;\r\n\r\n\t\t\t} else if ( l.isSpotLight ) {\r\n\r\n\t\t\t\ttype = SPOT_LIGHT;\r\n\r\n\t\t\t} else if ( l.isDirectionalLight ) {\r\n\r\n\t\t\t\ttype = DIR_LIGHT;\r\n\r\n\t\t\t} else if ( l.isPointLight ) {\r\n\r\n\t\t\t\ttype = POINT_LIGHT;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = type;\r\n\r\n\t\t\t// sample 2\r\n\t\t\t// color\r\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.color.r;\r\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.color.g;\r\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.color.b;\r\n\r\n\t\t\t// intensity\r\n\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.intensity;\r\n\r\n\t\t\tl.getWorldQuaternion( worldQuaternion );\r\n\r\n\t\t\tif ( l.isRectAreaLight ) {\r\n\r\n\t\t\t\t// sample 3\r\n\t\t\t\t// u vector\r\n\t\t\t\tu.set( l.width, 0, 0 ).applyQuaternion( worldQuaternion );\r\n\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.x;\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.y;\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.z;\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t\t// sample 4\r\n\t\t\t\t// v vector\r\n\t\t\t\tv.set( 0, l.height, 0 ).applyQuaternion( worldQuaternion );\r\n\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.x;\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.y;\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.z;\r\n\r\n\t\t\t\t// area\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.cross( v ).length() * ( l.isCircular ? ( Math.PI / 4.0 ) : 1.0 );\r\n\r\n\t\t\t} else if ( l.isSpotLight ) {\r\n\r\n\t\t\t\tconst radius = l.radius || 0;\r\n\t\t\t\teye.setFromMatrixPosition( l.matrixWorld );\r\n\t\t\t\ttarget.setFromMatrixPosition( l.target.matrixWorld );\r\n\t\t\t\tm.lookAt( eye, target, up );\r\n\t\t\t\tworldQuaternion.setFromRotationMatrix( m );\r\n\r\n\t\t\t\t// sample 3\r\n\t\t\t\t// u vector\r\n\t\t\t\tu.set( 1, 0, 0 ).applyQuaternion( worldQuaternion );\r\n\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.x;\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.y;\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = u.z;\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t\t// sample 4\r\n\t\t\t\t// v vector\r\n\t\t\t\tv.set( 0, 1, 0 ).applyQuaternion( worldQuaternion );\r\n\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.x;\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.y;\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = v.z;\r\n\r\n\t\t\t\t// area\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = Math.PI * radius * radius;\r\n\r\n\t\t\t\t// sample 5\r\n\t\t\t\t// radius\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = radius;\r\n\r\n\t\t\t\t// decay\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.decay;\r\n\r\n\t\t\t\t// distance\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.distance;\r\n\r\n\t\t\t\t// coneCos\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = Math.cos( l.angle );\r\n\r\n\t\t\t\t// sample 6\r\n\t\t\t\t// penumbraCos\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = Math.cos( l.angle * ( 1 - l.penumbra ) );\r\n\r\n\t\t\t\t// iesProfile\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.iesMap ? iesTextures.indexOf( l.iesMap ) : - 1;\r\n\r\n\t\t\t} else if ( l.isPointLight ) {\r\n\r\n\t\t\t\tconst worldPosition = u.setFromMatrixPosition( l.matrixWorld );\r\n\r\n\t\t\t\t// sample 3\r\n\t\t\t\t// u vector\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = worldPosition.x;\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = worldPosition.y;\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = worldPosition.z;\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t\t// sample 4\r\n\t\t\t\tindex += 4;\r\n\r\n\t\t\t\t// sample 5\r\n\t\t\t\tindex += 1;\r\n\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.decay;\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = l.distance;\r\n\r\n\t\t\t} else if ( l.isDirectionalLight ) {\r\n\r\n\t\t\t\tconst worldPosition = u.setFromMatrixPosition( l.matrixWorld );\r\n\t\t\t\tconst targetPosition = v.setFromMatrixPosition( l.target.matrixWorld );\r\n\t\t\t\ttarget.subVectors( worldPosition, targetPosition ).normalize();\r\n\r\n\t\t\t\t// sample 3\r\n\t\t\t\t// u vector\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = target.x;\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = target.y;\r\n\t\t\t\tfloatArray[ baseIndex + ( index ++ ) ] = target.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.count = lights.length;\r\n\r\n\t\tconst hash = bufferToHash( floatArray.buffer );\r\n\t\tif ( this.hash !== hash ) {\r\n\r\n\t\t\tthis.hash = hash;\r\n\t\t\ttex.needsUpdate = true;\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n}\r\n","import { DataArrayTexture, FloatType, RGBAFormat } from 'three';\r\nimport { FloatVertexAttributeTexture } from 'three-mesh-bvh';\r\n\r\nfunction copyArrayToArray( fromArray, fromStride, toArray, toStride, offset ) {\r\n\r\n\tif ( fromStride > toStride ) {\r\n\r\n\t\tthrow new Error();\r\n\r\n\t}\r\n\r\n\t// scale non-float values to their normalized range\r\n\tconst count = fromArray.length / fromStride;\r\n\tconst bpe = fromArray.constructor.BYTES_PER_ELEMENT * 8;\r\n\tlet maxValue = 1.0;\r\n\tswitch ( fromArray.constructor ) {\r\n\r\n\tcase Uint8Array:\r\n\tcase Uint16Array:\r\n\tcase Uint32Array:\r\n\t\tmaxValue = 2 ** bpe - 1;\r\n\t\tbreak;\r\n\r\n\tcase Int8Array:\r\n\tcase Int16Array:\r\n\tcase Int32Array:\r\n\t\tmaxValue = 2 ** ( bpe - 1 ) - 1;\r\n\t\tbreak;\r\n\r\n\t}\r\n\r\n\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\tconst i4 = 4 * i;\r\n\t\tconst is = fromStride * i;\r\n\t\tfor ( let j = 0; j < toStride; j ++ ) {\r\n\r\n\t\t\ttoArray[ offset + i4 + j ] = fromStride >= j + 1 ? fromArray[ is + j ] / maxValue : 0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport class FloatAttributeTextureArray extends DataArrayTexture {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\t\tthis._textures = [];\r\n\t\tthis.type = FloatType;\r\n\t\tthis.format = RGBAFormat;\r\n\t\tthis.internalFormat = 'RGBA32F';\r\n\r\n\t}\r\n\r\n\tupdateAttribute( index, attr ) {\r\n\r\n\t\t// update the texture\r\n\t\tconst tex = this._textures[ index ];\r\n\t\ttex.updateFrom( attr );\r\n\r\n\t\t// ensure compatibility\r\n\t\tconst baseImage = tex.image;\r\n\t\tconst image = this.image;\r\n\t\tif ( baseImage.width !== image.width || baseImage.height !== image.height ) {\r\n\r\n\t\t\tthrow new Error( 'FloatAttributeTextureArray: Attribute must be the same dimensions when updating single layer.' );\r\n\r\n\t\t}\r\n\r\n\t\t// update the image\r\n\t\tconst { width, height, data } = image;\r\n\t\tconst length = width * height * 4;\r\n\t\tconst offset = length * index;\r\n\t\tlet itemSize = attr.itemSize;\r\n\t\tif ( itemSize === 3 ) {\r\n\r\n\t\t\titemSize = 4;\r\n\r\n\t\t}\r\n\r\n\t\t// copy the data\r\n\t\tcopyArrayToArray( tex.image.data, itemSize, data, 4, offset );\r\n\r\n\t\tthis.dispose();\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tsetAttributes( attrs ) {\r\n\r\n\t\t// ensure the attribute count\r\n\t\tconst itemCount = attrs[ 0 ].count;\r\n\t\tconst attrsLength = attrs.length;\r\n\t\tfor ( let i = 0, l = attrsLength; i < l; i ++ ) {\r\n\r\n\t\t\tif ( attrs[ i ].count !== itemCount ) {\r\n\r\n\t\t\t\tthrow new Error( 'FloatAttributeTextureArray: All attributes must have the same item count.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// initialize all textures\r\n\t\tconst textures = this._textures;\r\n\t\twhile ( textures.length < attrsLength ) {\r\n\r\n\t\t\tconst tex = new FloatVertexAttributeTexture();\r\n\t\t\ttextures.push( tex );\r\n\r\n\t\t}\r\n\r\n\t\twhile ( textures.length > attrsLength ) {\r\n\r\n\t\t\ttextures.pop();\r\n\r\n\t\t}\r\n\r\n\t\t// update all textures\r\n\t\tfor ( let i = 0, l = attrsLength; i < l; i ++ ) {\r\n\r\n\t\t\ttextures[ i ].updateFrom( attrs[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\t// determine if we need to create a new array\r\n\t\tconst baseTexture = textures[ 0 ];\r\n\t\tconst baseImage = baseTexture.image;\r\n\t\tconst image = this.image;\r\n\r\n\t\tif ( baseImage.width !== image.width || baseImage.height !== image.height || baseImage.depth !== attrsLength ) {\r\n\r\n\t\t\timage.width = baseImage.width;\r\n\t\t\timage.height = baseImage.height;\r\n\t\t\timage.depth = attrsLength;\r\n\t\t\timage.data = new Float32Array( image.width * image.height * image.depth * 4 );\r\n\r\n\t\t}\r\n\r\n\t\t// copy the other texture data into the data array texture\r\n\t\tconst { data, width, height } = image;\r\n\t\tfor ( let i = 0, l = attrsLength; i < l; i ++ ) {\r\n\r\n\t\t\tconst tex = textures[ i ];\r\n\t\t\tconst length = width * height * 4;\r\n\t\t\tconst offset = length * i;\r\n\r\n\t\t\tlet itemSize = attrs[ i ].itemSize;\r\n\t\t\tif ( itemSize === 3 ) {\r\n\r\n\t\t\t\titemSize = 4;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcopyArrayToArray( tex.image.data, itemSize, data, 4, offset );\r\n\r\n\t\t}\r\n\r\n\t\t// reset the texture\r\n\t\tthis.dispose();\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\r\n}\r\n","import { FloatAttributeTextureArray } from './FloatAttributeTextureArray.js';\r\n\r\nexport class AttributesTextureArray extends FloatAttributeTextureArray {\r\n\r\n\tupdateNormalAttribute( attr ) {\r\n\r\n\t\tthis.updateAttribute( 0, attr );\r\n\r\n\t}\r\n\r\n\tupdateTangentAttribute( attr ) {\r\n\r\n\t\tthis.updateAttribute( 1, attr );\r\n\r\n\t}\r\n\r\n\tupdateUvAttribute( attr ) {\r\n\r\n\t\tthis.updateAttribute( 2, attr );\r\n\r\n\t}\r\n\r\n\tupdateColorAttribute( attr ) {\r\n\r\n\t\tthis.updateAttribute( 3, attr );\r\n\r\n\t}\r\n\r\n\tupdateFrom( normal, tangent, uv, color ) {\r\n\r\n\t\tthis.setAttributes( [ normal, tangent, uv, color ] );\r\n\r\n\t}\r\n\r\n}\r\n","function uuidSort( a, b ) {\r\n\r\n\tif ( a.uuid < b.uuid ) return 1;\r\n\tif ( a.uuid > b.uuid ) return - 1;\r\n\treturn 0;\r\n\r\n}\r\n\r\n// we must hash the texture to determine uniqueness using the encoding, as well, because the\r\n// when rendering each texture to the texture array they must have a consistent color space.\r\nexport function getTextureHash( t ) {\r\n\r\n\treturn `${ t.source.uuid }:${ t.colorSpace }`;\r\n\r\n}\r\n\r\n// reduce the set of textures to just those with a unique source while retaining\r\n// the order of the textures.\r\nfunction reduceTexturesToUniqueSources( textures ) {\r\n\r\n\tconst sourceSet = new Set();\r\n\tconst result = [];\r\n\tfor ( let i = 0, l = textures.length; i < l; i ++ ) {\r\n\r\n\t\tconst tex = textures[ i ];\r\n\t\tconst hash = getTextureHash( tex );\r\n\t\tif ( ! sourceSet.has( hash ) ) {\r\n\r\n\t\t\tsourceSet.add( hash );\r\n\t\t\tresult.push( tex );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nexport function getIesTextures( lights ) {\r\n\r\n\tconst textures = lights.map( l => l.iesMap || null ).filter( t => t );\r\n\tconst textureSet = new Set( textures );\r\n\treturn Array.from( textureSet ).sort( uuidSort );\r\n\r\n}\r\n\r\nexport function getTextures( materials ) {\r\n\r\n\tconst textureSet = new Set();\r\n\tfor ( let i = 0, l = materials.length; i < l; i ++ ) {\r\n\r\n\t\tconst material = materials[ i ];\r\n\t\tfor ( const key in material ) {\r\n\r\n\t\t\tconst value = material[ key ];\r\n\t\t\tif ( value && value.isTexture ) {\r\n\r\n\t\t\t\ttextureSet.add( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst textureArray = Array.from( textureSet );\r\n\treturn reduceTexturesToUniqueSources( textureArray ).sort( uuidSort );\r\n\r\n}\r\n\r\nexport function getLights( scene ) {\r\n\r\n\tconst lights = [];\r\n\tscene.traverse( c => {\r\n\r\n\t\tif ( c.visible ) {\r\n\r\n\t\t\tif (\r\n\t\t\t\tc.isRectAreaLight ||\r\n\t\t\t\tc.isSpotLight ||\r\n\t\t\t\tc.isPointLight ||\r\n\t\t\t\tc.isDirectionalLight\r\n\t\t\t) {\r\n\r\n\t\t\t\tlights.push( c );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn lights.sort( uuidSort );\r\n\r\n}\r\n","import { DataTexture, RGBAFormat, ClampToEdgeWrapping, FloatType, FrontSide, BackSide, DoubleSide, NearestFilter } from 'three';\r\nimport { getTextureHash } from '../core/utils/sceneUpdateUtils.js';\r\nimport { bufferToHash } from '../utils/bufferToHash.js';\r\n\r\nconst MATERIAL_PIXELS = 45;\r\nconst MATERIAL_STRIDE = MATERIAL_PIXELS * 4;\r\n\r\nclass MaterialFeatures {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis._features = {};\r\n\r\n\t}\r\n\r\n\tisUsed( feature ) {\r\n\r\n\t\treturn feature in this._features;\r\n\r\n\t}\r\n\r\n\tsetUsed( feature, used = true ) {\r\n\r\n\t\tif ( used === false ) {\r\n\r\n\t\t\tdelete this._features[ feature ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._features[ feature ] = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tthis._features = {};\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport class MaterialsTexture extends DataTexture {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( new Float32Array( 4 ), 1, 1 );\r\n\r\n\t\tthis.format = RGBAFormat;\r\n\t\tthis.type = FloatType;\r\n\t\tthis.wrapS = ClampToEdgeWrapping;\r\n\t\tthis.wrapT = ClampToEdgeWrapping;\r\n\t\tthis.minFilter = NearestFilter;\r\n\t\tthis.magFilter = NearestFilter;\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.features = new MaterialFeatures();\r\n\r\n\t}\r\n\r\n\tupdateFrom( materials, textures ) {\r\n\r\n\t\tfunction getTexture( material, key, def = - 1 ) {\r\n\r\n\t\t\tif ( key in material && material[ key ] ) {\r\n\r\n\t\t\t\tconst hash = getTextureHash( material[ key ] );\r\n\t\t\t\treturn textureLookUp[ hash ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn def;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction getField( material, key, def ) {\r\n\r\n\t\t\treturn key in material ? material[ key ] : def;\r\n\r\n\t\t}\r\n\r\n\t\tfunction writeTextureMatrixToArray( material, textureKey, array, offset ) {\r\n\r\n\t\t\tconst texture = material[ textureKey ] && material[ textureKey ].isTexture ? material[ textureKey ] : null;\r\n\r\n\t\t\t// check if texture exists\r\n\t\t\tif ( texture ) {\r\n\r\n\t\t\t\tif ( texture.matrixAutoUpdate ) {\r\n\r\n\t\t\t\t\ttexture.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst elements = texture.matrix.elements;\r\n\r\n\t\t\t\tlet i = 0;\r\n\r\n\t\t\t\t// first row\r\n\t\t\t\tarray[ offset + i ++ ] = elements[ 0 ];\r\n\t\t\t\tarray[ offset + i ++ ] = elements[ 3 ];\r\n\t\t\t\tarray[ offset + i ++ ] = elements[ 6 ];\r\n\t\t\t\ti ++;\r\n\r\n\t\t\t\t// second row\r\n\t\t\t\tarray[ offset + i ++ ] = elements[ 1 ];\r\n\t\t\t\tarray[ offset + i ++ ] = elements[ 4 ];\r\n\t\t\t\tarray[ offset + i ++ ] = elements[ 7 ];\r\n\t\t\t\ti ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 8;\r\n\r\n\t\t}\r\n\r\n\t\tlet index = 0;\r\n\t\tconst pixelCount = materials.length * MATERIAL_PIXELS;\r\n\t\tconst dimension = Math.ceil( Math.sqrt( pixelCount ) ) || 1;\r\n\t\tconst { image, features } = this;\r\n\r\n\t\t// index the list of textures based on shareable source\r\n\t\tconst textureLookUp = {};\r\n\t\tfor ( let i = 0, l = textures.length; i < l; i ++ ) {\r\n\r\n\t\t\ttextureLookUp[ getTextureHash( textures[ i ] ) ] = i;\r\n\r\n\t\t}\r\n\r\n\t\tif ( image.width !== dimension ) {\r\n\r\n\t\t\tthis.dispose();\r\n\r\n\t\t\timage.data = new Float32Array( dimension * dimension * 4 );\r\n\t\t\timage.width = dimension;\r\n\t\t\timage.height = dimension;\r\n\r\n\t\t}\r\n\r\n\t\tconst floatArray = image.data;\r\n\r\n\t\t// on some devices (Google Pixel 6) the \"floatBitsToInt\" function does not work correctly so we\r\n\t\t// can't encode texture ids that way.\r\n\t\t// const intArray = new Int32Array( floatArray.buffer );\r\n\r\n\t\tfeatures.reset();\r\n\t\tfor ( let i = 0, l = materials.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst m = materials[ i ];\r\n\r\n\t\t\tif ( m.isFogVolumeMaterial ) {\r\n\r\n\t\t\t\tfeatures.setUsed( 'FOG' );\r\n\r\n\t\t\t\tfor ( let j = 0; j < MATERIAL_STRIDE; j ++ ) {\r\n\r\n\t\t\t\t\tfloatArray[ index + j ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// sample 0 .rgb\r\n\t\t\t\tfloatArray[ index + 0 * 4 + 0 ] = m.color.r;\r\n\t\t\t\tfloatArray[ index + 0 * 4 + 1 ] = m.color.g;\r\n\t\t\t\tfloatArray[ index + 0 * 4 + 2 ] = m.color.b;\r\n\r\n\t\t\t\t// sample 2 .a\r\n\t\t\t\tfloatArray[ index + 2 * 4 + 3 ] = getField( m, 'emissiveIntensity', 0.0 );\r\n\r\n\t\t\t\t// sample 3 .rgb\r\n\t\t\t\tfloatArray[ index + 3 * 4 + 0 ] = m.emissive.r;\r\n\t\t\t\tfloatArray[ index + 3 * 4 + 1 ] = m.emissive.g;\r\n\t\t\t\tfloatArray[ index + 3 * 4 + 2 ] = m.emissive.b;\r\n\r\n\t\t\t\t// sample 13 .g\r\n\t\t\t\t// reusing opacity field\r\n\t\t\t\tfloatArray[ index + 13 * 4 + 1 ] = m.density;\r\n\r\n\t\t\t\t// side\r\n\t\t\t\tfloatArray[ index + 13 * 4 + 3 ] = 0.0;\r\n\r\n\t\t\t\t// sample 14 .b\r\n\t\t\t\tfloatArray[ index + 14 * 4 + 2 ] = 1 << 2;\r\n\r\n\t\t\t\tindex += MATERIAL_STRIDE;\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// sample 0\r\n\t\t\t// color\r\n\t\t\tfloatArray[ index ++ ] = m.color.r;\r\n\t\t\tfloatArray[ index ++ ] = m.color.g;\r\n\t\t\tfloatArray[ index ++ ] = m.color.b;\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'map' );\r\n\r\n\t\t\t// sample 1\r\n\t\t\t// metalness & roughness\r\n\t\t\tfloatArray[ index ++ ] = getField( m, 'metalness', 0.0 );\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'metalnessMap' );\r\n\t\t\tfloatArray[ index ++ ] = getField( m, 'roughness', 0.0 );\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'roughnessMap' );\r\n\r\n\t\t\t// sample 2\r\n\t\t\t// transmission & emissiveIntensity\r\n\t\t\t// three.js assumes a default f0 of 0.04 if no ior is provided which equates to an ior of 1.5\r\n\t\t\tfloatArray[ index ++ ] = getField( m, 'ior', 1.5 );\r\n\t\t\tfloatArray[ index ++ ] = getField( m, 'transmission', 0.0 );\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'transmissionMap' );\r\n\t\t\tfloatArray[ index ++ ] = getField( m, 'emissiveIntensity', 0.0 );\r\n\r\n\t\t\t// sample 3\r\n\t\t\t// emission\r\n\t\t\tif ( 'emissive' in m ) {\r\n\r\n\t\t\t\tfloatArray[ index ++ ] = m.emissive.r;\r\n\t\t\t\tfloatArray[ index ++ ] = m.emissive.g;\r\n\t\t\t\tfloatArray[ index ++ ] = m.emissive.b;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\r\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\r\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'emissiveMap' );\r\n\r\n\t\t\t// sample 4\r\n\t\t\t// normals\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'normalMap' );\r\n\t\t\tif ( 'normalScale' in m ) {\r\n\r\n\t\t\t\tfloatArray[ index ++ ] = m.normalScale.x;\r\n\t\t\t\tfloatArray[ index ++ ] = m.normalScale.y;\r\n\r\n \t\t\t} else {\r\n\r\n \t\t\t\tfloatArray[ index ++ ] = 1;\r\n \t\t\t\tfloatArray[ index ++ ] = 1;\r\n\r\n \t\t\t}\r\n\r\n\t\t\t// clearcoat\r\n\t\t\tfloatArray[ index ++ ] = getField( m, 'clearcoat', 0.0 );\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'clearcoatMap' ); // sample 5\r\n\r\n\t\t\tfloatArray[ index ++ ] = getField( m, 'clearcoatRoughness', 0.0 );\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'clearcoatRoughnessMap' );\r\n\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'clearcoatNormalMap' );\r\n\r\n\t\t\t// sample 6\r\n\t\t\tif ( 'clearcoatNormalScale' in m ) {\r\n\r\n\t\t\t\tfloatArray[ index ++ ] = m.clearcoatNormalScale.x;\r\n\t\t\t\tfloatArray[ index ++ ] = m.clearcoatNormalScale.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfloatArray[ index ++ ] = 1;\r\n\t\t\t\tfloatArray[ index ++ ] = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tindex ++;\r\n\t\t\tfloatArray[ index ++ ] = getField( m, 'sheen', 0.0 );\r\n\r\n\t\t\t// sample 7\r\n\t\t\t// sheen\r\n\t\t\tif ( 'sheenColor' in m ) {\r\n\r\n\t\t\t\tfloatArray[ index ++ ] = m.sheenColor.r;\r\n\t\t\t\tfloatArray[ index ++ ] = m.sheenColor.g;\r\n\t\t\t\tfloatArray[ index ++ ] = m.sheenColor.b;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\r\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\r\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'sheenColorMap' );\r\n\r\n\t\t\t// sample 8\r\n\t\t\tfloatArray[ index ++ ] = getField( m, 'sheenRoughness', 0.0 );\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'sheenRoughnessMap' );\r\n\r\n\t\t\t// iridescence\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'iridescenceMap' );\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'iridescenceThicknessMap' );\r\n\r\n\t\t\t// sample 9\r\n\t\t\tfloatArray[ index ++ ] = getField( m, 'iridescence', 0.0 );\r\n\t\t\tfloatArray[ index ++ ] = getField( m, 'iridescenceIOR', 1.3 );\r\n\r\n\t\t\tconst iridescenceThicknessRange = getField( m, 'iridescenceThicknessRange', [ 100, 400 ] );\r\n\t\t\tfloatArray[ index ++ ] = iridescenceThicknessRange[ 0 ];\r\n\t\t\tfloatArray[ index ++ ] = iridescenceThicknessRange[ 1 ];\r\n\r\n\t\t\t// sample 10\r\n\t\t\t// specular color\r\n\t\t\tif ( 'specularColor' in m ) {\r\n\r\n\t\t\t\tfloatArray[ index ++ ] = m.specularColor.r;\r\n\t\t\t\tfloatArray[ index ++ ] = m.specularColor.g;\r\n\t\t\t\tfloatArray[ index ++ ] = m.specularColor.b;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\r\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\r\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'specularColorMap' );\r\n\r\n\t\t\t// sample 11\r\n\t\t\t// specular intensity\r\n\t\t\tfloatArray[ index ++ ] = getField( m, 'specularIntensity', 1.0 );\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'specularIntensityMap' );\r\n\r\n\t\t\t// isThinFilm\r\n\t\t\tconst isThinFilm = getField( m, 'thickness', 0.0 ) === 0.0 && getField( m, 'attenuationDistance', Infinity ) === Infinity;\r\n\t\t\tfloatArray[ index ++ ] = Number( isThinFilm );\r\n\t\t\tindex ++;\r\n\r\n\t\t\t// sample 12\r\n\t\t\tif ( 'attenuationColor' in m ) {\r\n\r\n\t\t\t\tfloatArray[ index ++ ] = m.attenuationColor.r;\r\n\t\t\t\tfloatArray[ index ++ ] = m.attenuationColor.g;\r\n\t\t\t\tfloatArray[ index ++ ] = m.attenuationColor.b;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\r\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\r\n\t\t\t\tfloatArray[ index ++ ] = 1.0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfloatArray[ index ++ ] = getField( m, 'attenuationDistance', Infinity );\r\n\r\n\t\t\t// sample 13\r\n\t\t\t// alphaMap\r\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'alphaMap' );\r\n\r\n\t\t\t// side & matte\r\n\t\t\tfloatArray[ index ++ ] = m.opacity;\r\n\t\t\tfloatArray[ index ++ ] = m.alphaTest;\r\n\t\t\tif ( ! isThinFilm && m.transmission > 0.0 ) {\r\n\r\n\t\t\t\tfloatArray[ index ++ ] = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tswitch ( m.side ) {\r\n\r\n\t\t\t\tcase FrontSide:\r\n\t\t\t\t\tfloatArray[ index ++ ] = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase BackSide:\r\n\t\t\t\t\tfloatArray[ index ++ ] = - 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase DoubleSide:\r\n\t\t\t\t\tfloatArray[ index ++ ] = 0;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// sample 14\r\n\t\t\tfloatArray[ index ++ ] = Number( getField( m, 'matte', false ) ); // matte\r\n\t\t\tfloatArray[ index ++ ] = Number( getField( m, 'castShadow', true ) ); // shadow\r\n\t\t\tfloatArray[ index ++ ] = Number( m.vertexColors ) | ( Number( m.flatShading ) << 1 ); // vertexColors & flatShading\r\n\t\t\tfloatArray[ index ++ ] = Number( m.transparent ); // transparent\r\n\r\n\t\t\t// map transform 15\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'map', floatArray, index );\r\n\r\n\t\t\t// metalnessMap transform 17\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'metalnessMap', floatArray, index );\r\n\r\n\t\t\t// roughnessMap transform 19\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'roughnessMap', floatArray, index );\r\n\r\n\t\t\t// transmissionMap transform 21\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'transmissionMap', floatArray, index );\r\n\r\n\t\t\t// emissiveMap transform 22\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'emissiveMap', floatArray, index );\r\n\r\n\t\t\t// normalMap transform 25\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'normalMap', floatArray, index );\r\n\r\n\t\t\t// clearcoatMap transform 27\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'clearcoatMap', floatArray, index );\r\n\r\n\t\t\t// clearcoatNormalMap transform 29\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'clearcoatNormalMap', floatArray, index );\r\n\r\n\t\t\t// clearcoatRoughnessMap transform 31\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'clearcoatRoughnessMap', floatArray, index );\r\n\r\n\t\t\t// sheenColorMap transform 33\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'sheenColorMap', floatArray, index );\r\n\r\n\t\t\t// sheenRoughnessMap transform 35\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'sheenRoughnessMap', floatArray, index );\r\n\r\n\t\t\t// iridescenceMap transform 37\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'iridescenceMap', floatArray, index );\r\n\r\n\t\t\t// iridescenceThicknessMap transform 39\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'iridescenceThicknessMap', floatArray, index );\r\n\r\n\t\t\t// specularColorMap transform 41\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'specularColorMap', floatArray, index );\r\n\r\n\t\t\t// specularIntensityMap transform 43\r\n\t\t\tindex += writeTextureMatrixToArray( m, 'specularIntensityMap', floatArray, index );\r\n\r\n\t\t}\r\n\r\n\t\t// check if the contents have changed\r\n\t\tconst hash = bufferToHash( floatArray.buffer );\r\n\t\tif ( this.hash !== hash ) {\r\n\r\n\t\t\tthis.hash = hash;\r\n\t\t\tthis.needsUpdate = true;\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n}\r\n","import {\r\n\tWebGLArrayRenderTarget,\r\n\tRGBAFormat,\r\n\tUnsignedByteType,\r\n\tColor,\r\n\tRepeatWrapping,\r\n\tLinearFilter,\r\n\tNoToneMapping,\r\n\tShaderMaterial,\r\n} from 'three';\r\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\r\n\r\nconst prevColor = new Color();\r\nfunction getTextureHash( texture ) {\r\n\r\n\treturn texture ? `${ texture.uuid }:${ texture.version }` : null;\r\n\r\n}\r\n\r\nfunction assignOptions( target, options ) {\r\n\r\n\tfor ( const key in options ) {\r\n\r\n\t\tif ( key in target ) {\r\n\r\n\t\t\ttarget[ key ] = options[ key ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport class RenderTarget2DArray extends WebGLArrayRenderTarget {\r\n\r\n\tconstructor( width, height, options ) {\r\n\r\n\t\tconst textureOptions = {\r\n\t\t\tformat: RGBAFormat,\r\n\t\t\ttype: UnsignedByteType,\r\n\t\t\tminFilter: LinearFilter,\r\n\t\t\tmagFilter: LinearFilter,\r\n\t\t\twrapS: RepeatWrapping,\r\n\t\t\twrapT: RepeatWrapping,\r\n\t\t\tgenerateMipmaps: false,\r\n\t\t\t...options,\r\n\t\t};\r\n\r\n\t\tsuper( width, height, 1, textureOptions );\r\n\r\n\t\t// manually assign the options because passing options into the\r\n\t\t// constructor does not work\r\n\t\tassignOptions( this.texture, textureOptions );\r\n\r\n\t\tthis.texture.setTextures = ( ...args ) => {\r\n\r\n\t\t\tthis.setTextures( ...args );\r\n\r\n\t\t};\r\n\r\n\t\tthis.hashes = [ null ];\r\n\r\n\t\tconst fsQuad = new FullScreenQuad( new CopyMaterial() );\r\n\t\tthis.fsQuad = fsQuad;\r\n\r\n\t}\r\n\r\n\tsetTextures( renderer, textures, width = this.width, height = this.height ) {\r\n\r\n\t\t// save previous renderer state\r\n\t\tconst prevRenderTarget = renderer.getRenderTarget();\r\n\t\tconst prevToneMapping = renderer.toneMapping;\r\n\t\tconst prevAlpha = renderer.getClearAlpha();\r\n\t\trenderer.getClearColor( prevColor );\r\n\r\n\t\t// resize the render target and ensure we don't have an empty texture\r\n\t\t// render target depth must be >= 1 to avoid unbound texture error on android devices\r\n\t\tconst depth = textures.length || 1;\r\n\t\tif ( width !== this.width || height !== this.height || this.depth !== depth ) {\r\n\r\n\t\t\tthis.setSize( width, height, depth );\r\n\t\t\tthis.hashes = new Array( depth ).fill( null );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setClearColor( 0, 0 );\r\n\t\trenderer.toneMapping = NoToneMapping;\r\n\r\n\t\t// render each texture into each layer of the target\r\n\t\tconst fsQuad = this.fsQuad;\r\n\t\tconst hashes = this.hashes;\r\n\t\tlet updated = false;\r\n\t\tfor ( let i = 0, l = depth; i < l; i ++ ) {\r\n\r\n\t\t\tconst texture = textures[ i ];\r\n\t\t\tconst hash = getTextureHash( texture );\r\n\t\t\tif ( texture && ( hashes[ i ] !== hash || texture.isWebGLRenderTarget ) ) {\r\n\r\n\t\t\t\t// revert to default texture transform before rendering\r\n\t\t\t\ttexture.matrixAutoUpdate = false;\r\n\t\t\t\ttexture.matrix.identity();\r\n\r\n\t\t\t\tfsQuad.material.map = texture;\r\n\r\n\t\t\t\trenderer.setRenderTarget( this, i );\r\n\t\t\t\tfsQuad.render( renderer );\r\n\r\n\t\t\t\t// restore custom texture transform\r\n\t\t\t\ttexture.updateMatrix();\r\n\t\t\t\ttexture.matrixAutoUpdate = true;\r\n\r\n\t\t\t\t// ensure textures are not updated unnecessarily\r\n\t\t\t\thashes[ i ] = hash;\r\n\t\t\t\tupdated = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// reset the renderer\r\n\t\tfsQuad.material.map = null;\r\n\t\trenderer.setClearColor( prevColor, prevAlpha );\r\n\t\trenderer.setRenderTarget( prevRenderTarget );\r\n\t\trenderer.toneMapping = prevToneMapping;\r\n\r\n\t\treturn updated;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tsuper.dispose();\r\n\t\tthis.fsQuad.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass CopyMaterial extends ShaderMaterial {\r\n\r\n\tget map() {\r\n\r\n\t\treturn this.uniforms.map.value;\r\n\r\n\t}\r\n\tset map( v ) {\r\n\r\n\t\tthis.uniforms.map.value = v;\r\n\r\n\t}\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( {\r\n\t\t\tuniforms: {\r\n\r\n\t\t\t\tmap: { value: null },\r\n\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: /* glsl */`\r\n\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\r\n\t\t\tfragmentShader: /* glsl */`\r\n\t\t\t\tuniform sampler2D map;\r\n\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tgl_FragColor = texture2D( map, vUv );\r\n\r\n\t\t\t\t}\r\n\t\t\t`\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n","// Stratified Sampling based on implementation from hoverinc pathtracer\r\n// - https://github.com/hoverinc/ray-tracing-renderer\r\n// - http://www.pbr-book.org/3ed-2018/Sampling_and_Reconstruction/Stratified_Sampling.html\r\n\r\nexport function shuffle( arr ) {\r\n\r\n\tfor ( let i = arr.length - 1; i > 0; i -- ) {\r\n\r\n\t  const j = Math.floor( Math.random() * ( i + 1 ) );\r\n\t  const x = arr[ i ];\r\n\t  arr[ i ] = arr[ j ];\r\n\t  arr[ j ] = x;\r\n\r\n\t}\r\n\r\n\treturn arr;\r\n\r\n}\r\n\r\n// strataCount : The number of bins per dimension\r\n// dimensions  : The number of dimensions to generate stratified values for\r\nexport class StratifiedSampler {\r\n\r\n\tconstructor( strataCount, dimensions ) {\r\n\r\n\t\tconst l = strataCount ** dimensions;\r\n\t\tconst strata = new Uint16Array( l );\r\n\t\tlet index = l;\r\n\r\n\t\t// each integer represents a statum bin\r\n\t\tfor ( let i = 0; i < l; i ++ ) {\r\n\r\n\t\t\tstrata[ i ] = i;\r\n\r\n\t\t}\r\n\r\n\t\tthis.samples = new Float32Array( dimensions );\r\n\r\n\t\tthis.strataCount = strataCount;\r\n\r\n\t\tthis.restart = function () {\r\n\r\n\t\t\tindex = 0;\r\n\r\n\t\t};\r\n\r\n\t\tthis.next = function () {\r\n\r\n\t\t\tconst { samples } = this;\r\n\r\n\t\t\tif ( index >= strata.length ) {\r\n\r\n\t\t\t\tshuffle( strata );\r\n\t\t\t\tthis.restart();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet stratum = strata[ index ++ ];\r\n\r\n\t\t\tfor ( let i = 0; i < dimensions; i ++ ) {\r\n\r\n\t\t\t\tsamples[ i ] = ( stratum % strataCount + Math.random() ) / strataCount;\r\n\t\t\t\tstratum = Math.floor( stratum / strataCount );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn samples;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n}\r\n","// Stratified Sampling based on implementation from hoverinc pathtracer\r\n// - https://github.com/hoverinc/ray-tracing-renderer\r\n// - http://www.pbr-book.org/3ed-2018/Sampling_and_Reconstruction/Stratified_Sampling.html\r\n\r\nimport { StratifiedSampler } from './StratifiedSampler.js';\r\n\r\n// Stratified set of data with each tuple stratified separately and combined\r\nexport class StratifiedSamplerCombined {\r\n\r\n\tconstructor( strataCount, listOfDimensions ) {\r\n\r\n\t\tlet totalDim = 0;\r\n\t\tfor ( const dim of listOfDimensions ) {\r\n\r\n\t\t\ttotalDim += dim;\r\n\r\n\t\t}\r\n\r\n\t\tconst combined = new Float32Array( totalDim );\r\n\t\tconst strataObjs = [];\r\n\t\tlet offset = 0;\r\n\t\tfor ( const dim of listOfDimensions ) {\r\n\r\n\t\t\tconst sampler = new StratifiedSampler( strataCount, dim );\r\n\t\t\tsampler.samples = new Float32Array( combined.buffer, offset, sampler.samples.length );\r\n\t\t\toffset += sampler.samples.length * 4;\r\n\t\t\tstrataObjs.push( sampler );\r\n\r\n\t\t}\r\n\r\n\t\tthis.samples = combined;\r\n\r\n\t\tthis.strataCount = strataCount;\r\n\r\n\t\tthis.next = function () {\r\n\r\n\t\t\tfor ( const strata of strataObjs ) {\r\n\r\n\t\t\t\tstrata.next();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn combined;\r\n\r\n\t\t};\r\n\r\n\t\tthis.restart = function () {\r\n\r\n\t\t\tfor ( const strata of strataObjs ) {\r\n\r\n\t\t\t\tstrata.restart();\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n}\r\n","import { DataTexture, FloatType, NearestFilter, RGBAFormat } from 'three';\r\nimport { StratifiedSamplerCombined } from './stratified/StratifiedSamplerCombined.js';\r\n\r\nexport class StratifiedSamplesTexture extends DataTexture {\r\n\r\n\tconstructor( count = 1, depth = 1, strata = 8 ) {\r\n\r\n\t\tsuper( new Float32Array( 1 ), 1, 1, RGBAFormat, FloatType );\r\n\t\tthis.minFilter = NearestFilter;\r\n\t\tthis.magFilter = NearestFilter;\r\n\r\n\t\tthis.strata = strata;\r\n\t\tthis.sampler = null;\r\n\r\n\t\tthis.init( count, depth, strata );\r\n\r\n\t}\r\n\r\n\tinit( count, depth, strata = this.strata ) {\r\n\r\n\t\tconst { image } = this;\r\n\t\tif ( image.width === depth && image.height === count ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tconst dimensions = new Array( count * depth ).fill( 4 );\r\n\t\tconst sampler = new StratifiedSamplerCombined( strata, dimensions );\r\n\r\n\t\timage.width = depth;\r\n\t\timage.height = count;\r\n\t\timage.data = sampler.samples;\r\n\r\n\t\tthis.sampler = sampler;\r\n\r\n\t\tthis.dispose();\r\n\t\tthis.next();\r\n\r\n\t}\r\n\r\n\tnext() {\r\n\r\n\t\tthis.sampler.next();\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n","export function shuffleArray( array, random = Math.random ) {\r\n\r\n\tfor ( let i = array.length - 1; i > 0; i -- ) {\r\n\r\n\t\tconst replaceIndex = ~ ~ ( ( random() - 1e-6 ) * i );\r\n\t\tconst tmp = array[ i ];\r\n\t\tarray[ i ] = array[ replaceIndex ];\r\n\t\tarray[ replaceIndex ] = tmp;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function fillWithOnes( array, count ) {\r\n\r\n\tarray.fill( 0 );\r\n\r\n\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\tarray[ i ] = 1;\r\n\r\n\t}\r\n\r\n}\r\n","export class BlueNoiseSamples {\r\n\r\n\tconstructor( size ) {\r\n\r\n\t\tthis.count = 0;\r\n\t\tthis.size = - 1;\r\n\t\tthis.sigma = - 1;\r\n\t\tthis.radius = - 1;\r\n\t\tthis.lookupTable = null;\r\n\t\tthis.score = null;\r\n\t\tthis.binaryPattern = null;\r\n\r\n\t\tthis.resize( size );\r\n\t\tthis.setSigma( 1.5 );\r\n\r\n\t}\r\n\r\n\tfindVoid() {\r\n\r\n\t\tconst { score, binaryPattern } = this;\r\n\r\n\t\tlet currValue = Infinity;\r\n\t\tlet currIndex = - 1;\r\n\t\tfor ( let i = 0, l = binaryPattern.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( binaryPattern[ i ] !== 0 ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst pScore = score[ i ];\r\n\t\t\tif ( pScore < currValue ) {\r\n\r\n\t\t\t\tcurrValue = pScore;\r\n\t\t\t\tcurrIndex = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn currIndex;\r\n\r\n\t}\r\n\r\n\tfindCluster() {\r\n\r\n\t\tconst { score, binaryPattern } = this;\r\n\r\n\t\tlet currValue = - Infinity;\r\n\t\tlet currIndex = - 1;\r\n\t\tfor ( let i = 0, l = binaryPattern.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( binaryPattern[ i ] !== 1 ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst pScore = score[ i ];\r\n\t\t\tif ( pScore > currValue ) {\r\n\r\n\t\t\t\tcurrValue = pScore;\r\n\t\t\t\tcurrIndex = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn currIndex;\r\n\r\n\t}\r\n\r\n\tsetSigma( sigma ) {\r\n\r\n\t\tif ( sigma === this.sigma ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// generate a radius in which the score will be updated under the\r\n\t\t// assumption that e^-10 is insignificant enough to be the border at\r\n\t\t// which we drop off.\r\n\t\tconst radius = ~ ~ ( Math.sqrt( 10 * 2 * ( sigma ** 2 ) ) + 1 );\r\n\t\tconst lookupWidth = 2 * radius + 1;\r\n\t\tconst lookupTable = new Float32Array( lookupWidth * lookupWidth );\r\n\t\tconst sigma2 = sigma * sigma;\r\n\t\tfor ( let x = - radius; x <= radius; x ++ ) {\r\n\r\n\t\t\tfor ( let y = - radius; y <= radius; y ++ ) {\r\n\r\n\t\t\t\tconst index = ( radius + y ) * lookupWidth + x + radius;\r\n\t\t\t\tconst dist2 = x * x + y * y;\r\n\t\t\t\tlookupTable[ index ] = Math.E ** ( - dist2 / ( 2 * sigma2 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.lookupTable = lookupTable;\r\n\t\tthis.sigma = sigma;\r\n\t\tthis.radius = radius;\r\n\r\n\t}\r\n\r\n\tresize( size ) {\r\n\r\n\t\tif ( this.size !== size ) {\r\n\r\n\t\t\tthis.size = size;\r\n\t\t\tthis.score = new Float32Array( size * size );\r\n\t\t\tthis.binaryPattern = new Uint8Array( size * size );\r\n\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\tinvert() {\r\n\r\n\t\tconst { binaryPattern, score, size } = this;\r\n\r\n\t\tscore.fill( 0 );\r\n\r\n\t\tfor ( let i = 0, l = binaryPattern.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( binaryPattern[ i ] === 0 ) {\r\n\r\n\t\t\t\tconst y = ~ ~ ( i / size );\r\n\t\t\t\tconst x = i - y * size;\r\n\t\t\t\tthis.updateScore( x, y, 1 );\r\n\t\t\t\tbinaryPattern[ i ] = 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbinaryPattern[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateScore( x, y, multiplier ) {\r\n\r\n\t\t// TODO: Is there a way to keep track of the highest and lowest scores here to avoid have to search over\r\n\t\t// everything in the buffer?\r\n\t\tconst { size, score, lookupTable } = this;\r\n\r\n\t\t// const sigma2 = sigma * sigma;\r\n\t\t// const radius = Math.floor( size / 2 );\r\n\t\tconst radius = this.radius;\r\n\t\tconst lookupWidth = 2 * radius + 1;\r\n\t\tfor ( let px = - radius; px <= radius; px ++ ) {\r\n\r\n\t\t\tfor ( let py = - radius; py <= radius; py ++ ) {\r\n\r\n\t\t\t\t// const dist2 = px * px + py * py;\r\n\t\t\t\t// const value = Math.E ** ( - dist2 / ( 2 * sigma2 ) );\r\n\r\n\t\t\t\tconst lookupIndex = ( radius + py ) * lookupWidth + px + radius;\r\n\t\t\t\tconst value = lookupTable[ lookupIndex ];\r\n\r\n\t\t\t\tlet sx = ( x + px );\r\n\t\t\t\tsx = sx < 0 ? size + sx : sx % size;\r\n\r\n\t\t\t\tlet sy = ( y + py );\r\n\t\t\t\tsy = sy < 0 ? size + sy : sy % size;\r\n\r\n\t\t\t\tconst sindex = sy * size + sx;\r\n\t\t\t\tscore[ sindex ] += multiplier * value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\taddPointIndex( index ) {\r\n\r\n\t\tthis.binaryPattern[ index ] = 1;\r\n\r\n\t\tconst size = this.size;\r\n\t\tconst y = ~ ~ ( index / size );\r\n\t\tconst x = index - y * size;\r\n\t\tthis.updateScore( x, y, 1 );\r\n\t\tthis.count ++;\r\n\r\n\t}\r\n\r\n\tremovePointIndex( index ) {\r\n\r\n\t\tthis.binaryPattern[ index ] = 0;\r\n\r\n\t\tconst size = this.size;\r\n\t\tconst y = ~ ~ ( index / size );\r\n\t\tconst x = index - y * size;\r\n\t\tthis.updateScore( x, y, - 1 );\r\n\t\tthis.count --;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.resize( source.size );\r\n\t\tthis.score.set( source.score );\r\n\t\tthis.binaryPattern.set( source.binaryPattern );\r\n\t\tthis.setSigma( source.sigma );\r\n\t\tthis.count = source.count;\r\n\r\n\t}\r\n\r\n}\r\n","import { shuffleArray, fillWithOnes } from './utils.js';\r\nimport { BlueNoiseSamples } from './BlueNoiseSamples.js';\r\n\r\nexport class BlueNoiseGenerator {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.random = Math.random;\r\n\t\tthis.sigma = 1.5;\r\n\t\tthis.size = 64;\r\n\t\tthis.majorityPointsRatio = 0.1;\r\n\r\n\t\tthis.samples = new BlueNoiseSamples( 1 );\r\n\t\tthis.savedSamples = new BlueNoiseSamples( 1 );\r\n\r\n\t}\r\n\r\n\tgenerate() {\r\n\r\n\t\t// http://cv.ulichney.com/papers/1993-void-cluster.pdf\r\n\r\n\t\tconst {\r\n\t\t\tsamples,\r\n\t\t\tsavedSamples,\r\n\t\t\tsigma,\r\n\t\t\tmajorityPointsRatio,\r\n\t\t\tsize,\r\n\t\t} = this;\r\n\r\n\t\tsamples.resize( size );\r\n\t\tsamples.setSigma( sigma );\r\n\r\n\t\t// 1. Randomly place the minority points.\r\n\t\tconst pointCount = Math.floor( size * size * majorityPointsRatio );\r\n\t\tconst initialSamples = samples.binaryPattern;\r\n\r\n\t\tfillWithOnes( initialSamples, pointCount );\r\n\t\tshuffleArray( initialSamples, this.random );\r\n\r\n\t\tfor ( let i = 0, l = initialSamples.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( initialSamples[ i ] === 1 ) {\r\n\r\n\t\t\t\tsamples.addPointIndex( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// 2. Remove minority point that is in densest cluster and place it in the largest void.\r\n\t\twhile ( true ) {\r\n\r\n\t\t\tconst clusterIndex = samples.findCluster();\r\n\t\t\tsamples.removePointIndex( clusterIndex );\r\n\r\n\t\t\tconst voidIndex = samples.findVoid();\r\n\t\t\tif ( clusterIndex === voidIndex ) {\r\n\r\n\t\t\t\tsamples.addPointIndex( clusterIndex );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsamples.addPointIndex( voidIndex );\r\n\r\n\t\t}\r\n\r\n\t\t// 3. PHASE I: Assign a rank to each progressively less dense cluster point and put it\r\n\t\t// in the dither array.\r\n\t\tconst ditherArray = new Uint32Array( size * size );\r\n\t\tsavedSamples.copy( samples );\r\n\r\n\t\tlet rank;\r\n\t\trank = samples.count - 1;\r\n\t\twhile ( rank >= 0 ) {\r\n\r\n\t\t\tconst clusterIndex = samples.findCluster();\r\n\t\t\tsamples.removePointIndex( clusterIndex );\r\n\r\n\t\t\tditherArray[ clusterIndex ] = rank;\r\n\t\t\trank --;\r\n\r\n\t\t}\r\n\r\n\t\t// 4. PHASE II: Do the same thing for the largest voids up to half of the total pixels using\r\n\t\t// the initial binary pattern.\r\n\t\tconst totalSize = size * size;\r\n\t\trank = savedSamples.count;\r\n\t\twhile ( rank < totalSize / 2 ) {\r\n\r\n\t\t\tconst voidIndex = savedSamples.findVoid();\r\n\t\t\tsavedSamples.addPointIndex( voidIndex );\r\n\t\t\tditherArray[ voidIndex ] = rank;\r\n\t\t\trank ++;\r\n\r\n\t\t}\r\n\r\n\t\t// 5. PHASE III: Invert the pattern and finish out by assigning a rank to the remaining\r\n\t\t// and iteratively removing them.\r\n\t\tsavedSamples.invert();\r\n\r\n\t\twhile ( rank < totalSize ) {\r\n\r\n\t\t\tconst clusterIndex = savedSamples.findCluster();\r\n\t\t\tsavedSamples.removePointIndex( clusterIndex );\r\n\t\t\tditherArray[ clusterIndex ] = rank;\r\n\t\t\trank ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn { data: ditherArray, maxValue: totalSize };\r\n\r\n\t}\r\n\r\n}\r\n","import { DataTexture, FloatType, NearestFilter, RGBAFormat, RGFormat, RedFormat } from 'three';\r\nimport { BlueNoiseGenerator } from './blueNoise/BlueNoiseGenerator.js';\r\n\r\nfunction getStride( channels ) {\r\n\r\n\tif ( channels >= 3 ) {\r\n\r\n\t\treturn 4;\r\n\r\n\t} else {\r\n\r\n\t\treturn channels;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction getFormat( channels ) {\r\n\r\n\tswitch ( channels ) {\r\n\r\n\tcase 1:\r\n\t\treturn RedFormat;\r\n\tcase 2:\r\n\t\treturn RGFormat;\r\n\tdefault:\r\n\t\treturn RGBAFormat;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport class BlueNoiseTexture extends DataTexture {\r\n\r\n\tconstructor( size = 64, channels = 1 ) {\r\n\r\n\t\tsuper( new Float32Array( 4 ), 1, 1, RGBAFormat, FloatType );\r\n\t\tthis.minFilter = NearestFilter;\r\n\t\tthis.magFilter = NearestFilter;\r\n\r\n\t\tthis.size = size;\r\n\t\tthis.channels = channels;\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst channels = this.channels;\r\n\t\tconst size = this.size;\r\n\t\tconst generator = new BlueNoiseGenerator();\r\n\t\tgenerator.channels = channels;\r\n\t\tgenerator.size = size;\r\n\r\n\t\tconst stride = getStride( channels );\r\n\t\tconst format = getFormat( stride );\r\n\t\tif ( this.image.width !== size || format !== this.format ) {\r\n\r\n\t\t\tthis.image.width = size;\r\n\t\t\tthis.image.height = size;\r\n\t\t\tthis.image.data = new Float32Array( ( size ** 2 ) * stride );\r\n\t\t\tthis.format = format;\r\n\t\t\tthis.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tconst data = this.image.data;\r\n\t\tfor ( let i = 0, l = channels; i < l; i ++ ) {\r\n\r\n\t\t\tconst result = generator.generate();\r\n\t\t\tconst bin = result.data;\r\n\t\t\tconst maxValue = result.maxValue;\r\n\r\n\t\t\tfor ( let j = 0, l2 = bin.length; j < l2; j ++ ) {\r\n\r\n\t\t\t\tconst value = bin[ j ] / maxValue;\r\n\t\t\t\tdata[ j * stride + i ] = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n","export const camera_struct = /* glsl */`\r\n\r\n\tstruct PhysicalCamera {\r\n\r\n\t\tfloat focusDistance;\r\n\t\tfloat anamorphicRatio;\r\n\t\tfloat bokehSize;\r\n\t\tint apertureBlades;\r\n\t\tfloat apertureRotation;\r\n\r\n\t};\r\n\r\n`;\r\n","export const equirect_struct = /* glsl */`\r\n\r\n\tstruct EquirectHdrInfo {\r\n\r\n\t\tsampler2D marginalWeights;\r\n\t\tsampler2D conditionalWeights;\r\n\t\tsampler2D map;\r\n\r\n\t\tfloat totalSum;\r\n\r\n\t};\r\n\r\n`;\r\n","export const lights_struct = /* glsl */`\r\n\r\n\t#define RECT_AREA_LIGHT_TYPE 0\r\n\t#define CIRC_AREA_LIGHT_TYPE 1\r\n\t#define SPOT_LIGHT_TYPE 2\r\n\t#define DIR_LIGHT_TYPE 3\r\n\t#define POINT_LIGHT_TYPE 4\r\n\r\n\tstruct LightsInfo {\r\n\r\n\t\tsampler2D tex;\r\n\t\tuint count;\r\n\r\n\t};\r\n\r\n\tstruct Light {\r\n\r\n\t\tvec3 position;\r\n\t\tint type;\r\n\r\n\t\tvec3 color;\r\n\t\tfloat intensity;\r\n\r\n\t\tvec3 u;\r\n\t\tvec3 v;\r\n\t\tfloat area;\r\n\r\n\t\t// spot light fields\r\n\t\tfloat radius;\r\n\t\tfloat near;\r\n\t\tfloat decay;\r\n\t\tfloat distance;\r\n\t\tfloat coneCos;\r\n\t\tfloat penumbraCos;\r\n\t\tint iesProfile;\r\n\r\n\t};\r\n\r\n\tLight readLightInfo( sampler2D tex, uint index ) {\r\n\r\n\t\tuint i = index * 6u;\r\n\r\n\t\tvec4 s0 = texelFetch1D( tex, i + 0u );\r\n\t\tvec4 s1 = texelFetch1D( tex, i + 1u );\r\n\t\tvec4 s2 = texelFetch1D( tex, i + 2u );\r\n\t\tvec4 s3 = texelFetch1D( tex, i + 3u );\r\n\r\n\t\tLight l;\r\n\t\tl.position = s0.rgb;\r\n\t\tl.type = int( round( s0.a ) );\r\n\r\n\t\tl.color = s1.rgb;\r\n\t\tl.intensity = s1.a;\r\n\r\n\t\tl.u = s2.rgb;\r\n\t\tl.v = s3.rgb;\r\n\t\tl.area = s3.a;\r\n\r\n\t\tif ( l.type == SPOT_LIGHT_TYPE || l.type == POINT_LIGHT_TYPE ) {\r\n\r\n\t\t\tvec4 s4 = texelFetch1D( tex, i + 4u );\r\n\t\t\tvec4 s5 = texelFetch1D( tex, i + 5u );\r\n\t\t\tl.radius = s4.r;\r\n\t\t\tl.decay = s4.g;\r\n\t\t\tl.distance = s4.b;\r\n\t\t\tl.coneCos = s4.a;\r\n\r\n\t\t\tl.penumbraCos = s5.r;\r\n\t\t\tl.iesProfile = int( round( s5.g ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl.radius = 0.0;\r\n\t\t\tl.decay = 0.0;\r\n\t\t\tl.distance = 0.0;\r\n\r\n\t\t\tl.coneCos = 0.0;\r\n\t\t\tl.penumbraCos = 0.0;\r\n\t\t\tl.iesProfile = - 1;\r\n\r\n\t\t}\r\n\r\n\t\treturn l;\r\n\r\n\t}\r\n\r\n`;\r\n","export const material_struct = /* glsl */ `\r\n\r\n\tstruct Material {\r\n\r\n\t\tvec3 color;\r\n\t\tint map;\r\n\r\n\t\tfloat metalness;\r\n\t\tint metalnessMap;\r\n\r\n\t\tfloat roughness;\r\n\t\tint roughnessMap;\r\n\r\n\t\tfloat ior;\r\n\t\tfloat transmission;\r\n\t\tint transmissionMap;\r\n\r\n\t\tfloat emissiveIntensity;\r\n\t\tvec3 emissive;\r\n\t\tint emissiveMap;\r\n\r\n\t\tint normalMap;\r\n\t\tvec2 normalScale;\r\n\r\n\t\tfloat clearcoat;\r\n\t\tint clearcoatMap;\r\n\t\tint clearcoatNormalMap;\r\n\t\tvec2 clearcoatNormalScale;\r\n\t\tfloat clearcoatRoughness;\r\n\t\tint clearcoatRoughnessMap;\r\n\r\n\t\tint iridescenceMap;\r\n\t\tint iridescenceThicknessMap;\r\n\t\tfloat iridescence;\r\n\t\tfloat iridescenceIor;\r\n\t\tfloat iridescenceThicknessMinimum;\r\n\t\tfloat iridescenceThicknessMaximum;\r\n\r\n\t\tvec3 specularColor;\r\n\t\tint specularColorMap;\r\n\r\n\t\tfloat specularIntensity;\r\n\t\tint specularIntensityMap;\r\n\t\tbool thinFilm;\r\n\r\n\t\tvec3 attenuationColor;\r\n\t\tfloat attenuationDistance;\r\n\r\n\t\tint alphaMap;\r\n\r\n\t\tbool castShadow;\r\n\t\tfloat opacity;\r\n\t\tfloat alphaTest;\r\n\r\n\t\tfloat side;\r\n\t\tbool matte;\r\n\r\n\t\tfloat sheen;\r\n\t\tvec3 sheenColor;\r\n\t\tint sheenColorMap;\r\n\t\tfloat sheenRoughness;\r\n\t\tint sheenRoughnessMap;\r\n\r\n\t\tbool vertexColors;\r\n\t\tbool flatShading;\r\n\t\tbool transparent;\r\n\t\tbool fogVolume;\r\n\r\n\t\tmat3 mapTransform;\r\n\t\tmat3 metalnessMapTransform;\r\n\t\tmat3 roughnessMapTransform;\r\n\t\tmat3 transmissionMapTransform;\r\n\t\tmat3 emissiveMapTransform;\r\n\t\tmat3 normalMapTransform;\r\n\t\tmat3 clearcoatMapTransform;\r\n\t\tmat3 clearcoatNormalMapTransform;\r\n\t\tmat3 clearcoatRoughnessMapTransform;\r\n\t\tmat3 sheenColorMapTransform;\r\n\t\tmat3 sheenRoughnessMapTransform;\r\n\t\tmat3 iridescenceMapTransform;\r\n\t\tmat3 iridescenceThicknessMapTransform;\r\n\t\tmat3 specularColorMapTransform;\r\n\t\tmat3 specularIntensityMapTransform;\r\n\r\n\t};\r\n\r\n\tmat3 readTextureTransform( sampler2D tex, uint index ) {\r\n\r\n\t\tmat3 textureTransform;\r\n\r\n\t\tvec4 row1 = texelFetch1D( tex, index );\r\n\t\tvec4 row2 = texelFetch1D( tex, index + 1u );\r\n\r\n\t\ttextureTransform[0] = vec3(row1.r, row2.r, 0.0);\r\n\t\ttextureTransform[1] = vec3(row1.g, row2.g, 0.0);\r\n\t\ttextureTransform[2] = vec3(row1.b, row2.b, 1.0);\r\n\r\n\t\treturn textureTransform;\r\n\r\n\t}\r\n\r\n\tMaterial readMaterialInfo( sampler2D tex, uint index ) {\r\n\r\n\t\tuint i = index * 45u;\r\n\r\n\t\tvec4 s0 = texelFetch1D( tex, i + 0u );\r\n\t\tvec4 s1 = texelFetch1D( tex, i + 1u );\r\n\t\tvec4 s2 = texelFetch1D( tex, i + 2u );\r\n\t\tvec4 s3 = texelFetch1D( tex, i + 3u );\r\n\t\tvec4 s4 = texelFetch1D( tex, i + 4u );\r\n\t\tvec4 s5 = texelFetch1D( tex, i + 5u );\r\n\t\tvec4 s6 = texelFetch1D( tex, i + 6u );\r\n\t\tvec4 s7 = texelFetch1D( tex, i + 7u );\r\n\t\tvec4 s8 = texelFetch1D( tex, i + 8u );\r\n\t\tvec4 s9 = texelFetch1D( tex, i + 9u );\r\n\t\tvec4 s10 = texelFetch1D( tex, i + 10u );\r\n\t\tvec4 s11 = texelFetch1D( tex, i + 11u );\r\n\t\tvec4 s12 = texelFetch1D( tex, i + 12u );\r\n\t\tvec4 s13 = texelFetch1D( tex, i + 13u );\r\n\t\tvec4 s14 = texelFetch1D( tex, i + 14u );\r\n\r\n\t\tMaterial m;\r\n\t\tm.color = s0.rgb;\r\n\t\tm.map = int( round( s0.a ) );\r\n\r\n\t\tm.metalness = s1.r;\r\n\t\tm.metalnessMap = int( round( s1.g ) );\r\n\t\tm.roughness = s1.b;\r\n\t\tm.roughnessMap = int( round( s1.a ) );\r\n\r\n\t\tm.ior = s2.r;\r\n\t\tm.transmission = s2.g;\r\n\t\tm.transmissionMap = int( round( s2.b ) );\r\n\t\tm.emissiveIntensity = s2.a;\r\n\r\n\t\tm.emissive = s3.rgb;\r\n\t\tm.emissiveMap = int( round( s3.a ) );\r\n\r\n\t\tm.normalMap = int( round( s4.r ) );\r\n\t\tm.normalScale = s4.gb;\r\n\r\n\t\tm.clearcoat = s4.a;\r\n\t\tm.clearcoatMap = int( round( s5.r ) );\r\n\t\tm.clearcoatRoughness = s5.g;\r\n\t\tm.clearcoatRoughnessMap = int( round( s5.b ) );\r\n\t\tm.clearcoatNormalMap = int( round( s5.a ) );\r\n\t\tm.clearcoatNormalScale = s6.rg;\r\n\r\n\t\tm.sheen = s6.a;\r\n\t\tm.sheenColor = s7.rgb;\r\n\t\tm.sheenColorMap = int( round( s7.a ) );\r\n\t\tm.sheenRoughness = s8.r;\r\n\t\tm.sheenRoughnessMap = int( round( s8.g ) );\r\n\r\n\t\tm.iridescenceMap = int( round( s8.b ) );\r\n\t\tm.iridescenceThicknessMap = int( round( s8.a ) );\r\n\t\tm.iridescence = s9.r;\r\n\t\tm.iridescenceIor = s9.g;\r\n\t\tm.iridescenceThicknessMinimum = s9.b;\r\n\t\tm.iridescenceThicknessMaximum = s9.a;\r\n\r\n\t\tm.specularColor = s10.rgb;\r\n\t\tm.specularColorMap = int( round( s10.a ) );\r\n\r\n\t\tm.specularIntensity = s11.r;\r\n\t\tm.specularIntensityMap = int( round( s11.g ) );\r\n\t\tm.thinFilm = bool( s11.b );\r\n\r\n\t\tm.attenuationColor = s12.rgb;\r\n\t\tm.attenuationDistance = s12.a;\r\n\r\n\t\tm.alphaMap = int( round( s13.r ) );\r\n\r\n\t\tm.opacity = s13.g;\r\n\t\tm.alphaTest = s13.b;\r\n\t\tm.side = s13.a;\r\n\r\n\t\tm.matte = bool( s14.r );\r\n\t\tm.castShadow = bool( s14.g );\r\n\t\tm.vertexColors = bool( int( s14.b ) & 1 );\r\n\t\tm.flatShading = bool( int( s14.b ) & 2 );\r\n\t\tm.fogVolume = bool( int( s14.b ) & 4 );\r\n\t\tm.transparent = bool( s14.a );\r\n\r\n\t\tuint firstTextureTransformIdx = i + 15u;\r\n\r\n\t\t// mat3( 1.0 ) is an identity matrix\r\n\t\tm.mapTransform = m.map == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx );\r\n\t\tm.metalnessMapTransform = m.metalnessMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 2u );\r\n\t\tm.roughnessMapTransform = m.roughnessMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 4u );\r\n\t\tm.transmissionMapTransform = m.transmissionMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 6u );\r\n\t\tm.emissiveMapTransform = m.emissiveMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 8u );\r\n\t\tm.normalMapTransform = m.normalMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 10u );\r\n\t\tm.clearcoatMapTransform = m.clearcoatMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 12u );\r\n\t\tm.clearcoatNormalMapTransform = m.clearcoatNormalMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 14u );\r\n\t\tm.clearcoatRoughnessMapTransform = m.clearcoatRoughnessMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 16u );\r\n\t\tm.sheenColorMapTransform = m.sheenColorMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 18u );\r\n\t\tm.sheenRoughnessMapTransform = m.sheenRoughnessMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 20u );\r\n\t\tm.iridescenceMapTransform = m.iridescenceMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 22u );\r\n\t\tm.iridescenceThicknessMapTransform = m.iridescenceThicknessMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 24u );\r\n\t\tm.specularColorMapTransform = m.specularColorMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 26u );\r\n\t\tm.specularIntensityMapTransform = m.specularIntensityMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 28u );\r\n\r\n\t\treturn m;\r\n\r\n\t}\r\n\r\n`;\r\n","export const surface_record_struct = /* glsl */`\r\n\r\n\tstruct SurfaceRecord {\r\n\r\n\t\t// surface type\r\n\t\tbool volumeParticle;\r\n\r\n\t\t// geometry\r\n\t\tvec3 faceNormal;\r\n\t\tbool frontFace;\r\n\t\tvec3 normal;\r\n\t\tmat3 normalBasis;\r\n\t\tmat3 normalInvBasis;\r\n\r\n\t\t// cached properties\r\n\t\tfloat eta;\r\n\t\tfloat f0;\r\n\r\n\t\t// material\r\n\t\tfloat roughness;\r\n\t\tfloat filteredRoughness;\r\n\t\tfloat metalness;\r\n\t\tvec3 color;\r\n\t\tvec3 emission;\r\n\r\n\t\t// transmission\r\n\t\tfloat ior;\r\n\t\tfloat transmission;\r\n\t\tbool thinFilm;\r\n\t\tvec3 attenuationColor;\r\n\t\tfloat attenuationDistance;\r\n\r\n\t\t// clearcoat\r\n\t\tvec3 clearcoatNormal;\r\n\t\tmat3 clearcoatBasis;\r\n\t\tmat3 clearcoatInvBasis;\r\n\t\tfloat clearcoat;\r\n\t\tfloat clearcoatRoughness;\r\n\t\tfloat filteredClearcoatRoughness;\r\n\r\n\t\t// sheen\r\n\t\tfloat sheen;\r\n\t\tvec3 sheenColor;\r\n\t\tfloat sheenRoughness;\r\n\r\n\t\t// iridescence\r\n\t\tfloat iridescence;\r\n\t\tfloat iridescenceIor;\r\n\t\tfloat iridescenceThickness;\r\n\r\n\t\t// specular\r\n\t\tvec3 specularColor;\r\n\t\tfloat specularIntensity;\r\n\t};\r\n\r\n\tstruct ScatterRecord {\r\n\t\tfloat specularPdf;\r\n\t\tfloat pdf;\r\n\t\tvec3 direction;\r\n\t\tvec3 color;\r\n\t};\r\n\r\n`;\r\n","export const equirect_functions = /* glsl */`\r\n\r\n\t// samples the the given environment map in the given direction\r\n\tvec3 sampleEquirectColor( sampler2D envMap, vec3 direction ) {\r\n\r\n\t\treturn texture2D( envMap, equirectDirectionToUv( direction ) ).rgb;\r\n\r\n\t}\r\n\r\n\t// gets the pdf of the given direction to sample\r\n\tfloat equirectDirectionPdf( vec3 direction ) {\r\n\r\n\t\tvec2 uv = equirectDirectionToUv( direction );\r\n\t\tfloat theta = uv.y * PI;\r\n\t\tfloat sinTheta = sin( theta );\r\n\t\tif ( sinTheta == 0.0 ) {\r\n\r\n\t\t\treturn 0.0;\r\n\r\n\t\t}\r\n\r\n\t\treturn 1.0 / ( 2.0 * PI * PI * sinTheta );\r\n\r\n\t}\r\n\r\n\t// samples the color given env map with CDF and returns the pdf of the direction\r\n\tfloat sampleEquirect( vec3 direction, inout vec3 color ) {\r\n\r\n\t\tfloat totalSum = envMapInfo.totalSum;\r\n\t\tif ( totalSum == 0.0 ) {\r\n\r\n\t\t\tcolor = vec3( 0.0 );\r\n\t\t\treturn 1.0;\r\n\r\n\t\t}\r\n\r\n\t\tvec2 uv = equirectDirectionToUv( direction );\r\n\t\tcolor = texture2D( envMapInfo.map, uv ).rgb;\r\n\r\n\t\tfloat lum = luminance( color );\r\n\t\tivec2 resolution = textureSize( envMapInfo.map, 0 );\r\n\t\tfloat pdf = lum / totalSum;\r\n\r\n\t\treturn float( resolution.x * resolution.y ) * pdf * equirectDirectionPdf( direction );\r\n\r\n\t}\r\n\r\n\t// samples a direction of the envmap with color and retrieves pdf\r\n\tfloat sampleEquirectProbability( vec2 r, inout vec3 color, inout vec3 direction ) {\r\n\r\n\t\t// sample env map cdf\r\n\t\tfloat v = texture2D( envMapInfo.marginalWeights, vec2( r.x, 0.0 ) ).x;\r\n\t\tfloat u = texture2D( envMapInfo.conditionalWeights, vec2( r.y, v ) ).x;\r\n\t\tvec2 uv = vec2( u, v );\r\n\r\n\t\tvec3 derivedDirection = equirectUvToDirection( uv );\r\n\t\tdirection = derivedDirection;\r\n\t\tcolor = texture2D( envMapInfo.map, uv ).rgb;\r\n\r\n\t\tfloat totalSum = envMapInfo.totalSum;\r\n\t\tfloat lum = luminance( color );\r\n\t\tivec2 resolution = textureSize( envMapInfo.map, 0 );\r\n\t\tfloat pdf = lum / totalSum;\r\n\r\n\t\treturn float( resolution.x * resolution.y ) * pdf * equirectDirectionPdf( direction );\r\n\r\n\t}\r\n`;\r\n","export const light_sampling_functions = /* glsl */`\r\n\r\n\tfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\r\n\r\n\t\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\r\n\r\n\t}\r\n\r\n\tfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\r\n\r\n\t\t// based upon Frostbite 3 Moving to Physically-based Rendering\r\n\t\t// page 32, equation 26: E[window1]\r\n\t\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), EPSILON );\r\n\r\n\t\tif ( cutoffDistance > 0.0 ) {\r\n\r\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn distanceFalloff;\r\n\r\n\t}\r\n\r\n\tfloat getPhotometricAttenuation( sampler2DArray iesProfiles, int iesProfile, vec3 posToLight, vec3 lightDir, vec3 u, vec3 v ) {\r\n\r\n\t\tfloat cosTheta = dot( posToLight, lightDir );\r\n\t\tfloat angle = acos( cosTheta ) / PI;\r\n\r\n\t\treturn texture2D( iesProfiles, vec3( angle, 0.0, iesProfile ) ).r;\r\n\r\n\t}\r\n\r\n\tstruct LightRecord {\r\n\r\n\t\tfloat dist;\r\n\t\tvec3 direction;\r\n\t\tfloat pdf;\r\n\t\tvec3 emission;\r\n\t\tint type;\r\n\r\n\t};\r\n\r\n\tbool intersectLightAtIndex( sampler2D lights, vec3 rayOrigin, vec3 rayDirection, uint l, inout LightRecord lightRec ) {\r\n\r\n\t\tbool didHit = false;\r\n\t\tLight light = readLightInfo( lights, l );\r\n\r\n\t\tvec3 u = light.u;\r\n\t\tvec3 v = light.v;\r\n\r\n\t\t// check for backface\r\n\t\tvec3 normal = normalize( cross( u, v ) );\r\n\t\tif ( dot( normal, rayDirection ) > 0.0 ) {\r\n\r\n\t\t\tu *= 1.0 / dot( u, u );\r\n\t\t\tv *= 1.0 / dot( v, v );\r\n\r\n\t\t\tfloat dist;\r\n\r\n\t\t\t// MIS / light intersection is not supported for punctual lights.\r\n\t\t\tif(\r\n\t\t\t\t( light.type == RECT_AREA_LIGHT_TYPE && intersectsRectangle( light.position, normal, u, v, rayOrigin, rayDirection, dist ) ) ||\r\n\t\t\t\t( light.type == CIRC_AREA_LIGHT_TYPE && intersectsCircle( light.position, normal, u, v, rayOrigin, rayDirection, dist ) )\r\n\t\t\t) {\r\n\r\n\t\t\t\tfloat cosTheta = dot( rayDirection, normal );\r\n\t\t\t\tdidHit = true;\r\n\t\t\t\tlightRec.dist = dist;\r\n\t\t\t\tlightRec.pdf = ( dist * dist ) / ( light.area * cosTheta );\r\n\t\t\t\tlightRec.emission = light.color * light.intensity;\r\n\t\t\t\tlightRec.direction = rayDirection;\r\n\t\t\t\tlightRec.type = light.type;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn didHit;\r\n\r\n\t}\r\n\r\n\tLightRecord randomAreaLightSample( Light light, vec3 rayOrigin, vec2 ruv ) {\r\n\r\n\t\tvec3 randomPos;\r\n\t\tif( light.type == RECT_AREA_LIGHT_TYPE ) {\r\n\r\n\t\t\t// rectangular area light\r\n\t\t\trandomPos = light.position + light.u * ( ruv.x - 0.5 ) + light.v * ( ruv.y - 0.5 );\r\n\r\n\t\t} else if( light.type == CIRC_AREA_LIGHT_TYPE ) {\r\n\r\n\t\t\t// circular area light\r\n\t\t\tfloat r = 0.5 * sqrt( ruv.x );\r\n\t\t\tfloat theta = ruv.y * 2.0 * PI;\r\n\t\t\tfloat x = r * cos( theta );\r\n\t\t\tfloat y = r * sin( theta );\r\n\r\n\t\t\trandomPos = light.position + light.u * x + light.v * y;\r\n\r\n\t\t}\r\n\r\n\t\tvec3 toLight = randomPos - rayOrigin;\r\n\t\tfloat lightDistSq = dot( toLight, toLight );\r\n\t\tfloat dist = sqrt( lightDistSq );\r\n\t\tvec3 direction = toLight / dist;\r\n\t\tvec3 lightNormal = normalize( cross( light.u, light.v ) );\r\n\r\n\t\tLightRecord lightRec;\r\n\t\tlightRec.type = light.type;\r\n\t\tlightRec.emission = light.color * light.intensity;\r\n\t\tlightRec.dist = dist;\r\n\t\tlightRec.direction = direction;\r\n\r\n\t\t// TODO: the denominator is potentially zero\r\n\t\tlightRec.pdf = lightDistSq / ( light.area * dot( direction, lightNormal ) );\r\n\r\n\t\treturn lightRec;\r\n\r\n\t}\r\n\r\n\tLightRecord randomSpotLightSample( Light light, sampler2DArray iesProfiles, vec3 rayOrigin, vec2 ruv ) {\r\n\r\n\t\tfloat radius = light.radius * sqrt( ruv.x );\r\n\t\tfloat theta = ruv.y * 2.0 * PI;\r\n\t\tfloat x = radius * cos( theta );\r\n\t\tfloat y = radius * sin( theta );\r\n\r\n\t\tvec3 u = light.u;\r\n\t\tvec3 v = light.v;\r\n\t\tvec3 normal = normalize( cross( u, v ) );\r\n\r\n\t\tfloat angle = acos( light.coneCos );\r\n\t\tfloat angleTan = tan( angle );\r\n\t\tfloat startDistance = light.radius / max( angleTan, EPSILON );\r\n\r\n\t\tvec3 randomPos = light.position - normal * startDistance + u * x + v * y;\r\n\t\tvec3 toLight = randomPos - rayOrigin;\r\n\t\tfloat lightDistSq = dot( toLight, toLight );\r\n\t\tfloat dist = sqrt( lightDistSq );\r\n\r\n\t\tvec3 direction = toLight / max( dist, EPSILON );\r\n\t\tfloat cosTheta = dot( direction, normal );\r\n\r\n\t\tfloat spotAttenuation = light.iesProfile != - 1 ?\r\n\t\t\tgetPhotometricAttenuation( iesProfiles, light.iesProfile, direction, normal, u, v ) :\r\n\t\t\tgetSpotAttenuation( light.coneCos, light.penumbraCos, cosTheta );\r\n\r\n\t\tfloat distanceAttenuation = getDistanceAttenuation( dist, light.distance, light.decay );\r\n\t\tLightRecord lightRec;\r\n\t\tlightRec.type = light.type;\r\n\t\tlightRec.dist = dist;\r\n\t\tlightRec.direction = direction;\r\n\t\tlightRec.emission = light.color * light.intensity * distanceAttenuation * spotAttenuation;\r\n\t\tlightRec.pdf = 1.0;\r\n\r\n\t\treturn lightRec;\r\n\r\n\t}\r\n\r\n\tLightRecord randomLightSample( sampler2D lights, sampler2DArray iesProfiles, uint lightCount, vec3 rayOrigin, vec3 ruv ) {\r\n\r\n\t\tLightRecord result;\r\n\r\n\t\t// pick a random light\r\n\t\tuint l = uint( ruv.x * float( lightCount ) );\r\n\t\tLight light = readLightInfo( lights, l );\r\n\r\n\t\tif ( light.type == SPOT_LIGHT_TYPE ) {\r\n\r\n\t\t\tresult = randomSpotLightSample( light, iesProfiles, rayOrigin, ruv.yz );\r\n\r\n\t\t} else if ( light.type == POINT_LIGHT_TYPE ) {\r\n\r\n\t\t\tvec3 lightRay = light.u - rayOrigin;\r\n\t\t\tfloat lightDist = length( lightRay );\r\n\t\t\tfloat cutoffDistance = light.distance;\r\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDist, light.decay ), 0.01 );\r\n\t\t\tif ( cutoffDistance > 0.0 ) {\r\n\r\n\t\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDist / cutoffDistance ) ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tLightRecord rec;\r\n\t\t\trec.direction = normalize( lightRay );\r\n\t\t\trec.dist = length( lightRay );\r\n\t\t\trec.pdf = 1.0;\r\n\t\t\trec.emission = light.color * light.intensity * distanceFalloff;\r\n\t\t\trec.type = light.type;\r\n\t\t\tresult = rec;\r\n\r\n\t\t} else if ( light.type == DIR_LIGHT_TYPE ) {\r\n\r\n\t\t\tLightRecord rec;\r\n\t\t\trec.dist = 1e10;\r\n\t\t\trec.direction = light.u;\r\n\t\t\trec.pdf = 1.0;\r\n\t\t\trec.emission = light.color * light.intensity;\r\n\t\t\trec.type = light.type;\r\n\r\n\t\t\tresult = rec;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// sample the light\r\n\t\t\tresult = randomAreaLightSample( light, rayOrigin, ruv.yz );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n`;\r\n","export const shape_sampling_functions = /* glsl */`\r\n\r\n\tvec3 sampleHemisphere( vec3 n, vec2 uv ) {\r\n\r\n\t\t// https://www.rorydriscoll.com/2009/01/07/better-sampling/\r\n\t\t// https://graphics.pixar.com/library/OrthonormalB/paper.pdf\r\n\t\tfloat sign = n.z == 0.0 ? 1.0 : sign( n.z );\r\n\t\tfloat a = - 1.0 / ( sign + n.z );\r\n\t\tfloat b = n.x * n.y * a;\r\n\t\tvec3 b1 = vec3( 1.0 + sign * n.x * n.x * a, sign * b, - sign * n.x );\r\n\t\tvec3 b2 = vec3( b, sign + n.y * n.y * a, - n.y );\r\n\r\n\t\tfloat r = sqrt( uv.x );\r\n\t\tfloat theta = 2.0 * PI * uv.y;\r\n\t\tfloat x = r * cos( theta );\r\n\t\tfloat y = r * sin( theta );\r\n\t\treturn x * b1 + y * b2 + sqrt( 1.0 - uv.x ) * n;\r\n\r\n\t}\r\n\r\n\tvec2 sampleTriangle( vec2 a, vec2 b, vec2 c, vec2 r ) {\r\n\r\n\t\t// get the edges of the triangle and the diagonal across the\r\n\t\t// center of the parallelogram\r\n\t\tvec2 e1 = a - b;\r\n\t\tvec2 e2 = c - b;\r\n\t\tvec2 diag = normalize( e1 + e2 );\r\n\r\n\t\t// pick the point in the parallelogram\r\n\t\tif ( r.x + r.y > 1.0 ) {\r\n\r\n\t\t\tr = vec2( 1.0 ) - r;\r\n\r\n\t\t}\r\n\r\n\t\treturn e1 * r.x + e2 * r.y;\r\n\r\n\t}\r\n\r\n\tvec2 sampleCircle( vec2 uv ) {\r\n\r\n\t\tfloat angle = 2.0 * PI * uv.x;\r\n\t\tfloat radius = sqrt( uv.y );\r\n\t\treturn vec2( cos( angle ), sin( angle ) ) * radius;\r\n\r\n\t}\r\n\r\n\tvec3 sampleSphere( vec2 uv ) {\r\n\r\n\t\tfloat u = ( uv.x - 0.5 ) * 2.0;\r\n\t\tfloat t = uv.y * PI * 2.0;\r\n\t\tfloat f = sqrt( 1.0 - u * u );\r\n\r\n\t\treturn vec3( f * cos( t ), f * sin( t ), u );\r\n\r\n\t}\r\n\r\n\tvec2 sampleRegularPolygon( int sides, vec3 uvw ) {\r\n\r\n\t\tsides = max( sides, 3 );\r\n\r\n\t\tvec3 r = uvw;\r\n\t\tfloat anglePerSegment = 2.0 * PI / float( sides );\r\n\t\tfloat segment = floor( float( sides ) * r.x );\r\n\r\n\t\tfloat angle1 = anglePerSegment * segment;\r\n\t\tfloat angle2 = angle1 + anglePerSegment;\r\n\t\tvec2 a = vec2( sin( angle1 ), cos( angle1 ) );\r\n\t\tvec2 b = vec2( 0.0, 0.0 );\r\n\t\tvec2 c = vec2( sin( angle2 ), cos( angle2 ) );\r\n\r\n\t\treturn sampleTriangle( a, b, c, r.yz );\r\n\r\n\t}\r\n\r\n\t// samples an aperture shape with the given number of sides. 0 means circle\r\n\tvec2 sampleAperture( int blades, vec3 uvw ) {\r\n\r\n\t\treturn blades == 0 ?\r\n\t\t\tsampleCircle( uvw.xy ) :\r\n\t\t\tsampleRegularPolygon( blades, uvw );\r\n\r\n\t}\r\n\r\n\r\n`;\r\n","export const fresnel_functions = /* glsl */`\r\n\r\n\tbool totalInternalReflection( float cosTheta, float eta ) {\r\n\r\n\t\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\r\n\t\treturn eta * sinTheta > 1.0;\r\n\r\n\t}\r\n\r\n\t// https://google.github.io/filament/Filament.md.html#materialsystem/diffusebrdf\r\n\tfloat schlickFresnel( float cosine, float f0 ) {\r\n\r\n\t\treturn f0 + ( 1.0 - f0 ) * pow( 1.0 - cosine, 5.0 );\r\n\r\n\t}\r\n\r\n\tvec3 schlickFresnel( float cosine, vec3 f0 ) {\r\n\r\n\t\treturn f0 + ( 1.0 - f0 ) * pow( 1.0 - cosine, 5.0 );\r\n\r\n\t}\r\n\r\n\tvec3 schlickFresnel( float cosine, vec3 f0, vec3 f90 ) {\r\n\r\n\t\treturn f0 + ( f90 - f0 ) * pow( 1.0 - cosine, 5.0 );\r\n\r\n\t}\r\n\r\n\tfloat dielectricFresnel( float cosThetaI, float eta ) {\r\n\r\n\t\t// https://schuttejoe.github.io/post/disneybsdf/\r\n\t\tfloat ni = eta;\r\n\t\tfloat nt = 1.0;\r\n\r\n\t\t// Check for total internal reflection\r\n\t\tfloat sinThetaISq = 1.0f - cosThetaI * cosThetaI;\r\n\t\tfloat sinThetaTSq = eta * eta * sinThetaISq;\r\n\t\tif( sinThetaTSq >= 1.0 ) {\r\n\r\n\t\t\treturn 1.0;\r\n\r\n\t\t}\r\n\r\n\t\tfloat sinThetaT = sqrt( sinThetaTSq );\r\n\r\n\t\tfloat cosThetaT = sqrt( max( 0.0, 1.0f - sinThetaT * sinThetaT ) );\r\n\t\tfloat rParallel = ( ( nt * cosThetaI ) - ( ni * cosThetaT ) ) / ( ( nt * cosThetaI ) + ( ni * cosThetaT ) );\r\n\t\tfloat rPerpendicular = ( ( ni * cosThetaI ) - ( nt * cosThetaT ) ) / ( ( ni * cosThetaI ) + ( nt * cosThetaT ) );\r\n\t\treturn ( rParallel * rParallel + rPerpendicular * rPerpendicular ) / 2.0;\r\n\r\n\t}\r\n\r\n\t// https://raytracing.github.io/books/RayTracingInOneWeekend.html#dielectrics/schlickapproximation\r\n\tfloat iorRatioToF0( float eta ) {\r\n\r\n\t\treturn pow( ( 1.0 - eta ) / ( 1.0 + eta ), 2.0 );\r\n\r\n\t}\r\n\r\n\tvec3 evaluateFresnel( float cosTheta, float eta, vec3 f0, vec3 f90 ) {\r\n\r\n\t\tif ( totalInternalReflection( cosTheta, eta ) ) {\r\n\r\n\t\t\treturn f90;\r\n\r\n\t\t}\r\n\r\n\t\treturn schlickFresnel( cosTheta, f0, f90 );\r\n\r\n\t}\r\n\r\n\t// TODO: disney fresnel was removed and replaced with this fresnel function to better align with\r\n\t// the glTF but is causing blown out pixels. Should be revisited\r\n\t// float evaluateFresnelWeight( float cosTheta, float eta, float f0 ) {\r\n\r\n\t// \tif ( totalInternalReflection( cosTheta, eta ) ) {\r\n\r\n\t// \t\treturn 1.0;\r\n\r\n\t// \t}\r\n\r\n\t// \treturn schlickFresnel( cosTheta, f0 );\r\n\r\n\t// }\r\n\r\n\t// https://schuttejoe.github.io/post/disneybsdf/\r\n\tfloat disneyFresnel( vec3 wo, vec3 wi, vec3 wh, float f0, float eta, float metalness ) {\r\n\r\n\t\tfloat dotHV = dot( wo, wh );\r\n\t\tif ( totalInternalReflection( dotHV, eta ) ) {\r\n\r\n\t\t\treturn 1.0;\r\n\r\n\t\t}\r\n\r\n\t\tfloat dotHL = dot( wi, wh );\r\n\t\tfloat dielectricFresnel = dielectricFresnel( abs( dotHV ), eta );\r\n\t\tfloat metallicFresnel = schlickFresnel( dotHL, f0 );\r\n\r\n\t\treturn mix( dielectricFresnel, metallicFresnel, metalness );\r\n\r\n\t}\r\n\r\n`;\r\n","export const math_functions = /* glsl */`\r\n\r\n\t// Fast arccos approximation used to remove banding artifacts caused by numerical errors in acos.\r\n\t// This is a cubic Lagrange interpolating polynomial for x = [-1, -1/2, 0, 1/2, 1].\r\n\t// For more information see: https://github.com/gkjohnson/three-gpu-pathtracer/pull/171#issuecomment-1152275248\r\n\tfloat acosApprox( float x ) {\r\n\r\n\t\tx = clamp( x, -1.0, 1.0 );\r\n\t\treturn ( - 0.69813170079773212 * x * x - 0.87266462599716477 ) * x + 1.5707963267948966;\r\n\r\n\t}\r\n\r\n\t// An acos with input values bound to the range [-1, 1].\r\n\tfloat acosSafe( float x ) {\r\n\r\n\t\treturn acos( clamp( x, -1.0, 1.0 ) );\r\n\r\n\t}\r\n\r\n\tfloat saturateCos( float val ) {\r\n\r\n\t\treturn clamp( val, 0.001, 1.0 );\r\n\r\n\t}\r\n\r\n\tfloat square( float t ) {\r\n\r\n\t\treturn t * t;\r\n\r\n\t}\r\n\r\n\tvec2 square( vec2 t ) {\r\n\r\n\t\treturn t * t;\r\n\r\n\t}\r\n\r\n\tvec3 square( vec3 t ) {\r\n\r\n\t\treturn t * t;\r\n\r\n\t}\r\n\r\n\tvec4 square( vec4 t ) {\r\n\r\n\t\treturn t * t;\r\n\r\n\t}\r\n\r\n\tvec2 rotateVector( vec2 v, float t ) {\r\n\r\n\t\tfloat ac = cos( t );\r\n\t\tfloat as = sin( t );\r\n\t\treturn vec2(\r\n\t\t\tv.x * ac - v.y * as,\r\n\t\t\tv.x * as + v.y * ac\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t// forms a basis with the normal vector as Z\r\n\tmat3 getBasisFromNormal( vec3 normal ) {\r\n\r\n\t\tvec3 other;\r\n\t\tif ( abs( normal.x ) > 0.5 ) {\r\n\r\n\t\t\tother = vec3( 0.0, 1.0, 0.0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tother = vec3( 1.0, 0.0, 0.0 );\r\n\r\n\t\t}\r\n\r\n\t\tvec3 ortho = normalize( cross( normal, other ) );\r\n\t\tvec3 ortho2 = normalize( cross( normal, ortho ) );\r\n\t\treturn mat3( ortho2, ortho, normal );\r\n\r\n\t}\r\n\r\n`;\r\n","export const shape_intersection_functions = /* glsl */`\r\n\r\n\t// Finds the point where the ray intersects the plane defined by u and v and checks if this point\r\n\t// falls in the bounds of the rectangle on that same plane.\r\n\t// Plane intersection: https://lousodrome.net/blog/light/2020/07/03/intersection-of-a-ray-and-a-plane/\r\n\tbool intersectsRectangle( vec3 center, vec3 normal, vec3 u, vec3 v, vec3 rayOrigin, vec3 rayDirection, inout float dist ) {\r\n\r\n\t\tfloat t = dot( center - rayOrigin, normal ) / dot( rayDirection, normal );\r\n\r\n\t\tif ( t > EPSILON ) {\r\n\r\n\t\t\tvec3 p = rayOrigin + rayDirection * t;\r\n\t\t\tvec3 vi = p - center;\r\n\r\n\t\t\t// check if p falls inside the rectangle\r\n\t\t\tfloat a1 = dot( u, vi );\r\n\t\t\tif ( abs( a1 ) <= 0.5 ) {\r\n\r\n\t\t\t\tfloat a2 = dot( v, vi );\r\n\t\t\t\tif ( abs( a2 ) <= 0.5 ) {\r\n\r\n\t\t\t\t\tdist = t;\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\t// Finds the point where the ray intersects the plane defined by u and v and checks if this point\r\n\t// falls in the bounds of the circle on that same plane. See above URL for a description of the plane intersection algorithm.\r\n\tbool intersectsCircle( vec3 position, vec3 normal, vec3 u, vec3 v, vec3 rayOrigin, vec3 rayDirection, inout float dist ) {\r\n\r\n\t\tfloat t = dot( position - rayOrigin, normal ) / dot( rayDirection, normal );\r\n\r\n\t\tif ( t > EPSILON ) {\r\n\r\n\t\t\tvec3 hit = rayOrigin + rayDirection * t;\r\n\t\t\tvec3 vi = hit - position;\r\n\r\n\t\t\tfloat a1 = dot( u, vi );\r\n\t\t\tfloat a2 = dot( v, vi );\r\n\r\n\t\t\tif( length( vec2( a1, a2 ) ) <= 0.5 ) {\r\n\r\n\t\t\t\tdist = t;\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n`;\r\n","\r\nexport const texture_sample_functions = /*glsl */`\r\n\r\n\t// add texel fetch functions for texture arrays\r\n\tvec4 texelFetch1D( sampler2DArray tex, int layer, uint index ) {\r\n\r\n\t\tuint width = uint( textureSize( tex, 0 ).x );\r\n\t\tuvec2 uv;\r\n\t\tuv.x = index % width;\r\n\t\tuv.y = index / width;\r\n\r\n\t\treturn texelFetch( tex, ivec3( uv, layer ), 0 );\r\n\r\n\t}\r\n\r\n\tvec4 textureSampleBarycoord( sampler2DArray tex, int layer, vec3 barycoord, uvec3 faceIndices ) {\r\n\r\n\t\treturn\r\n\t\t\tbarycoord.x * texelFetch1D( tex, layer, faceIndices.x ) +\r\n\t\t\tbarycoord.y * texelFetch1D( tex, layer, faceIndices.y ) +\r\n\t\t\tbarycoord.z * texelFetch1D( tex, layer, faceIndices.z );\r\n\r\n\t}\r\n\r\n`;\r\n","export const util_functions = /* glsl */`\r\n\r\n\t// TODO: possibly this should be renamed something related to material or path tracing logic\r\n\r\n\t#ifndef RAY_OFFSET\r\n\t#define RAY_OFFSET 1e-4\r\n\t#endif\r\n\r\n\t// adjust the hit point by the surface normal by a factor of some offset and the\r\n\t// maximum component-wise value of the current point to accommodate floating point\r\n\t// error as values increase.\r\n\tvec3 stepRayOrigin( vec3 rayOrigin, vec3 rayDirection, vec3 offset, float dist ) {\r\n\r\n\t\tvec3 point = rayOrigin + rayDirection * dist;\r\n\t\tvec3 absPoint = abs( point );\r\n\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\r\n\t\treturn point + offset * ( maxPoint + 1.0 ) * RAY_OFFSET;\r\n\r\n\t}\r\n\r\n\t// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md#attenuation\r\n\tvec3 transmissionAttenuation( float dist, vec3 attColor, float attDist ) {\r\n\r\n\t\tvec3 ot = - log( attColor ) / attDist;\r\n\t\treturn exp( - ot * dist );\r\n\r\n\t}\r\n\r\n\tvec3 getHalfVector( vec3 wi, vec3 wo, float eta ) {\r\n\r\n\t\t// get the half vector - assuming if the light incident vector is on the other side\r\n\t\t// of the that it's transmissive.\r\n\t\tvec3 h;\r\n\t\tif ( wi.z > 0.0 ) {\r\n\r\n\t\t\th = normalize( wi + wo );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Scale by the ior ratio to retrieve the appropriate half vector\r\n\t\t\t// From Section 2.2 on computing the transmission half vector:\r\n\t\t\t// https://blog.selfshadow.com/publications/s2015-shading-course/burley/s2015_pbs_disney_bsdf_notes.pdf\r\n\t\t\th = normalize( wi + wo * eta );\r\n\r\n\t\t}\r\n\r\n\t\th *= sign( h.z );\r\n\t\treturn h;\r\n\r\n\t}\r\n\r\n\tvec3 getHalfVector( vec3 a, vec3 b ) {\r\n\r\n\t\treturn normalize( a + b );\r\n\r\n\t}\r\n\r\n\t// The discrepancy between interpolated surface normal and geometry normal can cause issues when a ray\r\n\t// is cast that is on the top side of the geometry normal plane but below the surface normal plane. If\r\n\t// we find a ray like that we ignore it to avoid artifacts.\r\n\t// This function returns if the direction is on the same side of both planes.\r\n\tbool isDirectionValid( vec3 direction, vec3 surfaceNormal, vec3 geometryNormal ) {\r\n\r\n\t\tbool aboveSurfaceNormal = dot( direction, surfaceNormal ) > 0.0;\r\n\t\tbool aboveGeometryNormal = dot( direction, geometryNormal ) > 0.0;\r\n\t\treturn aboveSurfaceNormal == aboveGeometryNormal;\r\n\r\n\t}\r\n\r\n\t// ray sampling x and z are swapped to align with expected background view\r\n\tvec2 equirectDirectionToUv( vec3 direction ) {\r\n\r\n\t\t// from Spherical.setFromCartesianCoords\r\n\t\tvec2 uv = vec2( atan( direction.z, direction.x ), acos( direction.y ) );\r\n\t\tuv /= vec2( 2.0 * PI, PI );\r\n\r\n\t\t// apply adjustments to get values in range [0, 1] and y right side up\r\n\t\tuv.x += 0.5;\r\n\t\tuv.y = 1.0 - uv.y;\r\n\t\treturn uv;\r\n\r\n\t}\r\n\r\n\tvec3 equirectUvToDirection( vec2 uv ) {\r\n\r\n\t\t// undo above adjustments\r\n\t\tuv.x -= 0.5;\r\n\t\tuv.y = 1.0 - uv.y;\r\n\r\n\t\t// from Vector3.setFromSphericalCoords\r\n\t\tfloat theta = uv.x * 2.0 * PI;\r\n\t\tfloat phi = uv.y * PI;\r\n\r\n\t\tfloat sinPhi = sin( phi );\r\n\r\n\t\treturn vec3( sinPhi * cos( theta ), cos( phi ), sinPhi * sin( theta ) );\r\n\r\n\t}\r\n\r\n\t// power heuristic for multiple importance sampling\r\n\tfloat misHeuristic( float a, float b ) {\r\n\r\n\t\tfloat aa = a * a;\r\n\t\tfloat bb = b * b;\r\n\t\treturn aa / ( aa + bb );\r\n\r\n\t}\r\n\r\n\t// tentFilter from Peter Shirley's 'Realistic Ray Tracing (2nd Edition)' book, pg. 60\r\n\t// erichlof/THREE.js-PathTracing-Renderer/\r\n\tfloat tentFilter( float x ) {\r\n\r\n\t\treturn x < 0.5 ? sqrt( 2.0 * x ) - 1.0 : 1.0 - sqrt( 2.0 - ( 2.0 * x ) );\r\n\r\n\t}\r\n`;\r\n","export const pcg_functions = /* glsl */`\r\n\r\n\t// https://www.shadertoy.com/view/wltcRS\r\n\tuvec4 WHITE_NOISE_SEED;\r\n\r\n\tvoid rng_initialize( vec2 p, int frame ) {\r\n\r\n\t\t// white noise seed\r\n\t\tWHITE_NOISE_SEED = uvec4( p, uint( frame ), uint( p.x ) + uint( p.y ) );\r\n\r\n\t}\r\n\r\n\t// https://www.pcg-random.org/\r\n\tvoid pcg4d( inout uvec4 v ) {\r\n\r\n\t\tv = v * 1664525u + 1013904223u;\r\n\t\tv.x += v.y * v.w;\r\n\t\tv.y += v.z * v.x;\r\n\t\tv.z += v.x * v.y;\r\n\t\tv.w += v.y * v.z;\r\n\t\tv = v ^ ( v >> 16u );\r\n\t\tv.x += v.y*v.w;\r\n\t\tv.y += v.z*v.x;\r\n\t\tv.z += v.x*v.y;\r\n\t\tv.w += v.y*v.z;\r\n\r\n\t}\r\n\r\n\t// returns [ 0, 1 ]\r\n\tfloat pcgRand() {\r\n\r\n\t\tpcg4d( WHITE_NOISE_SEED );\r\n\t\treturn float( WHITE_NOISE_SEED.x ) / float( 0xffffffffu );\r\n\r\n\t}\r\n\r\n\tvec2 pcgRand2() {\r\n\r\n\t\tpcg4d( WHITE_NOISE_SEED );\r\n\t\treturn vec2( WHITE_NOISE_SEED.xy ) / float(0xffffffffu);\r\n\r\n\t}\r\n\r\n\tvec3 pcgRand3() {\r\n\r\n\t\tpcg4d( WHITE_NOISE_SEED );\r\n\t\treturn vec3( WHITE_NOISE_SEED.xyz ) / float( 0xffffffffu );\r\n\r\n\t}\r\n\r\n\tvec4 pcgRand4() {\r\n\r\n\t\tpcg4d( WHITE_NOISE_SEED );\r\n\t\treturn vec4( WHITE_NOISE_SEED ) / float( 0xffffffffu );\r\n\r\n\t}\r\n`;\r\n","export const stratified_functions = /* glsl */`\r\n\r\n\tuniform sampler2D stratifiedTexture;\r\n\tuniform sampler2D stratifiedOffsetTexture;\r\n\r\n\tuint sobolPixelIndex = 0u;\r\n\tuint sobolPathIndex = 0u;\r\n\tuint sobolBounceIndex = 0u;\r\n\tvec4 pixelSeed = vec4( 0 );\r\n\r\n\tvec4 rand4( int v ) {\r\n\r\n\t\tivec2 uv = ivec2( v, sobolBounceIndex );\r\n\t\tvec4 stratifiedSample = texelFetch( stratifiedTexture, uv, 0 );\r\n\t\treturn fract( stratifiedSample + pixelSeed.r ); // blue noise + stratified samples\r\n\r\n\t}\r\n\r\n\tvec3 rand3( int v ) {\r\n\r\n\t\treturn rand4( v ).xyz;\r\n\r\n\t}\r\n\r\n\tvec2 rand2( int v ) {\r\n\r\n\t\treturn rand4( v ).xy;\r\n\r\n\t}\r\n\r\n\tfloat rand( int v ) {\r\n\r\n\t\treturn rand4( v ).x;\r\n\r\n\t}\r\n\r\n\tvoid rng_initialize( vec2 screenCoord, int frame ) {\r\n\r\n\t\t// tile the small noise texture across the entire screen\r\n\t\tivec2 noiseSize = ivec2( textureSize( stratifiedOffsetTexture, 0 ) );\r\n\t\tivec2 pixel = ivec2( screenCoord.xy ) % noiseSize;\r\n\t\tvec2 pixelWidth = 1.0 / vec2( noiseSize );\r\n\t\tvec2 uv = vec2( pixel ) * pixelWidth + pixelWidth * 0.5;\r\n\r\n\t\t// note that using \"texelFetch\" here seems to break Android for some reason\r\n\t\tpixelSeed = texture( stratifiedOffsetTexture, uv );\r\n\r\n\t}\r\n\r\n`;\r\n","/*\r\nwi     : incident vector or light vector (pointing toward the light)\r\nwo     : outgoing vector or view vector (pointing towards the camera)\r\nwh     : computed half vector from wo and wi\r\nEval   : Get the color and pdf for a direction\r\nSample : Get the direction, color, and pdf for a sample\r\neta    : Greek character used to denote the \"ratio of ior\"\r\nf0     : Amount of light reflected when looking at a surface head on - \"fresnel 0\"\r\nf90    : Amount of light reflected at grazing angles\r\n*/\r\n\r\nexport const bsdf_functions = /* glsl */`\r\n\r\n\t// diffuse\r\n\tfloat diffuseEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, inout vec3 color ) {\r\n\r\n\t\t// https://schuttejoe.github.io/post/disneybsdf/\r\n\t\tfloat fl = schlickFresnel( wi.z, 0.0 );\r\n\t\tfloat fv = schlickFresnel( wo.z, 0.0 );\r\n\r\n\t\tfloat metalFactor = ( 1.0 - surf.metalness );\r\n\t\tfloat transFactor = ( 1.0 - surf.transmission );\r\n\t\tfloat rr = 0.5 + 2.0 * surf.roughness * fl * fl;\r\n\t\tfloat retro = rr * ( fl + fv + fl * fv * ( rr - 1.0f ) );\r\n\t\tfloat lambert = ( 1.0f - 0.5f * fl ) * ( 1.0f - 0.5f * fv );\r\n\r\n\t\t// TODO: subsurface approx?\r\n\r\n\t\t// float F = evaluateFresnelWeight( dot( wo, wh ), surf.eta, surf.f0 );\r\n\t\tfloat F = disneyFresnel( wo, wi, wh, surf.f0, surf.eta, surf.metalness );\r\n\t\tcolor = ( 1.0 - F ) * transFactor * metalFactor * wi.z * surf.color * ( retro + lambert ) / PI;\r\n\r\n\t\treturn wi.z / PI;\r\n\r\n\t}\r\n\r\n\tvec3 diffuseDirection( vec3 wo, SurfaceRecord surf ) {\r\n\r\n\t\tvec3 lightDirection = sampleSphere( rand2( 11 ) );\r\n\t\tlightDirection.z += 1.0;\r\n\t\tlightDirection = normalize( lightDirection );\r\n\r\n\t\treturn lightDirection;\r\n\r\n\t}\r\n\r\n\t// specular\r\n\tfloat specularEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, inout vec3 color ) {\r\n\r\n\t\t// if roughness is set to 0 then D === NaN which results in black pixels\r\n\t\tfloat metalness = surf.metalness;\r\n\t\tfloat roughness = surf.filteredRoughness;\r\n\r\n\t\tfloat eta = surf.eta;\r\n\t\tfloat f0 = surf.f0;\r\n\r\n\t\tvec3 f0Color = mix( f0 * surf.specularColor * surf.specularIntensity, surf.color, surf.metalness );\r\n\t\tvec3 f90Color = vec3( mix( surf.specularIntensity, 1.0, surf.metalness ) );\r\n\t\tvec3 F = evaluateFresnel( dot( wo, wh ), eta, f0Color, f90Color );\r\n\r\n\t\tvec3 iridescenceF = evalIridescence( 1.0, surf.iridescenceIor, dot( wi, wh ), surf.iridescenceThickness, f0Color );\r\n\t\tF = mix( F, iridescenceF,  surf.iridescence );\r\n\r\n\t\t// PDF\r\n\t\t// See 14.1.1 Microfacet BxDFs in https://www.pbr-book.org/\r\n\t\tfloat incidentTheta = acos( wo.z );\r\n\t\tfloat G = ggxShadowMaskG2( wi, wo, roughness );\r\n\t\tfloat D = ggxDistribution( wh, roughness );\r\n\t\tfloat G1 = ggxShadowMaskG1( incidentTheta, roughness );\r\n\t\tfloat ggxPdf = D * G1 * max( 0.0, abs( dot( wo, wh ) ) ) / abs ( wo.z );\r\n\r\n\t\tcolor = wi.z * F * G * D / ( 4.0 * abs( wi.z * wo.z ) );\r\n\t\treturn ggxPdf / ( 4.0 * dot( wo, wh ) );\r\n\r\n\t}\r\n\r\n\tvec3 specularDirection( vec3 wo, SurfaceRecord surf ) {\r\n\r\n\t\t// sample ggx vndf distribution which gives a new normal\r\n\t\tfloat roughness = surf.filteredRoughness;\r\n\t\tvec3 halfVector = ggxDirection(\r\n\t\t\two,\r\n\t\t\tvec2( roughness ),\r\n\t\t\trand2( 12 )\r\n\t\t);\r\n\r\n\t\t// apply to new ray by reflecting off the new normal\r\n\t\treturn - reflect( wo, halfVector );\r\n\r\n\t}\r\n\r\n\r\n\t// transmission\r\n\t/*\r\n\tfloat transmissionEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, inout vec3 color ) {\r\n\r\n\t\t// See section 4.2 in https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\r\n\r\n\t\tfloat filteredRoughness = surf.filteredRoughness;\r\n\t\tfloat eta = surf.eta;\r\n\t\tbool frontFace = surf.frontFace;\r\n\t\tbool thinFilm = surf.thinFilm;\r\n\r\n\t\tcolor = surf.transmission * surf.color;\r\n\r\n\t\tfloat denom = pow( eta * dot( wi, wh ) + dot( wo, wh ), 2.0 );\r\n\t\treturn ggxPDF( wo, wh, filteredRoughness ) / denom;\r\n\r\n\t}\r\n\r\n\tvec3 transmissionDirection( vec3 wo, SurfaceRecord surf ) {\r\n\r\n\t\tfloat filteredRoughness = surf.filteredRoughness;\r\n\t\tfloat eta = surf.eta;\r\n\t\tbool frontFace = surf.frontFace;\r\n\r\n\t\t// sample ggx vndf distribution which gives a new normal\r\n\t\tvec3 halfVector = ggxDirection(\r\n\t\t\two,\r\n\t\t\tvec2( filteredRoughness ),\r\n\t\t\trand2( 13 )\r\n\t\t);\r\n\r\n\t\tvec3 lightDirection = refract( normalize( - wo ), halfVector, eta );\r\n\t\tif ( surf.thinFilm ) {\r\n\r\n\t\t\tlightDirection = - refract( normalize( - lightDirection ), - vec3( 0.0, 0.0, 1.0 ), 1.0 / eta );\r\n\r\n\t\t}\r\n\r\n\t\treturn normalize( lightDirection );\r\n\r\n\t}\r\n\t*/\r\n\r\n\t// TODO: This is just using a basic cosine-weighted specular distribution with an\r\n\t// incorrect PDF value at the moment. Update it to correctly use a GGX distribution\r\n\tfloat transmissionEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, inout vec3 color ) {\r\n\r\n\t\tcolor = surf.transmission * surf.color;\r\n\r\n\t\t// PDF\r\n\t\t// float F = evaluateFresnelWeight( dot( wo, wh ), surf.eta, surf.f0 );\r\n\t\t// float F = disneyFresnel( wo, wi, wh, surf.f0, surf.eta, surf.metalness );\r\n\t\t// if ( F >= 1.0 ) {\r\n\r\n\t\t// \treturn 0.0;\r\n\r\n\t\t// }\r\n\r\n\t\t// return 1.0 / ( 1.0 - F );\r\n\r\n\t\t// reverted to previous to transmission. The above was causing black pixels\r\n\t\tfloat eta = surf.eta;\r\n\t\tfloat f0 = surf.f0;\r\n\t\tfloat cosTheta = min( wo.z, 1.0 );\r\n\t\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\r\n\t\tfloat reflectance = schlickFresnel( cosTheta, f0 );\r\n\t\tbool cannotRefract = eta * sinTheta > 1.0;\r\n\t\tif ( cannotRefract ) {\r\n\r\n\t\t\treturn 0.0;\r\n\r\n\t\t}\r\n\r\n\t\treturn 1.0 / ( 1.0 - reflectance );\r\n\r\n\t}\r\n\r\n\tvec3 transmissionDirection( vec3 wo, SurfaceRecord surf ) {\r\n\r\n\t\tfloat roughness = surf.filteredRoughness;\r\n\t\tfloat eta = surf.eta;\r\n\t\tvec3 halfVector = normalize( vec3( 0.0, 0.0, 1.0 ) + sampleSphere( rand2( 13 ) ) * roughness );\r\n\t\tvec3 lightDirection = refract( normalize( - wo ), halfVector, eta );\r\n\r\n\t\tif ( surf.thinFilm ) {\r\n\r\n\t\t\tlightDirection = - refract( normalize( - lightDirection ), - vec3( 0.0, 0.0, 1.0 ), 1.0 / eta );\r\n\r\n\t\t}\r\n\t\treturn normalize( lightDirection );\r\n\r\n\t}\r\n\r\n\t// clearcoat\r\n\tfloat clearcoatEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, inout vec3 color ) {\r\n\r\n\t\tfloat ior = 1.5;\r\n\t\tfloat f0 = iorRatioToF0( ior );\r\n\t\tbool frontFace = surf.frontFace;\r\n\t\tfloat roughness = surf.filteredClearcoatRoughness;\r\n\r\n\t\tfloat eta = frontFace ? 1.0 / ior : ior;\r\n\t\tfloat G = ggxShadowMaskG2( wi, wo, roughness );\r\n\t\tfloat D = ggxDistribution( wh, roughness );\r\n\t\tfloat F = schlickFresnel( dot( wi, wh ), f0 );\r\n\r\n\t\tfloat fClearcoat = F * D * G / ( 4.0 * abs( wi.z * wo.z ) );\r\n\t\tcolor = color * ( 1.0 - surf.clearcoat * F ) + fClearcoat * surf.clearcoat * wi.z;\r\n\r\n\t\t// PDF\r\n\t\t// See equation (27) in http://jcgt.org/published/0003/02/03/\r\n\t\treturn ggxPDF( wo, wh, roughness ) / ( 4.0 * dot( wi, wh ) );\r\n\r\n\t}\r\n\r\n\tvec3 clearcoatDirection( vec3 wo, SurfaceRecord surf ) {\r\n\r\n\t\t// sample ggx vndf distribution which gives a new normal\r\n\t\tfloat roughness = surf.filteredClearcoatRoughness;\r\n\t\tvec3 halfVector = ggxDirection(\r\n\t\t\two,\r\n\t\t\tvec2( roughness ),\r\n\t\t\trand2( 14 )\r\n\t\t);\r\n\r\n\t\t// apply to new ray by reflecting off the new normal\r\n\t\treturn - reflect( wo, halfVector );\r\n\r\n\t}\r\n\r\n\t// sheen\r\n\tvec3 sheenColor( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf ) {\r\n\r\n\t\tfloat cosThetaO = saturateCos( wo.z );\r\n\t\tfloat cosThetaI = saturateCos( wi.z );\r\n\t\tfloat cosThetaH = wh.z;\r\n\r\n\t\tfloat D = velvetD( cosThetaH, surf.sheenRoughness );\r\n\t\tfloat G = velvetG( cosThetaO, cosThetaI, surf.sheenRoughness );\r\n\r\n\t\t// See equation (1) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\r\n\t\tvec3 color = surf.sheenColor;\r\n\t\tcolor *= D * G / ( 4.0 * abs( cosThetaO * cosThetaI ) );\r\n\t\tcolor *= wi.z;\r\n\r\n\t\treturn color;\r\n\r\n\t}\r\n\r\n\t// bsdf\r\n\tvoid getLobeWeights(\r\n\t\tvec3 wo, vec3 wi, vec3 wh, vec3 clearcoatWo, SurfaceRecord surf,\r\n\t\tinout float diffuseWeight, inout float specularWeight, inout float transmissionWeight, inout float clearcoatWeight\r\n\t) {\r\n\r\n\t\tfloat metalness = surf.metalness;\r\n\t\tfloat transmission = surf.transmission;\r\n\t\t// float fEstimate = evaluateFresnelWeight( dot( wo, wh ), surf.eta, surf.f0 );\r\n\t\tfloat fEstimate = disneyFresnel( wo, wi, wh, surf.f0, surf.eta, surf.metalness );\r\n\r\n\t\tfloat transSpecularProb = mix( max( 0.25, fEstimate ), 1.0, metalness );\r\n\t\tfloat diffSpecularProb = 0.5 + 0.5 * metalness;\r\n\r\n\t\tdiffuseWeight = ( 1.0 - transmission ) * ( 1.0 - diffSpecularProb );\r\n\t\tspecularWeight = transmission * transSpecularProb + ( 1.0 - transmission ) * diffSpecularProb;\r\n\t\ttransmissionWeight = transmission * ( 1.0 - transSpecularProb );\r\n\t\tclearcoatWeight = surf.clearcoat * schlickFresnel( clearcoatWo.z, 0.04 );\r\n\r\n\t\tfloat totalWeight = diffuseWeight + specularWeight + transmissionWeight + clearcoatWeight;\r\n\t\tdiffuseWeight /= totalWeight;\r\n\t\tspecularWeight /= totalWeight;\r\n\t\ttransmissionWeight /= totalWeight;\r\n\t\tclearcoatWeight /= totalWeight;\r\n\t}\r\n\r\n\tfloat bsdfEval(\r\n\t\tvec3 wo, vec3 clearcoatWo, vec3 wi, vec3 clearcoatWi, SurfaceRecord surf,\r\n\t\tfloat diffuseWeight, float specularWeight, float transmissionWeight, float clearcoatWeight, inout float specularPdf, inout vec3 color\r\n\t) {\r\n\r\n\t\tfloat metalness = surf.metalness;\r\n\t\tfloat transmission = surf.transmission;\r\n\r\n\t\tfloat spdf = 0.0;\r\n\t\tfloat dpdf = 0.0;\r\n\t\tfloat tpdf = 0.0;\r\n\t\tfloat cpdf = 0.0;\r\n\t\tcolor = vec3( 0.0 );\r\n\r\n\t\tvec3 halfVector = getHalfVector( wi, wo, surf.eta );\r\n\r\n\t\t// diffuse\r\n\t\tif ( diffuseWeight > 0.0 && wi.z > 0.0 ) {\r\n\r\n\t\t\tdpdf = diffuseEval( wo, wi, halfVector, surf, color );\r\n\t\t\tcolor *= 1.0 - surf.transmission;\r\n\r\n\t\t}\r\n\r\n\t\t// ggx specular\r\n\t\tif ( specularWeight > 0.0 && wi.z > 0.0 ) {\r\n\r\n\t\t\tvec3 outColor;\r\n\t\t\tspdf = specularEval( wo, wi, getHalfVector( wi, wo ), surf, outColor );\r\n\t\t\tcolor += outColor;\r\n\r\n\t\t}\r\n\r\n\t\t// transmission\r\n\t\tif ( transmissionWeight > 0.0 && wi.z < 0.0 ) {\r\n\r\n\t\t\ttpdf = transmissionEval( wo, wi, halfVector, surf, color );\r\n\r\n\t\t}\r\n\r\n\t\t// sheen\r\n\t\tcolor *= mix( 1.0, sheenAlbedoScaling( wo, wi, surf ), surf.sheen );\r\n\t\tcolor += sheenColor( wo, wi, halfVector, surf ) * surf.sheen;\r\n\r\n\t\t// clearcoat\r\n\t\tif ( clearcoatWi.z >= 0.0 && clearcoatWeight > 0.0 ) {\r\n\r\n\t\t\tvec3 clearcoatHalfVector = getHalfVector( clearcoatWo, clearcoatWi );\r\n\t\t\tcpdf = clearcoatEval( clearcoatWo, clearcoatWi, clearcoatHalfVector, surf, color );\r\n\r\n\t\t}\r\n\r\n\t\tfloat pdf =\r\n\t\t\tdpdf * diffuseWeight\r\n\t\t\t+ spdf * specularWeight\r\n\t\t\t+ tpdf * transmissionWeight\r\n\t\t\t+ cpdf * clearcoatWeight;\r\n\r\n\t\t// retrieve specular rays for the shadows flag\r\n\t\tspecularPdf = spdf * specularWeight + cpdf * clearcoatWeight;\r\n\r\n\t\treturn pdf;\r\n\r\n\t}\r\n\r\n\tfloat bsdfResult( vec3 worldWo, vec3 worldWi, SurfaceRecord surf, inout vec3 color ) {\r\n\r\n\t\tif ( surf.volumeParticle ) {\r\n\r\n\t\t\tcolor = surf.color / ( 4.0 * PI );\r\n\t\t\treturn 1.0 / ( 4.0 * PI );\r\n\r\n\t\t}\r\n\r\n\t\tvec3 wo = normalize( surf.normalInvBasis * worldWo );\r\n\t\tvec3 wi = normalize( surf.normalInvBasis * worldWi );\r\n\r\n\t\tvec3 clearcoatWo = normalize( surf.clearcoatInvBasis * worldWo );\r\n\t\tvec3 clearcoatWi = normalize( surf.clearcoatInvBasis * worldWi );\r\n\r\n\t\tvec3 wh = getHalfVector( wo, wi, surf.eta );\r\n\t\tfloat diffuseWeight;\r\n\t\tfloat specularWeight;\r\n\t\tfloat transmissionWeight;\r\n\t\tfloat clearcoatWeight;\r\n\t\tgetLobeWeights( wo, wi, wh, clearcoatWo, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );\r\n\r\n\t\tfloat specularPdf;\r\n\t\treturn bsdfEval( wo, clearcoatWo, wi, clearcoatWi, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight, specularPdf, color );\r\n\r\n\t}\r\n\r\n\tScatterRecord bsdfSample( vec3 worldWo, SurfaceRecord surf ) {\r\n\r\n\t\tif ( surf.volumeParticle ) {\r\n\r\n\t\t\tScatterRecord sampleRec;\r\n\t\t\tsampleRec.specularPdf = 0.0;\r\n\t\t\tsampleRec.pdf = 1.0 / ( 4.0 * PI );\r\n\t\t\tsampleRec.direction = sampleSphere( rand2( 16 ) );\r\n\t\t\tsampleRec.color = surf.color / ( 4.0 * PI );\r\n\t\t\treturn sampleRec;\r\n\r\n\t\t}\r\n\r\n\t\tvec3 wo = normalize( surf.normalInvBasis * worldWo );\r\n\t\tvec3 clearcoatWo = normalize( surf.clearcoatInvBasis * worldWo );\r\n\t\tmat3 normalBasis = surf.normalBasis;\r\n\t\tmat3 invBasis = surf.normalInvBasis;\r\n\t\tmat3 clearcoatNormalBasis = surf.clearcoatBasis;\r\n\t\tmat3 clearcoatInvBasis = surf.clearcoatInvBasis;\r\n\r\n\t\tfloat diffuseWeight;\r\n\t\tfloat specularWeight;\r\n\t\tfloat transmissionWeight;\r\n\t\tfloat clearcoatWeight;\r\n\t\t// using normal and basically-reflected ray since we don't have proper half vector here\r\n\t\tgetLobeWeights( wo, wo, vec3( 0, 0, 1 ), clearcoatWo, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );\r\n\r\n\t\tfloat pdf[4];\r\n\t\tpdf[0] = diffuseWeight;\r\n\t\tpdf[1] = specularWeight;\r\n\t\tpdf[2] = transmissionWeight;\r\n\t\tpdf[3] = clearcoatWeight;\r\n\r\n\t\tfloat cdf[4];\r\n\t\tcdf[0] = pdf[0];\r\n\t\tcdf[1] = pdf[1] + cdf[0];\r\n\t\tcdf[2] = pdf[2] + cdf[1];\r\n\t\tcdf[3] = pdf[3] + cdf[2];\r\n\r\n\t\tif( cdf[3] != 0.0 ) {\r\n\r\n\t\t\tfloat invMaxCdf = 1.0 / cdf[3];\r\n\t\t\tcdf[0] *= invMaxCdf;\r\n\t\t\tcdf[1] *= invMaxCdf;\r\n\t\t\tcdf[2] *= invMaxCdf;\r\n\t\t\tcdf[3] *= invMaxCdf;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcdf[0] = 1.0;\r\n\t\t\tcdf[1] = 0.0;\r\n\t\t\tcdf[2] = 0.0;\r\n\t\t\tcdf[3] = 0.0;\r\n\r\n\t\t}\r\n\r\n\t\tvec3 wi;\r\n\t\tvec3 clearcoatWi;\r\n\r\n\t\tfloat r = rand( 15 );\r\n\t\tif ( r <= cdf[0] ) { // diffuse\r\n\r\n\t\t\twi = diffuseDirection( wo, surf );\r\n\t\t\tclearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );\r\n\r\n\t\t} else if ( r <= cdf[1] ) { // specular\r\n\r\n\t\t\twi = specularDirection( wo, surf );\r\n\t\t\tclearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );\r\n\r\n\t\t} else if ( r <= cdf[2] ) { // transmission / refraction\r\n\r\n\t\t\twi = transmissionDirection( wo, surf );\r\n\t\t\tclearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );\r\n\r\n\t\t} else if ( r <= cdf[3] ) { // clearcoat\r\n\r\n\t\t\tclearcoatWi = clearcoatDirection( clearcoatWo, surf );\r\n\t\t\twi = normalize( invBasis * normalize( clearcoatNormalBasis * clearcoatWi ) );\r\n\r\n\t\t}\r\n\r\n\t\tScatterRecord result;\r\n\t\tresult.pdf = bsdfEval( wo, clearcoatWo, wi, clearcoatWi, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight, result.specularPdf, result.color );\r\n\t\tresult.direction = normalize( surf.normalBasis * wi );\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n`;\r\n","export const fog_functions = /* glsl */`\r\n\r\n\t// returns the hit distance given the material density\r\n\tfloat intersectFogVolume( Material material, float u ) {\r\n\r\n\t\t// https://raytracing.github.io/books/RayTracingTheNextWeek.html#volumes/constantdensitymediums\r\n\t\treturn material.opacity == 0.0 ? INFINITY : ( - 1.0 / material.opacity ) * log( u );\r\n\r\n\t}\r\n\r\n\tScatterRecord sampleFogVolume( SurfaceRecord surf, vec2 uv ) {\r\n\r\n\t\tScatterRecord sampleRec;\r\n\t\tsampleRec.specularPdf = 0.0;\r\n\t\tsampleRec.pdf = 1.0 / ( 2.0 * PI );\r\n\t\tsampleRec.direction = sampleSphere( uv );\r\n\t\tsampleRec.color = surf.color;\r\n\t\treturn sampleRec;\r\n\r\n\t}\r\n\r\n`;\r\n","export const ggx_functions = /* glsl */`\r\n\r\n\t// The GGX functions provide sampling and distribution information for normals as output so\r\n\t// in order to get probability of scatter direction the half vector must be computed and provided.\r\n\t// [0] https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\r\n\t// [1] https://hal.archives-ouvertes.fr/hal-01509746/document\r\n\t// [2] http://jcgt.org/published/0007/04/01/\r\n\t// [4] http://jcgt.org/published/0003/02/03/\r\n\r\n\t// trowbridge-reitz === GGX === GTR\r\n\r\n\tvec3 ggxDirection( vec3 incidentDir, vec2 roughness, vec2 uv ) {\r\n\r\n\t\t// TODO: try GGXVNDF implementation from reference [2], here. Needs to update ggxDistribution\r\n\t\t// function below, as well\r\n\r\n\t\t// Implementation from reference [1]\r\n\t\t// stretch view\r\n\t\tvec3 V = normalize( vec3( roughness * incidentDir.xy, incidentDir.z ) );\r\n\r\n\t\t// orthonormal basis\r\n\t\tvec3 T1 = ( V.z < 0.9999 ) ? normalize( cross( V, vec3( 0.0, 0.0, 1.0 ) ) ) : vec3( 1.0, 0.0, 0.0 );\r\n\t\tvec3 T2 = cross( T1, V );\r\n\r\n\t\t// sample point with polar coordinates (r, phi)\r\n\t\tfloat a = 1.0 / ( 1.0 + V.z );\r\n\t\tfloat r = sqrt( uv.x );\r\n\t\tfloat phi = ( uv.y < a ) ? uv.y / a * PI : PI + ( uv.y - a ) / ( 1.0 - a ) * PI;\r\n\t\tfloat P1 = r * cos( phi );\r\n\t\tfloat P2 = r * sin( phi ) * ( ( uv.y < a ) ? 1.0 : V.z );\r\n\r\n\t\t// compute normal\r\n\t\tvec3 N = P1 * T1 + P2 * T2 + V * sqrt( max( 0.0, 1.0 - P1 * P1 - P2 * P2 ) );\r\n\r\n\t\t// unstretch\r\n\t\tN = normalize( vec3( roughness * N.xy, max( 0.0, N.z ) ) );\r\n\r\n\t\treturn N;\r\n\r\n\t}\r\n\r\n\t// Below are PDF and related functions for use in a Monte Carlo path tracer\r\n\t// as specified in Appendix B of the following paper\r\n\t// See equation (34) from reference [0]\r\n\tfloat ggxLamda( float theta, float roughness ) {\r\n\r\n\t\tfloat tanTheta = tan( theta );\r\n\t\tfloat tanTheta2 = tanTheta * tanTheta;\r\n\t\tfloat alpha2 = roughness * roughness;\r\n\r\n\t\tfloat numerator = - 1.0 + sqrt( 1.0 + alpha2 * tanTheta2 );\r\n\t\treturn numerator / 2.0;\r\n\r\n\t}\r\n\r\n\t// See equation (34) from reference [0]\r\n\tfloat ggxShadowMaskG1( float theta, float roughness ) {\r\n\r\n\t\treturn 1.0 / ( 1.0 + ggxLamda( theta, roughness ) );\r\n\r\n\t}\r\n\r\n\t// See equation (125) from reference [4]\r\n\tfloat ggxShadowMaskG2( vec3 wi, vec3 wo, float roughness ) {\r\n\r\n\t\tfloat incidentTheta = acos( wi.z );\r\n\t\tfloat scatterTheta = acos( wo.z );\r\n\t\treturn 1.0 / ( 1.0 + ggxLamda( incidentTheta, roughness ) + ggxLamda( scatterTheta, roughness ) );\r\n\r\n\t}\r\n\r\n\t// See equation (33) from reference [0]\r\n\tfloat ggxDistribution( vec3 halfVector, float roughness ) {\r\n\r\n\t\tfloat a2 = roughness * roughness;\r\n\t\ta2 = max( EPSILON, a2 );\r\n\t\tfloat cosTheta = halfVector.z;\r\n\t\tfloat cosTheta4 = pow( cosTheta, 4.0 );\r\n\r\n\t\tif ( cosTheta == 0.0 ) return 0.0;\r\n\r\n\t\tfloat theta = acosSafe( halfVector.z );\r\n\t\tfloat tanTheta = tan( theta );\r\n\t\tfloat tanTheta2 = pow( tanTheta, 2.0 );\r\n\r\n\t\tfloat denom = PI * cosTheta4 * pow( a2 + tanTheta2, 2.0 );\r\n\t\treturn ( a2 / denom );\r\n\r\n\t}\r\n\r\n\t// See equation (3) from reference [2]\r\n\tfloat ggxPDF( vec3 wi, vec3 halfVector, float roughness ) {\r\n\r\n\t\tfloat incidentTheta = acos( wi.z );\r\n\t\tfloat D = ggxDistribution( halfVector, roughness );\r\n\t\tfloat G1 = ggxShadowMaskG1( incidentTheta, roughness );\r\n\r\n\t\treturn D * G1 * max( 0.0, dot( wi, halfVector ) ) / wi.z;\r\n\r\n\t}\r\n\r\n`;\r\n","export const iridescence_functions = /* glsl */`\r\n\r\n\t// XYZ to sRGB color space\r\n\tconst mat3 XYZ_TO_REC709 = mat3(\r\n\t\t3.2404542, -0.9692660,  0.0556434,\r\n\t\t-1.5371385,  1.8760108, -0.2040259,\r\n\t\t-0.4985314,  0.0415560,  1.0572252\r\n\t);\r\n\r\n\tvec3 fresnel0ToIor( vec3 fresnel0 ) {\r\n\r\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\r\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\r\n\r\n\t}\r\n\r\n\t// Conversion FO/IOR\r\n\tvec3 iorToFresnel0( vec3 transmittedIor, float incidentIor ) {\r\n\r\n\t\treturn square( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\r\n\r\n\t}\r\n\r\n\t// ior is a value between 1.0 and 3.0. 1.0 is air interface\r\n\tfloat iorToFresnel0( float transmittedIor, float incidentIor ) {\r\n\r\n\t\treturn square( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ) );\r\n\r\n\t}\r\n\r\n\t// Fresnel equations for dielectric/dielectric interfaces. See https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\r\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\r\n\r\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\r\n\r\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\r\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\r\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\r\n\r\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - square( phase ) * var );\r\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * square( phase ) );\r\n\t\txyz /= 1.0685e-7;\r\n\r\n\t\tvec3 srgb = XYZ_TO_REC709 * xyz;\r\n\t\treturn srgb;\r\n\r\n\t}\r\n\r\n\t// See Section 4. Analytic Spectral Integration, A Practical Extension to Microfacet Theory for the Modeling of Varying Iridescence, https://hal.archives-ouvertes.fr/hal-01518344/document\r\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\r\n\r\n\t\tvec3 I;\r\n\r\n\t\t// Force iridescenceIor -> outsideIOR when thinFilmThickness -> 0.0\r\n\t\tfloat iridescenceIor = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\r\n\r\n\t\t// Evaluate the cosTheta on the base layer (Snell law)\r\n\t\tfloat sinTheta2Sq = square( outsideIOR / iridescenceIor ) * ( 1.0 - square( cosTheta1 ) );\r\n\r\n\t\t// Handle TIR:\r\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\r\n\t\tif ( cosTheta2Sq < 0.0 ) {\r\n\r\n\t\t\treturn vec3( 1.0 );\r\n\r\n\t\t}\r\n\r\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\r\n\r\n\t\t// First interface\r\n\t\tfloat R0 = iorToFresnel0( iridescenceIor, outsideIOR );\r\n\t\tfloat R12 = schlickFresnel( cosTheta1, R0 );\r\n\t\tfloat R21 = R12;\r\n\t\tfloat T121 = 1.0 - R12;\r\n\t\tfloat phi12 = 0.0;\r\n\t\tif ( iridescenceIor < outsideIOR ) {\r\n\r\n\t\t\tphi12 = PI;\r\n\r\n\t\t}\r\n\r\n\t\tfloat phi21 = PI - phi12;\r\n\r\n\t\t// Second interface\r\n\t\tvec3 baseIOR = fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) ); // guard against 1.0\r\n\t\tvec3 R1 = iorToFresnel0( baseIOR, iridescenceIor );\r\n\t\tvec3 R23 = schlickFresnel( cosTheta2, R1 );\r\n\t\tvec3 phi23 = vec3( 0.0 );\r\n\t\tif ( baseIOR[0] < iridescenceIor ) {\r\n\r\n\t\t\tphi23[ 0 ] = PI;\r\n\r\n\t\t}\r\n\r\n\t\tif ( baseIOR[1] < iridescenceIor ) {\r\n\r\n\t\t\tphi23[ 1 ] = PI;\r\n\r\n\t\t}\r\n\r\n\t\tif ( baseIOR[2] < iridescenceIor ) {\r\n\r\n\t\t\tphi23[ 2 ] = PI;\r\n\r\n\t\t}\r\n\r\n\t\t// Phase shift\r\n\t\tfloat OPD = 2.0 * iridescenceIor * thinFilmThickness * cosTheta2;\r\n\t\tvec3 phi = vec3( phi21 ) + phi23;\r\n\r\n\t\t// Compound terms\r\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\r\n\t\tvec3 r123 = sqrt( R123 );\r\n\t\tvec3 Rs = square( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\r\n\r\n\t\t// Reflectance term for m = 0 (DC term amplitude)\r\n\t\tvec3 C0 = R12 + Rs;\r\n\t\tI = C0;\r\n\r\n\t\t// Reflectance term for m > 0 (pairs of diracs)\r\n\t\tvec3 Cm = Rs - T121;\r\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\r\n\r\n\t\t\tCm *= r123;\r\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\r\n\t\t\tI += Cm * Sm;\r\n\r\n\t\t}\r\n\r\n\t\t// Since out of gamut colors might be produced, negative color values are clamped to 0.\r\n\t\treturn max( I, vec3( 0.0 ) );\r\n\r\n\t}\r\n\r\n`;\r\n","export const sheen_functions = /* glsl */`\r\n\r\n\t// See equation (2) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\r\n\tfloat velvetD( float cosThetaH, float roughness ) {\r\n\r\n\t\tfloat alpha = max( roughness, 0.07 );\r\n\t\talpha = alpha * alpha;\r\n\r\n\t\tfloat invAlpha = 1.0 / alpha;\r\n\r\n\t\tfloat sqrCosThetaH = cosThetaH * cosThetaH;\r\n\t\tfloat sinThetaH = max( 1.0 - sqrCosThetaH, 0.001 );\r\n\r\n\t\treturn ( 2.0 + invAlpha ) * pow( sinThetaH, 0.5 * invAlpha ) / ( 2.0 * PI );\r\n\r\n\t}\r\n\r\n\tfloat velvetParamsInterpolate( int i, float oneMinusAlphaSquared ) {\r\n\r\n\t\tconst float p0[5] = float[5]( 25.3245, 3.32435, 0.16801, -1.27393, -4.85967 );\r\n\t\tconst float p1[5] = float[5]( 21.5473, 3.82987, 0.19823, -1.97760, -4.32054 );\r\n\r\n\t\treturn mix( p1[i], p0[i], oneMinusAlphaSquared );\r\n\r\n\t}\r\n\r\n\tfloat velvetL( float x, float alpha ) {\r\n\r\n\t\tfloat oneMinusAlpha = 1.0 - alpha;\r\n\t\tfloat oneMinusAlphaSquared = oneMinusAlpha * oneMinusAlpha;\r\n\r\n\t\tfloat a = velvetParamsInterpolate( 0, oneMinusAlphaSquared );\r\n\t\tfloat b = velvetParamsInterpolate( 1, oneMinusAlphaSquared );\r\n\t\tfloat c = velvetParamsInterpolate( 2, oneMinusAlphaSquared );\r\n\t\tfloat d = velvetParamsInterpolate( 3, oneMinusAlphaSquared );\r\n\t\tfloat e = velvetParamsInterpolate( 4, oneMinusAlphaSquared );\r\n\r\n\t\treturn a / ( 1.0 + b * pow( abs( x ), c ) ) + d * x + e;\r\n\r\n\t}\r\n\r\n\t// See equation (3) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\r\n\tfloat velvetLambda( float cosTheta, float alpha ) {\r\n\r\n\t\treturn abs( cosTheta ) < 0.5 ? exp( velvetL( cosTheta, alpha ) ) : exp( 2.0 * velvetL( 0.5, alpha ) - velvetL( 1.0 - cosTheta, alpha ) );\r\n\r\n\t}\r\n\r\n\t// See Section 3, Shadowing Term, in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\r\n\tfloat velvetG( float cosThetaO, float cosThetaI, float roughness ) {\r\n\r\n\t\tfloat alpha = max( roughness, 0.07 );\r\n\t\talpha = alpha * alpha;\r\n\r\n\t\treturn 1.0 / ( 1.0 + velvetLambda( cosThetaO, alpha ) + velvetLambda( cosThetaI, alpha ) );\r\n\r\n\t}\r\n\r\n\tfloat directionalAlbedoSheen( float cosTheta, float alpha ) {\r\n\r\n\t\tcosTheta = saturate( cosTheta );\r\n\r\n\t\tfloat c = 1.0 - cosTheta;\r\n\t\tfloat c3 = c * c * c;\r\n\r\n\t\treturn 0.65584461 * c3 + 1.0 / ( 4.16526551 + exp( -7.97291361 * sqrt( alpha ) + 6.33516894 ) );\r\n\r\n\t}\r\n\r\n\tfloat sheenAlbedoScaling( vec3 wo, vec3 wi, SurfaceRecord surf ) {\r\n\r\n\t\tfloat alpha = max( surf.sheenRoughness, 0.07 );\r\n\t\talpha = alpha * alpha;\r\n\r\n\t\tfloat maxSheenColor = max( max( surf.sheenColor.r, surf.sheenColor.g ), surf.sheenColor.b );\r\n\r\n\t\tfloat eWo = directionalAlbedoSheen( saturateCos( wo.z ), alpha );\r\n\t\tfloat eWi = directionalAlbedoSheen( saturateCos( wi.z ), alpha );\r\n\r\n\t\treturn min( 1.0 - maxSheenColor * eWo, 1.0 - maxSheenColor * eWi );\r\n\r\n\t}\r\n\r\n\t// See Section 5, Layering, in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\r\n\tfloat sheenAlbedoScaling( vec3 wo, SurfaceRecord surf ) {\r\n\r\n\t\tfloat alpha = max( surf.sheenRoughness, 0.07 );\r\n\t\talpha = alpha * alpha;\r\n\r\n\t\tfloat maxSheenColor = max( max( surf.sheenColor.r, surf.sheenColor.g ), surf.sheenColor.b );\r\n\r\n\t\tfloat eWo = directionalAlbedoSheen( saturateCos( wo.z ), alpha );\r\n\r\n\t\treturn 1.0 - maxSheenColor * eWo;\r\n\r\n\t}\r\n\r\n`;\r\n","export const inside_fog_volume_function = /* glsl */`\r\n\r\n#ifndef FOG_CHECK_ITERATIONS\r\n#define FOG_CHECK_ITERATIONS 30\r\n#endif\r\n\r\n// returns whether the given material is a fog material or not\r\nbool isMaterialFogVolume( sampler2D materials, uint materialIndex ) {\r\n\r\n\tuint i = materialIndex * 45u;\r\n\tvec4 s14 = texelFetch1D( materials, i + 14u );\r\n\treturn bool( int( s14.b ) & 4 );\r\n\r\n}\r\n\r\n// returns true if we're within the first fog volume we hit\r\nbool bvhIntersectFogVolumeHit(\r\n\tvec3 rayOrigin, vec3 rayDirection,\r\n\tusampler2D materialIndexAttribute, sampler2D materials,\r\n\tinout Material material\r\n) {\r\n\r\n\tmaterial.fogVolume = false;\r\n\r\n\tfor ( int i = 0; i < FOG_CHECK_ITERATIONS; i ++ ) {\r\n\r\n\t\t// find nearest hit\r\n\t\tuvec4 faceIndices = uvec4( 0u );\r\n\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\r\n\t\tvec3 barycoord = vec3( 0.0 );\r\n\t\tfloat side = 1.0;\r\n\t\tfloat dist = 0.0;\r\n\t\tbool hit = bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist );\r\n\t\tif ( hit ) {\r\n\r\n\t\t\t// if it's a fog volume return whether we hit the front or back face\r\n\t\t\tuint materialIndex = uTexelFetch1D( materialIndexAttribute, faceIndices.x ).r;\r\n\t\t\tif ( isMaterialFogVolume( materials, materialIndex ) ) {\r\n\r\n\t\t\t\tmaterial = readMaterialInfo( materials, materialIndex );\r\n\t\t\t\treturn side == - 1.0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// move the ray forward\r\n\t\t\t\trayOrigin = stepRayOrigin( rayOrigin, rayDirection, - faceNormal, dist );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn false;\r\n\r\n}\r\n\r\n`;\r\n","export const ray_any_hit_function = /* glsl */`\r\n\r\n\tbool bvhIntersectAnyHit(\r\n\t\tvec3 rayOrigin, vec3 rayDirection,\r\n\r\n\t\t// output variables\r\n\t\tinout float side, inout float dist\r\n\t) {\r\n\r\n\t\tuvec4 faceIndices;\r\n\t\tvec3 faceNormal;\r\n\t\tvec3 barycoord;\r\n\r\n\t\t// stack needs to be twice as long as the deepest tree we expect because\r\n\t\t// we push both the left and right child onto the stack every traversal\r\n\t\tint ptr = 0;\r\n\t\tuint stack[ 60 ];\r\n\t\tstack[ 0 ] = 0u;\r\n\r\n\t\tfloat triangleDistance = 1e20;\r\n\t\twhile ( ptr > - 1 && ptr < 60 ) {\r\n\r\n\t\t\tuint currNodeIndex = stack[ ptr ];\r\n\t\t\tptr --;\r\n\r\n\t\t\t// check if we intersect the current bounds\r\n\t\t\tfloat boundsHitDistance = intersectsBVHNodeBounds( rayOrigin, rayDirection, bvh, currNodeIndex );\r\n\t\t\tif ( boundsHitDistance == INFINITY ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvec2 boundsInfo = uTexelFetch1D( bvh.bvhContents, currNodeIndex ).xy;\r\n\t\t\tbool isLeaf = bool( boundsInfo.x & 0xffff0000u );\r\n\r\n\t\t\tif ( isLeaf ) {\r\n\r\n\t\t\t\tuint count = boundsInfo.x & 0x0000ffffu;\r\n\t\t\t\tuint offset = boundsInfo.y;\r\n\r\n\t\t\t\tbool found = intersectTriangles(\r\n\t\t\t\t\tbvh, rayOrigin, rayDirection, offset, count, triangleDistance,\r\n\t\t\t\t\tfaceIndices, faceNormal, barycoord, side, dist\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif ( found ) {\r\n\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tuint leftIndex = currNodeIndex + 1u;\r\n\t\t\t\tuint splitAxis = boundsInfo.x & 0x0000ffffu;\r\n\t\t\t\tuint rightIndex = boundsInfo.y;\r\n\r\n\t\t\t\t// set c2 in the stack so we traverse it later. We need to keep track of a pointer in\r\n\t\t\t\t// the stack while we traverse. The second pointer added is the one that will be\r\n\t\t\t\t// traversed first\r\n\t\t\t\tptr ++;\r\n\t\t\t\tstack[ ptr ] = leftIndex;\r\n\r\n\t\t\t\tptr ++;\r\n\t\t\t\tstack[ ptr ] = rightIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n`;\r\n","export const attenuate_hit_function = /* glsl */`\r\n\r\n\t// step through multiple surface hits and accumulate color attenuation based on transmissive surfaces\r\n\t// returns true if a solid surface was hit\r\n\tbool attenuateHit(\r\n\t\tRenderState state,\r\n\t\tRay ray, float rayDist,\r\n\t\tout vec3 color\r\n\t) {\r\n\r\n\t\t// store the original bounce index so we can reset it after\r\n\t\tuint originalBounceIndex = sobolBounceIndex;\r\n\r\n\t\tint traversals = state.traversals;\r\n\t\tint transmissiveTraversals = state.transmissiveTraversals;\r\n\t\tbool isShadowRay = state.isShadowRay;\r\n\t\tMaterial fogMaterial = state.fogMaterial;\r\n\r\n\t\tvec3 startPoint = ray.origin;\r\n\r\n\t\t// hit results\r\n\t\tSurfaceHit surfaceHit;\r\n\r\n\t\tcolor = vec3( 1.0 );\r\n\r\n\t\tbool result = true;\r\n\t\tfor ( int i = 0; i < traversals; i ++ ) {\r\n\r\n\t\t\tsobolBounceIndex ++;\r\n\r\n\t\t\tint hitType = traceScene( ray, fogMaterial, surfaceHit );\r\n\r\n\t\t\tif ( hitType == FOG_HIT ) {\r\n\r\n\t\t\t\tresult = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t} else if ( hitType == SURFACE_HIT ) {\r\n\r\n\t\t\t\tfloat totalDist = distance( startPoint, ray.origin + ray.direction * surfaceHit.dist );\r\n\t\t\t\tif ( totalDist > rayDist ) {\r\n\r\n\t\t\t\t\tresult = false;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// TODO: attenuate the contribution based on the PDF of the resulting ray including refraction values\r\n\t\t\t\t// Should be able to work using the material BSDF functions which will take into account specularity, etc.\r\n\t\t\t\t// TODO: should we account for emissive surfaces here?\r\n\r\n\t\t\t\tuint materialIndex = uTexelFetch1D( materialIndexAttribute, surfaceHit.faceIndices.x ).r;\r\n\t\t\t\tMaterial material = readMaterialInfo( materials, materialIndex );\r\n\r\n\t\t\t\t// adjust the ray to the new surface\r\n\t\t\t\tbool isEntering = surfaceHit.side == 1.0;\r\n\t\t\t\tray.origin = stepRayOrigin( ray.origin, ray.direction, - surfaceHit.faceNormal, surfaceHit.dist );\r\n\r\n\t\t\t\t#if FEATURE_FOG\r\n\r\n\t\t\t\tif ( material.fogVolume ) {\r\n\r\n\t\t\t\t\tfogMaterial = material;\r\n\t\t\t\t\tfogMaterial.fogVolume = surfaceHit.side == 1.0;\r\n\t\t\t\t\ti -= sign( transmissiveTraversals );\r\n\t\t\t\t\ttransmissiveTraversals --;\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t#endif\r\n\r\n\t\t\t\tif ( ! material.castShadow && isShadowRay ) {\r\n\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvec2 uv = textureSampleBarycoord( attributesArray, ATTR_UV, surfaceHit.barycoord, surfaceHit.faceIndices.xyz ).xy;\r\n\t\t\t\tvec4 vertexColor = textureSampleBarycoord( attributesArray, ATTR_COLOR, surfaceHit.barycoord, surfaceHit.faceIndices.xyz );\r\n\r\n\t\t\t\t// albedo\r\n\t\t\t\tvec4 albedo = vec4( material.color, material.opacity );\r\n\t\t\t\tif ( material.map != - 1 ) {\r\n\r\n\t\t\t\t\tvec3 uvPrime = material.mapTransform * vec3( uv, 1 );\r\n\t\t\t\t\talbedo *= texture2D( textures, vec3( uvPrime.xy, material.map ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.vertexColors ) {\r\n\r\n\t\t\t\t\talbedo *= vertexColor;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// alphaMap\r\n\t\t\t\tif ( material.alphaMap != - 1 ) {\r\n\r\n\t\t\t\t\talbedo.a *= texture2D( textures, vec3( uv, material.alphaMap ) ).x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// transmission\r\n\t\t\t\tfloat transmission = material.transmission;\r\n\t\t\t\tif ( material.transmissionMap != - 1 ) {\r\n\r\n\t\t\t\t\tvec3 uvPrime = material.transmissionMapTransform * vec3( uv, 1 );\r\n\t\t\t\t\ttransmission *= texture2D( textures, vec3( uvPrime.xy, material.transmissionMap ) ).r;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// metalness\r\n\t\t\t\tfloat metalness = material.metalness;\r\n\t\t\t\tif ( material.metalnessMap != - 1 ) {\r\n\r\n\t\t\t\t\tvec3 uvPrime = material.metalnessMapTransform * vec3( uv, 1 );\r\n\t\t\t\t\tmetalness *= texture2D( textures, vec3( uvPrime.xy, material.metalnessMap ) ).b;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfloat alphaTest = material.alphaTest;\r\n\t\t\t\tbool useAlphaTest = alphaTest != 0.0;\r\n\t\t\t\tfloat transmissionFactor = ( 1.0 - metalness ) * transmission;\r\n\t\t\t\tif (\r\n\t\t\t\t\ttransmissionFactor < rand( 9 ) && ! (\r\n\t\t\t\t\t\t// material sidedness\r\n\t\t\t\t\t\tmaterial.side != 0.0 && surfaceHit.side == material.side\r\n\r\n\t\t\t\t\t\t// alpha test\r\n\t\t\t\t\t\t|| useAlphaTest && albedo.a < alphaTest\r\n\r\n\t\t\t\t\t\t// opacity\r\n\t\t\t\t\t\t|| material.transparent && ! useAlphaTest && albedo.a < rand( 10 )\r\n\t\t\t\t\t)\r\n\t\t\t\t) {\r\n\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( surfaceHit.side == 1.0 && isEntering ) {\r\n\r\n\t\t\t\t\t// only attenuate by surface color on the way in\r\n\t\t\t\t\tcolor *= mix( vec3( 1.0 ), albedo.rgb, transmissionFactor );\r\n\r\n\t\t\t\t} else if ( surfaceHit.side == - 1.0 ) {\r\n\r\n\t\t\t\t\t// attenuate by medium once we hit the opposite side of the model\r\n\t\t\t\t\tcolor *= transmissionAttenuation( surfaceHit.dist, material.attenuationColor, material.attenuationDistance );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbool isTransmissiveRay = dot( ray.direction, surfaceHit.faceNormal * surfaceHit.side ) < 0.0;\r\n\t\t\t\tif ( ( isTransmissiveRay || isEntering ) && transmissiveTraversals > 0 ) {\r\n\r\n\t\t\t\t\ti -= sign( transmissiveTraversals );\r\n\t\t\t\t\ttransmissiveTraversals --;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult = false;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// reset the bounce index\r\n\t\tsobolBounceIndex = originalBounceIndex;\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n`;\r\n","export const camera_util_functions = /* glsl */`\r\n\r\n\tvec3 ndcToRayOrigin( vec2 coord ) {\r\n\r\n\t\tvec4 rayOrigin4 = cameraWorldMatrix * invProjectionMatrix * vec4( coord, - 1.0, 1.0 );\r\n\t\treturn rayOrigin4.xyz / rayOrigin4.w;\r\n\t}\r\n\r\n\tRay getCameraRay() {\r\n\r\n\t\tvec2 ssd = vec2( 1.0 ) / resolution;\r\n\r\n\t\t// Jitter the camera ray by finding a uv coordinate at a random sample\r\n\t\t// around this pixel's UV coordinate for AA\r\n\t\tvec2 ruv = rand2( 0 );\r\n\t\tvec2 jitteredUv = vUv + vec2( tentFilter( ruv.x ) * ssd.x, tentFilter( ruv.y ) * ssd.y );\r\n\t\tRay ray;\r\n\r\n\t\t#if CAMERA_TYPE == 2\r\n\r\n\t\t\t// Equirectangular projection\r\n\t\t\tvec4 rayDirection4 = vec4( equirectUvToDirection( jitteredUv ), 0.0 );\r\n\t\t\tvec4 rayOrigin4 = vec4( 0.0, 0.0, 0.0, 1.0 );\r\n\r\n\t\t\trayDirection4 = cameraWorldMatrix * rayDirection4;\r\n\t\t\trayOrigin4 = cameraWorldMatrix * rayOrigin4;\r\n\r\n\t\t\tray.direction = normalize( rayDirection4.xyz );\r\n\t\t\tray.origin = rayOrigin4.xyz / rayOrigin4.w;\r\n\r\n\t\t#else\r\n\r\n\t\t\t// get [- 1, 1] normalized device coordinates\r\n\t\t\tvec2 ndc = 2.0 * jitteredUv - vec2( 1.0 );\r\n\t\t\tray.origin = ndcToRayOrigin( ndc );\r\n\r\n\t\t\t#if CAMERA_TYPE == 1\r\n\r\n\t\t\t\t// Orthographic projection\r\n\t\t\t\tray.direction = ( cameraWorldMatrix * vec4( 0.0, 0.0, - 1.0, 0.0 ) ).xyz;\r\n\t\t\t\tray.direction = normalize( ray.direction );\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\t// Perspective projection\r\n\t\t\t\tray.direction = normalize( mat3( cameraWorldMatrix ) * ( invProjectionMatrix * vec4( ndc, 0.0, 1.0 ) ).xyz );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t#endif\r\n\r\n\t\t#if FEATURE_DOF\r\n\t\t{\r\n\r\n\t\t\t// depth of field\r\n\t\t\tvec3 focalPoint = ray.origin + normalize( ray.direction ) * physicalCamera.focusDistance;\r\n\r\n\t\t\t// get the aperture sample\r\n\t\t\t// if blades === 0 then we assume a circle\r\n\t\t\tvec3 shapeUVW= rand3( 1 );\r\n\t\t\tint blades = physicalCamera.apertureBlades;\r\n\t\t\tfloat anamorphicRatio = physicalCamera.anamorphicRatio;\r\n\t\t\tvec2 apertureSample = blades == 0 ? sampleCircle( shapeUVW.xy ) : sampleRegularPolygon( blades, shapeUVW );\r\n\t\t\tapertureSample *= physicalCamera.bokehSize * 0.5 * 1e-3;\r\n\r\n\t\t\t// rotate the aperture shape\r\n\t\t\tapertureSample =\r\n\t\t\t\trotateVector( apertureSample, physicalCamera.apertureRotation ) *\r\n\t\t\t\tsaturate( vec2( anamorphicRatio, 1.0 / anamorphicRatio ) );\r\n\r\n\t\t\t// create the new ray\r\n\t\t\tray.origin += ( cameraWorldMatrix * vec4( apertureSample, 0.0, 0.0 ) ).xyz;\r\n\t\t\tray.direction = focalPoint - ray.origin;\r\n\r\n\t\t}\r\n\t\t#endif\r\n\r\n\t\tray.direction = normalize( ray.direction );\r\n\r\n\t\treturn ray;\r\n\r\n\t}\r\n\r\n`;\r\n","export const direct_light_contribution_function = /*glsl*/`\r\n\r\n\tvec3 directLightContribution( vec3 worldWo, SurfaceRecord surf, RenderState state, vec3 rayOrigin ) {\r\n\r\n\t\tvec3 result = vec3( 0.0 );\r\n\r\n\t\t// uniformly pick a light or environment map\r\n\t\tif( lightsDenom != 0.0 && rand( 5 ) < float( lights.count ) / lightsDenom ) {\r\n\r\n\t\t\t// sample a light or environment\r\n\t\t\tLightRecord lightRec = randomLightSample( lights.tex, iesProfiles, lights.count, rayOrigin, rand3( 6 ) );\r\n\r\n\t\t\tbool isSampleBelowSurface = ! surf.volumeParticle && dot( surf.faceNormal, lightRec.direction ) < 0.0;\r\n\t\t\tif ( isSampleBelowSurface ) {\r\n\r\n\t\t\t\tlightRec.pdf = 0.0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// check if a ray could even reach the light area\r\n\t\t\tRay lightRay;\r\n\t\t\tlightRay.origin = rayOrigin;\r\n\t\t\tlightRay.direction = lightRec.direction;\r\n\t\t\tvec3 attenuatedColor;\r\n\t\t\tif (\r\n\t\t\t\tlightRec.pdf > 0.0 &&\r\n\t\t\t\tisDirectionValid( lightRec.direction, surf.normal, surf.faceNormal ) &&\r\n\t\t\t\t! attenuateHit( state, lightRay, lightRec.dist, attenuatedColor )\r\n\t\t\t) {\r\n\r\n\t\t\t\t// get the material pdf\r\n\t\t\t\tvec3 sampleColor;\r\n\t\t\t\tfloat lightMaterialPdf = bsdfResult( worldWo, lightRec.direction, surf, sampleColor );\r\n\t\t\t\tbool isValidSampleColor = all( greaterThanEqual( sampleColor, vec3( 0.0 ) ) );\r\n\t\t\t\tif ( lightMaterialPdf > 0.0 && isValidSampleColor ) {\r\n\r\n\t\t\t\t\t// weight the direct light contribution\r\n\t\t\t\t\tfloat lightPdf = lightRec.pdf / lightsDenom;\r\n\t\t\t\t\tfloat misWeight = lightRec.type == SPOT_LIGHT_TYPE || lightRec.type == DIR_LIGHT_TYPE || lightRec.type == POINT_LIGHT_TYPE ? 1.0 : misHeuristic( lightPdf, lightMaterialPdf );\r\n\t\t\t\t\tresult = attenuatedColor * lightRec.emission * state.throughputColor * sampleColor * misWeight / lightPdf;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( envMapInfo.totalSum != 0.0 && environmentIntensity != 0.0 ) {\r\n\r\n\t\t\t// find a sample in the environment map to include in the contribution\r\n\t\t\tvec3 envColor, envDirection;\r\n\t\t\tfloat envPdf = sampleEquirectProbability( rand2( 7 ), envColor, envDirection );\r\n\t\t\tenvDirection = invEnvRotation3x3 * envDirection;\r\n\r\n\t\t\t// this env sampling is not set up for transmissive sampling and yields overly bright\r\n\t\t\t// results so we ignore the sample in this case.\r\n\t\t\t// TODO: this should be improved but how? The env samples could traverse a few layers?\r\n\t\t\tbool isSampleBelowSurface = ! surf.volumeParticle && dot( surf.faceNormal, envDirection ) < 0.0;\r\n\t\t\tif ( isSampleBelowSurface ) {\r\n\r\n\t\t\t\tenvPdf = 0.0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// check if a ray could even reach the surface\r\n\t\t\tRay envRay;\r\n\t\t\tenvRay.origin = rayOrigin;\r\n\t\t\tenvRay.direction = envDirection;\r\n\t\t\tvec3 attenuatedColor;\r\n\t\t\tif (\r\n\t\t\t\tenvPdf > 0.0 &&\r\n\t\t\t\tisDirectionValid( envDirection, surf.normal, surf.faceNormal ) &&\r\n\t\t\t\t! attenuateHit( state, envRay, INFINITY, attenuatedColor )\r\n\t\t\t) {\r\n\r\n\t\t\t\t// get the material pdf\r\n\t\t\t\tvec3 sampleColor;\r\n\t\t\t\tfloat envMaterialPdf = bsdfResult( worldWo, envDirection, surf, sampleColor );\r\n\t\t\t\tbool isValidSampleColor = all( greaterThanEqual( sampleColor, vec3( 0.0 ) ) );\r\n\t\t\t\tif ( envMaterialPdf > 0.0 && isValidSampleColor ) {\r\n\r\n\t\t\t\t\t// weight the direct light contribution\r\n\t\t\t\t\tenvPdf /= lightsDenom;\r\n\t\t\t\t\tfloat misWeight = misHeuristic( envPdf, envMaterialPdf );\r\n\t\t\t\t\tresult = attenuatedColor * environmentIntensity * envColor * state.throughputColor * sampleColor * misWeight / envPdf;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Function changed to have a single return statement to potentially help with crashes on Mac OS.\r\n\t\t// See issue #470\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n`;\r\n","\r\nexport const get_surface_record_function = /* glsl */`\r\n\r\n\t#define SKIP_SURFACE 0\r\n\t#define HIT_SURFACE 1\r\n\tint getSurfaceRecord(\r\n\t\tMaterial material, SurfaceHit surfaceHit, sampler2DArray attributesArray,\r\n\t\tfloat accumulatedRoughness,\r\n\t\tinout SurfaceRecord surf\r\n\t) {\r\n\r\n\t\tif ( material.fogVolume ) {\r\n\r\n\t\t\tvec3 normal = vec3( 0, 0, 1 );\r\n\r\n\t\t\tSurfaceRecord fogSurface;\r\n\t\t\tfogSurface.volumeParticle = true;\r\n\t\t\tfogSurface.color = material.color;\r\n\t\t\tfogSurface.emission = material.emissiveIntensity * material.emissive;\r\n\t\t\tfogSurface.normal = normal;\r\n\t\t\tfogSurface.faceNormal = normal;\r\n\t\t\tfogSurface.clearcoatNormal = normal;\r\n\r\n\t\t\tsurf = fogSurface;\r\n\t\t\treturn HIT_SURFACE;\r\n\r\n\t\t}\r\n\r\n\t\t// uv coord for textures\r\n\t\tvec2 uv = textureSampleBarycoord( attributesArray, ATTR_UV, surfaceHit.barycoord, surfaceHit.faceIndices.xyz ).xy;\r\n\t\tvec4 vertexColor = textureSampleBarycoord( attributesArray, ATTR_COLOR, surfaceHit.barycoord, surfaceHit.faceIndices.xyz );\r\n\r\n\t\t// albedo\r\n\t\tvec4 albedo = vec4( material.color, material.opacity );\r\n\t\tif ( material.map != - 1 ) {\r\n\r\n\t\t\tvec3 uvPrime = material.mapTransform * vec3( uv, 1 );\r\n\t\t\talbedo *= texture2D( textures, vec3( uvPrime.xy, material.map ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.vertexColors ) {\r\n\r\n\t\t\talbedo *= vertexColor;\r\n\r\n\t\t}\r\n\r\n\t\t// alphaMap\r\n\t\tif ( material.alphaMap != - 1 ) {\r\n\r\n\t\t\talbedo.a *= texture2D( textures, vec3( uv, material.alphaMap ) ).x;\r\n\r\n\t\t}\r\n\r\n\t\t// possibly skip this sample if it's transparent, alpha test is enabled, or we hit the wrong material side\r\n\t\t// and it's single sided.\r\n\t\t// - alpha test is disabled when it === 0\r\n\t\t// - the material sidedness test is complicated because we want light to pass through the back side but still\r\n\t\t// be able to see the front side. This boolean checks if the side we hit is the front side on the first ray\r\n\t\t// and we're rendering the other then we skip it. Do the opposite on subsequent bounces to get incoming light.\r\n\t\tfloat alphaTest = material.alphaTest;\r\n\t\tbool useAlphaTest = alphaTest != 0.0;\r\n\t\tif (\r\n\t\t\t// material sidedness\r\n\t\t\tmaterial.side != 0.0 && surfaceHit.side != material.side\r\n\r\n\t\t\t// alpha test\r\n\t\t\t|| useAlphaTest && albedo.a < alphaTest\r\n\r\n\t\t\t// opacity\r\n\t\t\t|| material.transparent && ! useAlphaTest && albedo.a < rand( 3 )\r\n\t\t) {\r\n\r\n\t\t\treturn SKIP_SURFACE;\r\n\r\n\t\t}\r\n\r\n\t\t// fetch the interpolated smooth normal\r\n\t\tvec3 normal = normalize( textureSampleBarycoord(\r\n\t\t\tattributesArray,\r\n\t\t\tATTR_NORMAL,\r\n\t\t\tsurfaceHit.barycoord,\r\n\t\t\tsurfaceHit.faceIndices.xyz\r\n\t\t).xyz );\r\n\r\n\t\t// roughness\r\n\t\tfloat roughness = material.roughness;\r\n\t\tif ( material.roughnessMap != - 1 ) {\r\n\r\n\t\t\tvec3 uvPrime = material.roughnessMapTransform * vec3( uv, 1 );\r\n\t\t\troughness *= texture2D( textures, vec3( uvPrime.xy, material.roughnessMap ) ).g;\r\n\r\n\t\t}\r\n\r\n\t\t// metalness\r\n\t\tfloat metalness = material.metalness;\r\n\t\tif ( material.metalnessMap != - 1 ) {\r\n\r\n\t\t\tvec3 uvPrime = material.metalnessMapTransform * vec3( uv, 1 );\r\n\t\t\tmetalness *= texture2D( textures, vec3( uvPrime.xy, material.metalnessMap ) ).b;\r\n\r\n\t\t}\r\n\r\n\t\t// emission\r\n\t\tvec3 emission = material.emissiveIntensity * material.emissive;\r\n\t\tif ( material.emissiveMap != - 1 ) {\r\n\r\n\t\t\tvec3 uvPrime = material.emissiveMapTransform * vec3( uv, 1 );\r\n\t\t\temission *= texture2D( textures, vec3( uvPrime.xy, material.emissiveMap ) ).xyz;\r\n\r\n\t\t}\r\n\r\n\t\t// transmission\r\n\t\tfloat transmission = material.transmission;\r\n\t\tif ( material.transmissionMap != - 1 ) {\r\n\r\n\t\t\tvec3 uvPrime = material.transmissionMapTransform * vec3( uv, 1 );\r\n\t\t\ttransmission *= texture2D( textures, vec3( uvPrime.xy, material.transmissionMap ) ).r;\r\n\r\n\t\t}\r\n\r\n\t\t// normal\r\n\t\tif ( material.flatShading ) {\r\n\r\n\t\t\t// if we're rendering a flat shaded object then use the face normals - the face normal\r\n\t\t\t// is provided based on the side the ray hits the mesh so flip it to align with the\r\n\t\t\t// interpolated vertex normals.\r\n\t\t\tnormal = surfaceHit.faceNormal * surfaceHit.side;\r\n\r\n\t\t}\r\n\r\n\t\tvec3 baseNormal = normal;\r\n\t\tif ( material.normalMap != - 1 ) {\r\n\r\n\t\t\tvec4 tangentSample = textureSampleBarycoord(\r\n\t\t\t\tattributesArray,\r\n\t\t\t\tATTR_TANGENT,\r\n\t\t\t\tsurfaceHit.barycoord,\r\n\t\t\t\tsurfaceHit.faceIndices.xyz\r\n\t\t\t);\r\n\r\n\t\t\t// some provided tangents can be malformed (0, 0, 0) causing the normal to be degenerate\r\n\t\t\t// resulting in NaNs and slow path tracing.\r\n\t\t\tif ( length( tangentSample.xyz ) > 0.0 ) {\r\n\r\n\t\t\t\tvec3 tangent = normalize( tangentSample.xyz );\r\n\t\t\t\tvec3 bitangent = normalize( cross( normal, tangent ) * tangentSample.w );\r\n\t\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\r\n\r\n\t\t\t\tvec3 uvPrime = material.normalMapTransform * vec3( uv, 1 );\r\n\t\t\t\tvec3 texNormal = texture2D( textures, vec3( uvPrime.xy, material.normalMap ) ).xyz * 2.0 - 1.0;\r\n\t\t\t\ttexNormal.xy *= material.normalScale;\r\n\t\t\t\tnormal = vTBN * texNormal;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tnormal *= surfaceHit.side;\r\n\r\n\t\t// clearcoat\r\n\t\tfloat clearcoat = material.clearcoat;\r\n\t\tif ( material.clearcoatMap != - 1 ) {\r\n\r\n\t\t\tvec3 uvPrime = material.clearcoatMapTransform * vec3( uv, 1 );\r\n\t\t\tclearcoat *= texture2D( textures, vec3( uvPrime.xy, material.clearcoatMap ) ).r;\r\n\r\n\t\t}\r\n\r\n\t\t// clearcoatRoughness\r\n\t\tfloat clearcoatRoughness = material.clearcoatRoughness;\r\n\t\tif ( material.clearcoatRoughnessMap != - 1 ) {\r\n\r\n\t\t\tvec3 uvPrime = material.clearcoatRoughnessMapTransform * vec3( uv, 1 );\r\n\t\t\tclearcoatRoughness *= texture2D( textures, vec3( uvPrime.xy, material.clearcoatRoughnessMap ) ).g;\r\n\r\n\t\t}\r\n\r\n\t\t// clearcoatNormal\r\n\t\tvec3 clearcoatNormal = baseNormal;\r\n\t\tif ( material.clearcoatNormalMap != - 1 ) {\r\n\r\n\t\t\tvec4 tangentSample = textureSampleBarycoord(\r\n\t\t\t\tattributesArray,\r\n\t\t\t\tATTR_TANGENT,\r\n\t\t\t\tsurfaceHit.barycoord,\r\n\t\t\t\tsurfaceHit.faceIndices.xyz\r\n\t\t\t);\r\n\r\n\t\t\t// some provided tangents can be malformed (0, 0, 0) causing the normal to be degenerate\r\n\t\t\t// resulting in NaNs and slow path tracing.\r\n\t\t\tif ( length( tangentSample.xyz ) > 0.0 ) {\r\n\r\n\t\t\t\tvec3 tangent = normalize( tangentSample.xyz );\r\n\t\t\t\tvec3 bitangent = normalize( cross( clearcoatNormal, tangent ) * tangentSample.w );\r\n\t\t\t\tmat3 vTBN = mat3( tangent, bitangent, clearcoatNormal );\r\n\r\n\t\t\t\tvec3 uvPrime = material.clearcoatNormalMapTransform * vec3( uv, 1 );\r\n\t\t\t\tvec3 texNormal = texture2D( textures, vec3( uvPrime.xy, material.clearcoatNormalMap ) ).xyz * 2.0 - 1.0;\r\n\t\t\t\ttexNormal.xy *= material.clearcoatNormalScale;\r\n\t\t\t\tclearcoatNormal = vTBN * texNormal;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tclearcoatNormal *= surfaceHit.side;\r\n\r\n\t\t// sheenColor\r\n\t\tvec3 sheenColor = material.sheenColor;\r\n\t\tif ( material.sheenColorMap != - 1 ) {\r\n\r\n\t\t\tvec3 uvPrime = material.sheenColorMapTransform * vec3( uv, 1 );\r\n\t\t\tsheenColor *= texture2D( textures, vec3( uvPrime.xy, material.sheenColorMap ) ).rgb;\r\n\r\n\t\t}\r\n\r\n\t\t// sheenRoughness\r\n\t\tfloat sheenRoughness = material.sheenRoughness;\r\n\t\tif ( material.sheenRoughnessMap != - 1 ) {\r\n\r\n\t\t\tvec3 uvPrime = material.sheenRoughnessMapTransform * vec3( uv, 1 );\r\n\t\t\tsheenRoughness *= texture2D( textures, vec3( uvPrime.xy, material.sheenRoughnessMap ) ).a;\r\n\r\n\t\t}\r\n\r\n\t\t// iridescence\r\n\t\tfloat iridescence = material.iridescence;\r\n\t\tif ( material.iridescenceMap != - 1 ) {\r\n\r\n\t\t\tvec3 uvPrime = material.iridescenceMapTransform * vec3( uv, 1 );\r\n\t\t\tiridescence *= texture2D( textures, vec3( uvPrime.xy, material.iridescenceMap ) ).r;\r\n\r\n\t\t}\r\n\r\n\t\t// iridescence thickness\r\n\t\tfloat iridescenceThickness = material.iridescenceThicknessMaximum;\r\n\t\tif ( material.iridescenceThicknessMap != - 1 ) {\r\n\r\n\t\t\tvec3 uvPrime = material.iridescenceThicknessMapTransform * vec3( uv, 1 );\r\n\t\t\tfloat iridescenceThicknessSampled = texture2D( textures, vec3( uvPrime.xy, material.iridescenceThicknessMap ) ).g;\r\n\t\t\tiridescenceThickness = mix( material.iridescenceThicknessMinimum, material.iridescenceThicknessMaximum, iridescenceThicknessSampled );\r\n\r\n\t\t}\r\n\r\n\t\tiridescence = iridescenceThickness == 0.0 ? 0.0 : iridescence;\r\n\r\n\t\t// specular color\r\n\t\tvec3 specularColor = material.specularColor;\r\n\t\tif ( material.specularColorMap != - 1 ) {\r\n\r\n\t\t\tvec3 uvPrime = material.specularColorMapTransform * vec3( uv, 1 );\r\n\t\t\tspecularColor *= texture2D( textures, vec3( uvPrime.xy, material.specularColorMap ) ).rgb;\r\n\r\n\t\t}\r\n\r\n\t\t// specular intensity\r\n\t\tfloat specularIntensity = material.specularIntensity;\r\n\t\tif ( material.specularIntensityMap != - 1 ) {\r\n\r\n\t\t\tvec3 uvPrime = material.specularIntensityMapTransform * vec3( uv, 1 );\r\n\t\t\tspecularIntensity *= texture2D( textures, vec3( uvPrime.xy, material.specularIntensityMap ) ).a;\r\n\r\n\t\t}\r\n\r\n\t\tsurf.volumeParticle = false;\r\n\r\n\t\tsurf.faceNormal = surfaceHit.faceNormal;\r\n\t\tsurf.normal = normal;\r\n\r\n\t\tsurf.metalness = metalness;\r\n\t\tsurf.color = albedo.rgb;\r\n\t\tsurf.emission = emission;\r\n\r\n\t\tsurf.ior = material.ior;\r\n\t\tsurf.transmission = transmission;\r\n\t\tsurf.thinFilm = material.thinFilm;\r\n\t\tsurf.attenuationColor = material.attenuationColor;\r\n\t\tsurf.attenuationDistance = material.attenuationDistance;\r\n\r\n\t\tsurf.clearcoatNormal = clearcoatNormal;\r\n\t\tsurf.clearcoat = clearcoat;\r\n\r\n\t\tsurf.sheen = material.sheen;\r\n\t\tsurf.sheenColor = sheenColor;\r\n\r\n\t\tsurf.iridescence = iridescence;\r\n\t\tsurf.iridescenceIor = material.iridescenceIor;\r\n\t\tsurf.iridescenceThickness = iridescenceThickness;\r\n\r\n\t\tsurf.specularColor = specularColor;\r\n\t\tsurf.specularIntensity = specularIntensity;\r\n\r\n\t\t// apply perceptual roughness factor from gltf. sheen perceptual roughness is\r\n\t\t// applied by its brdf function\r\n\t\t// https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#microfacet-surfaces\r\n\t\tsurf.roughness = roughness * roughness;\r\n\t\tsurf.clearcoatRoughness = clearcoatRoughness * clearcoatRoughness;\r\n\t\tsurf.sheenRoughness = sheenRoughness;\r\n\r\n\t\t// frontFace is used to determine transmissive properties and PDF. If no transmission is used\r\n\t\t// then we can just always assume this is a front face.\r\n\t\tsurf.frontFace = surfaceHit.side == 1.0 || transmission == 0.0;\r\n\t\tsurf.eta = material.thinFilm || surf.frontFace ? 1.0 / material.ior : material.ior;\r\n\t\tsurf.f0 = iorRatioToF0( surf.eta );\r\n\r\n\t\t// Compute the filtered roughness value to use during specular reflection computations.\r\n\t\t// The accumulated roughness value is scaled by a user setting and a \"magic value\" of 5.0.\r\n\t\t// If we're exiting something transmissive then scale the factor down significantly so we can retain\r\n\t\t// sharp internal reflections\r\n\t\tsurf.filteredRoughness = applyFilteredGlossy( surf.roughness, accumulatedRoughness );\r\n\t\tsurf.filteredClearcoatRoughness = applyFilteredGlossy( surf.clearcoatRoughness, accumulatedRoughness );\r\n\r\n\t\t// get the normal frames\r\n\t\tsurf.normalBasis = getBasisFromNormal( surf.normal );\r\n\t\tsurf.normalInvBasis = inverse( surf.normalBasis );\r\n\r\n\t\tsurf.clearcoatBasis = getBasisFromNormal( surf.clearcoatNormal );\r\n\t\tsurf.clearcoatInvBasis = inverse( surf.clearcoatBasis );\r\n\r\n\t\treturn HIT_SURFACE;\r\n\r\n\t}\r\n`;\r\n","export const render_structs = /* glsl */`\r\n\r\n\tstruct Ray {\r\n\r\n\t\tvec3 origin;\r\n\t\tvec3 direction;\r\n\r\n\t};\r\n\r\n\tstruct SurfaceHit {\r\n\r\n\t\tuvec4 faceIndices;\r\n\t\tvec3 barycoord;\r\n\t\tvec3 faceNormal;\r\n\t\tfloat side;\r\n\t\tfloat dist;\r\n\r\n\t};\r\n\r\n\tstruct RenderState {\r\n\r\n\t\tbool firstRay;\r\n\t\tbool transmissiveRay;\r\n\t\tbool isShadowRay;\r\n\t\tfloat accumulatedRoughness;\r\n\t\tint transmissiveTraversals;\r\n\t\tint traversals;\r\n\t\tuint depth;\r\n\t\tvec3 throughputColor;\r\n\t\tMaterial fogMaterial;\r\n\r\n\t};\r\n\r\n\tRenderState initRenderState() {\r\n\r\n\t\tRenderState result;\r\n\t\tresult.firstRay = true;\r\n\t\tresult.transmissiveRay = true;\r\n\t\tresult.isShadowRay = false;\r\n\t\tresult.accumulatedRoughness = 0.0;\r\n\t\tresult.transmissiveTraversals = 0;\r\n\t\tresult.traversals = 0;\r\n\t\tresult.throughputColor = vec3( 1.0 );\r\n\t\tresult.depth = 0u;\r\n\t\tresult.fogMaterial.fogVolume = false;\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n`;\r\n","export const trace_scene_function = /* glsl */`\r\n\r\n\t#define NO_HIT 0\r\n\t#define SURFACE_HIT 1\r\n\t#define LIGHT_HIT 2\r\n\t#define FOG_HIT 3\r\n\r\n\t// Passing the global variable 'lights' into this function caused shader program errors.\r\n\t// So global variables like 'lights' and 'bvh' were moved out of the function parameters.\r\n\t// For more information, refer to: https://github.com/gkjohnson/three-gpu-pathtracer/pull/457\r\n\tint traceScene(\r\n\t\tRay ray, Material fogMaterial, inout SurfaceHit surfaceHit\r\n\t) {\r\n\r\n\t\tint result = NO_HIT;\r\n\t\tbool hit = bvhIntersectFirstHit( bvh, ray.origin, ray.direction, surfaceHit.faceIndices, surfaceHit.faceNormal, surfaceHit.barycoord, surfaceHit.side, surfaceHit.dist );\r\n\r\n\t\t#if FEATURE_FOG\r\n\r\n\t\tif ( fogMaterial.fogVolume ) {\r\n\r\n\t\t\t// offset the distance so we don't run into issues with particles on the same surface\r\n\t\t\t// as other objects\r\n\t\t\tfloat particleDist = intersectFogVolume( fogMaterial, rand( 1 ) );\r\n\t\t\tif ( particleDist + RAY_OFFSET < surfaceHit.dist ) {\r\n\r\n\t\t\t\tsurfaceHit.side = 1.0;\r\n\t\t\t\tsurfaceHit.faceNormal = normalize( - ray.direction );\r\n\t\t\t\tsurfaceHit.dist = particleDist;\r\n\t\t\t\treturn FOG_HIT;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t#endif\r\n\r\n\t\tif ( hit ) {\r\n\r\n\t\t\tresult = SURFACE_HIT;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n`;\r\n","import { ClampToEdgeWrapping, HalfFloatType, Matrix4, Vector2 } from 'three';\r\nimport { MaterialBase } from '../MaterialBase.js';\r\nimport {\r\n\tMeshBVHUniformStruct, UIntVertexAttributeTexture,\r\n\tBVHShaderGLSL,\r\n} from 'three-mesh-bvh';\r\n\r\n// uniforms\r\nimport { PhysicalCameraUniform } from '../../uniforms/PhysicalCameraUniform.js';\r\nimport { EquirectHdrInfoUniform } from '../../uniforms/EquirectHdrInfoUniform.js';\r\nimport { LightsInfoUniformStruct } from '../../uniforms/LightsInfoUniformStruct.js';\r\nimport { AttributesTextureArray } from '../../uniforms/AttributesTextureArray.js';\r\nimport { MaterialsTexture } from '../../uniforms/MaterialsTexture.js';\r\nimport { RenderTarget2DArray } from '../../uniforms/RenderTarget2DArray.js';\r\nimport { StratifiedSamplesTexture } from '../../uniforms/StratifiedSamplesTexture.js';\r\nimport { BlueNoiseTexture } from '../../textures/BlueNoiseTexture.js';\r\n\r\n// general glsl\r\nimport * as StructsGLSL from '../../shader/structs/index.js';\r\nimport * as SamplingGLSL from '../../shader/sampling/index.js';\r\nimport * as CommonGLSL from '../../shader/common/index.js';\r\nimport * as RandomGLSL from '../../shader/rand/index.js';\r\nimport * as BSDFGLSL from '../../shader/bsdf/index.js';\r\nimport * as PTBVHGLSL from '../../shader/bvh/index.js';\r\n\r\n// path tracer glsl\r\nimport * as RenderGLSL from './glsl/index.js';\r\n\r\nexport class PhysicalPathTracingMaterial extends MaterialBase {\r\n\r\n\tonBeforeRender() {\r\n\r\n\t\tthis.setDefine( 'FEATURE_DOF', this.physicalCamera.bokehSize === 0 ? 0 : 1 );\r\n\t\tthis.setDefine( 'FEATURE_BACKGROUND_MAP', this.backgroundMap ? 1 : 0 );\r\n\t\tthis.setDefine( 'FEATURE_FOG', this.materials.features.isUsed( 'FOG' ) ? 1 : 0 );\r\n\r\n\t}\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper( {\r\n\r\n\t\t\ttransparent: true,\r\n\t\t\tdepthWrite: false,\r\n\r\n\t\t\tdefines: {\r\n\t\t\t\tFEATURE_MIS: 1,\r\n\t\t\t\tFEATURE_RUSSIAN_ROULETTE: 1,\r\n\t\t\t\tFEATURE_DOF: 1,\r\n\t\t\t\tFEATURE_BACKGROUND_MAP: 0,\r\n\t\t\t\tFEATURE_FOG: 1,\r\n\r\n\t\t\t\t// 0 = PCG\r\n\t\t\t\t// 1 = Sobol\r\n\t\t\t\t// 2 = Stratified List\r\n\t\t\t\tRANDOM_TYPE: 2,\r\n\r\n\t\t\t\t// 0 = Perspective\r\n\t\t\t\t// 1 = Orthographic\r\n\t\t\t\t// 2 = Equirectangular\r\n\t\t\t\tCAMERA_TYPE: 0,\r\n\r\n\t\t\t\tDEBUG_MODE: 0,\r\n\r\n\t\t\t\tATTR_NORMAL: 0,\r\n\t\t\t\tATTR_TANGENT: 1,\r\n\t\t\t\tATTR_UV: 2,\r\n\t\t\t\tATTR_COLOR: 3,\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\r\n\t\t\t\t// path trace uniforms\r\n\t\t\t\tresolution: { value: new Vector2() },\r\n\t\t\t\topacity: { value: 1 },\r\n\t\t\t\tbounces: { value: 10 },\r\n\t\t\t\ttransmissiveBounces: { value: 10 },\r\n\t\t\t\tfilterGlossyFactor: { value: 0 },\r\n\r\n\t\t\t\t// camera uniforms\r\n\t\t\t\tphysicalCamera: { value: new PhysicalCameraUniform() },\r\n\t\t\t\tcameraWorldMatrix: { value: new Matrix4() },\r\n\t\t\t\tinvProjectionMatrix: { value: new Matrix4() },\r\n\r\n\t\t\t\t// scene uniforms\r\n\t\t\t\tbvh: { value: new MeshBVHUniformStruct() },\r\n\t\t\t\tattributesArray: { value: new AttributesTextureArray() },\r\n\t\t\t\tmaterialIndexAttribute: { value: new UIntVertexAttributeTexture() },\r\n\t\t\t\tmaterials: { value: new MaterialsTexture() },\r\n\t\t\t\ttextures: { value: new RenderTarget2DArray().texture },\r\n\r\n\t\t\t\t// light uniforms\r\n\t\t\t\tlights: { value: new LightsInfoUniformStruct() },\r\n\t\t\t\tiesProfiles: { value: new RenderTarget2DArray( 360, 180, {\r\n\t\t\t\t\ttype: HalfFloatType,\r\n\t\t\t\t\twrapS: ClampToEdgeWrapping,\r\n\t\t\t\t\twrapT: ClampToEdgeWrapping,\r\n\t\t\t\t} ).texture },\r\n\t\t\t\tenvironmentIntensity: { value: 1.0 },\r\n\t\t\t\tenvironmentRotation: { value: new Matrix4() },\r\n\t\t\t\tenvMapInfo: { value: new EquirectHdrInfoUniform() },\r\n\r\n\t\t\t\t// background uniforms\r\n\t\t\t\tbackgroundBlur: { value: 0.0 },\r\n\t\t\t\tbackgroundMap: { value: null },\r\n\t\t\t\tbackgroundAlpha: { value: 1.0 },\r\n\t\t\t\tbackgroundIntensity: { value: 1.0 },\r\n\t\t\t\tbackgroundRotation: { value: new Matrix4() },\r\n\r\n\t\t\t\t// randomness uniforms\r\n\t\t\t\tseed: { value: 0 },\r\n\t\t\t\tsobolTexture: { value: null },\r\n\t\t\t\tstratifiedTexture: { value: new StratifiedSamplesTexture() },\r\n\t\t\t\tstratifiedOffsetTexture: { value: new BlueNoiseTexture( 64, 1 ) },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: /* glsl */`\r\n\r\n\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvec4 mvPosition = vec4( position, 1.0 );\r\n\t\t\t\t\tmvPosition = modelViewMatrix * mvPosition;\r\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\t\t\t\t\tvUv = uv;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t`,\r\n\r\n\t\t\tfragmentShader: /* glsl */`\r\n\t\t\t\t#define RAY_OFFSET 1e-4\r\n\t\t\t\t#define INFINITY 1e20\r\n\r\n\t\t\t\tprecision highp isampler2D;\r\n\t\t\t\tprecision highp usampler2D;\r\n\t\t\t\tprecision highp sampler2DArray;\r\n\t\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\r\n\t\t\t\t#include <common>\r\n\r\n\t\t\t\t// bvh intersection\r\n\t\t\t\t${ BVHShaderGLSL.common_functions }\r\n\t\t\t\t${ BVHShaderGLSL.bvh_struct_definitions }\r\n\t\t\t\t${ BVHShaderGLSL.bvh_ray_functions }\r\n\r\n\t\t\t\t// uniform structs\r\n\t\t\t\t${ StructsGLSL.camera_struct }\r\n\t\t\t\t${ StructsGLSL.lights_struct }\r\n\t\t\t\t${ StructsGLSL.equirect_struct }\r\n\t\t\t\t${ StructsGLSL.material_struct }\r\n\t\t\t\t${ StructsGLSL.surface_record_struct }\r\n\r\n\t\t\t\t// random\r\n\t\t\t\t#if RANDOM_TYPE == 2 \t// Stratified List\r\n\r\n\t\t\t\t\t${ RandomGLSL.stratified_functions }\r\n\r\n\t\t\t\t#elif RANDOM_TYPE == 1 \t// Sobol\r\n\r\n\t\t\t\t\t${ RandomGLSL.pcg_functions }\r\n\t\t\t\t\t${ RandomGLSL.sobol_common }\r\n\t\t\t\t\t${ RandomGLSL.sobol_functions }\r\n\r\n\t\t\t\t\t#define rand(v) sobol(v)\r\n\t\t\t\t\t#define rand2(v) sobol2(v)\r\n\t\t\t\t\t#define rand3(v) sobol3(v)\r\n\t\t\t\t\t#define rand4(v) sobol4(v)\r\n\r\n\t\t\t\t#else \t\t\t\t\t// PCG\r\n\r\n\t\t\t\t${ RandomGLSL.pcg_functions }\r\n\r\n\t\t\t\t\t// Using the sobol functions seems to break the the compiler on MacOS\r\n\t\t\t\t\t// - specifically the \"sobolReverseBits\" function.\r\n\t\t\t\t\tuint sobolPixelIndex = 0u;\r\n\t\t\t\t\tuint sobolPathIndex = 0u;\r\n\t\t\t\t\tuint sobolBounceIndex = 0u;\r\n\r\n\t\t\t\t\t#define rand(v) pcgRand()\r\n\t\t\t\t\t#define rand2(v) pcgRand2()\r\n\t\t\t\t\t#define rand3(v) pcgRand3()\r\n\t\t\t\t\t#define rand4(v) pcgRand4()\r\n\r\n\t\t\t\t#endif\r\n\r\n\t\t\t\t// common\r\n\t\t\t\t${ CommonGLSL.texture_sample_functions }\r\n\t\t\t\t${ CommonGLSL.fresnel_functions }\r\n\t\t\t\t${ CommonGLSL.util_functions }\r\n\t\t\t\t${ CommonGLSL.math_functions }\r\n\t\t\t\t${ CommonGLSL.shape_intersection_functions }\r\n\r\n\t\t\t\t// environment\r\n\t\t\t\tuniform EquirectHdrInfo envMapInfo;\r\n\t\t\t\tuniform mat4 environmentRotation;\r\n\t\t\t\tuniform float environmentIntensity;\r\n\r\n\t\t\t\t// lighting\r\n\t\t\t\tuniform sampler2DArray iesProfiles;\r\n\t\t\t\tuniform LightsInfo lights;\r\n\r\n\t\t\t\t// background\r\n\t\t\t\tuniform float backgroundBlur;\r\n\t\t\t\tuniform float backgroundAlpha;\r\n\t\t\t\t#if FEATURE_BACKGROUND_MAP\r\n\r\n\t\t\t\tuniform sampler2D backgroundMap;\r\n\t\t\t\tuniform mat4 backgroundRotation;\r\n\t\t\t\tuniform float backgroundIntensity;\r\n\r\n\t\t\t\t#endif\r\n\r\n\t\t\t\t// camera\r\n\t\t\t\tuniform mat4 cameraWorldMatrix;\r\n\t\t\t\tuniform mat4 invProjectionMatrix;\r\n\t\t\t\t#if FEATURE_DOF\r\n\r\n\t\t\t\tuniform PhysicalCamera physicalCamera;\r\n\r\n\t\t\t\t#endif\r\n\r\n\t\t\t\t// geometry\r\n\t\t\t\tuniform sampler2DArray attributesArray;\r\n\t\t\t\tuniform usampler2D materialIndexAttribute;\r\n\t\t\t\tuniform sampler2D materials;\r\n\t\t\t\tuniform sampler2DArray textures;\r\n\t\t\t\tuniform BVH bvh;\r\n\r\n\t\t\t\t// path tracer\r\n\t\t\t\tuniform int bounces;\r\n\t\t\t\tuniform int transmissiveBounces;\r\n\t\t\t\tuniform float filterGlossyFactor;\r\n\t\t\t\tuniform int seed;\r\n\r\n\t\t\t\t// image\r\n\t\t\t\tuniform vec2 resolution;\r\n\t\t\t\tuniform float opacity;\r\n\r\n\t\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\t\t// globals\r\n\t\t\t\tmat3 envRotation3x3;\r\n\t\t\t\tmat3 invEnvRotation3x3;\r\n\t\t\t\tfloat lightsDenom;\r\n\r\n\t\t\t\t// sampling\r\n\t\t\t\t${ SamplingGLSL.shape_sampling_functions }\r\n\t\t\t\t${ SamplingGLSL.equirect_functions }\r\n\t\t\t\t${ SamplingGLSL.light_sampling_functions }\r\n\r\n\t\t\t\t${ PTBVHGLSL.inside_fog_volume_function }\r\n\t\t\t\t${ BSDFGLSL.ggx_functions }\r\n\t\t\t\t${ BSDFGLSL.sheen_functions }\r\n\t\t\t\t${ BSDFGLSL.iridescence_functions }\r\n\t\t\t\t${ BSDFGLSL.fog_functions }\r\n\t\t\t\t${ BSDFGLSL.bsdf_functions }\r\n\r\n\t\t\t\tfloat applyFilteredGlossy( float roughness, float accumulatedRoughness ) {\r\n\r\n\t\t\t\t\treturn clamp(\r\n\t\t\t\t\t\tmax(\r\n\t\t\t\t\t\t\troughness,\r\n\t\t\t\t\t\t\taccumulatedRoughness * filterGlossyFactor * 5.0 ),\r\n\t\t\t\t\t\t0.0,\r\n\t\t\t\t\t\t1.0\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvec3 sampleBackground( vec3 direction, vec2 uv ) {\r\n\r\n\t\t\t\t\tvec3 sampleDir = sampleHemisphere( direction, uv ) * 0.5 * backgroundBlur;\r\n\r\n\t\t\t\t\t#if FEATURE_BACKGROUND_MAP\r\n\r\n\t\t\t\t\tsampleDir = normalize( mat3( backgroundRotation ) * direction + sampleDir );\r\n\t\t\t\t\treturn backgroundIntensity * sampleEquirectColor( backgroundMap, sampleDir );\r\n\r\n\t\t\t\t\t#else\r\n\r\n\t\t\t\t\tsampleDir = normalize( envRotation3x3 * direction + sampleDir );\r\n\t\t\t\t\treturn environmentIntensity * sampleEquirectColor( envMapInfo.map, sampleDir );\r\n\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t${ RenderGLSL.render_structs }\r\n\t\t\t\t${ RenderGLSL.camera_util_functions }\r\n\t\t\t\t${ RenderGLSL.trace_scene_function }\r\n\t\t\t\t${ RenderGLSL.attenuate_hit_function }\r\n\t\t\t\t${ RenderGLSL.direct_light_contribution_function }\r\n\t\t\t\t${ RenderGLSL.get_surface_record_function }\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\t// init\r\n\t\t\t\t\trng_initialize( gl_FragCoord.xy, seed );\r\n\t\t\t\t\tsobolPixelIndex = ( uint( gl_FragCoord.x ) << 16 ) | uint( gl_FragCoord.y );\r\n\t\t\t\t\tsobolPathIndex = uint( seed );\r\n\r\n\t\t\t\t\t// get camera ray\r\n\t\t\t\t\tRay ray = getCameraRay();\r\n\r\n\t\t\t\t\t// inverse environment rotation\r\n\t\t\t\t\tenvRotation3x3 = mat3( environmentRotation );\r\n\t\t\t\t\tinvEnvRotation3x3 = inverse( envRotation3x3 );\r\n\t\t\t\t\tlightsDenom =\r\n\t\t\t\t\t\t( environmentIntensity == 0.0 || envMapInfo.totalSum == 0.0 ) && lights.count != 0u ?\r\n\t\t\t\t\t\t\tfloat( lights.count ) :\r\n\t\t\t\t\t\t\tfloat( lights.count + 1u );\r\n\r\n\t\t\t\t\t// final color\r\n\t\t\t\t\tgl_FragColor = vec4( 0, 0, 0, 1 );\r\n\r\n\t\t\t\t\t// surface results\r\n\t\t\t\t\tSurfaceHit surfaceHit;\r\n\t\t\t\t\tScatterRecord scatterRec;\r\n\r\n\t\t\t\t\t// path tracing state\r\n\t\t\t\t\tRenderState state = initRenderState();\r\n\t\t\t\t\tstate.transmissiveTraversals = transmissiveBounces;\r\n\t\t\t\t\t#if FEATURE_FOG\r\n\r\n\t\t\t\t\tstate.fogMaterial.fogVolume = bvhIntersectFogVolumeHit(\r\n\t\t\t\t\t\tray.origin, - ray.direction,\r\n\t\t\t\t\t\tmaterialIndexAttribute, materials,\r\n\t\t\t\t\t\tstate.fogMaterial\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\tfor ( int i = 0; i < bounces; i ++ ) {\r\n\r\n\t\t\t\t\t\tsobolBounceIndex ++;\r\n\r\n\t\t\t\t\t\tstate.depth ++;\r\n\t\t\t\t\t\tstate.traversals = bounces - i;\r\n\t\t\t\t\t\tstate.firstRay = i == 0 && state.transmissiveTraversals == transmissiveBounces;\r\n\r\n\t\t\t\t\t\tint hitType = traceScene( ray, state.fogMaterial, surfaceHit );\r\n\r\n\t\t\t\t\t\t// check if we intersect any lights and accumulate the light contribution\r\n\t\t\t\t\t\t// TODO: we can add support for light surface rendering in the else condition if we\r\n\t\t\t\t\t\t// add the ability to toggle visibility of the the light\r\n\t\t\t\t\t\tif ( ! state.firstRay && ! state.transmissiveRay ) {\r\n\r\n\t\t\t\t\t\t\tLightRecord lightRec;\r\n\t\t\t\t\t\t\tfloat lightDist = hitType == NO_HIT ? INFINITY : surfaceHit.dist;\r\n\t\t\t\t\t\t\tfor ( uint i = 0u; i < lights.count; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\tintersectLightAtIndex( lights.tex, ray.origin, ray.direction, i, lightRec ) &&\r\n\t\t\t\t\t\t\t\t\tlightRec.dist < lightDist\r\n\t\t\t\t\t\t\t\t) {\r\n\r\n\t\t\t\t\t\t\t\t\t#if FEATURE_MIS\r\n\r\n\t\t\t\t\t\t\t\t\t// weight the contribution\r\n\t\t\t\t\t\t\t\t\t// NOTE: Only area lights are supported for forward sampling and can be hit\r\n\t\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( scatterRec.pdf, lightRec.pdf / lightsDenom );\r\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightRec.emission * state.throughputColor * misWeight;\r\n\r\n\t\t\t\t\t\t\t\t\t#else\r\n\r\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += lightRec.emission * state.throughputColor;\r\n\r\n\t\t\t\t\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( hitType == NO_HIT ) {\r\n\r\n\t\t\t\t\t\t\tif ( state.firstRay || state.transmissiveRay ) {\r\n\r\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += sampleBackground( ray.direction, rand2( 2 ) ) * state.throughputColor;\r\n\t\t\t\t\t\t\t\tgl_FragColor.a = backgroundAlpha;\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t#if FEATURE_MIS\r\n\r\n\t\t\t\t\t\t\t\t// get the PDF of the hit envmap point\r\n\t\t\t\t\t\t\t\tvec3 envColor;\r\n\t\t\t\t\t\t\t\tfloat envPdf = sampleEquirect( envRotation3x3 * ray.direction, envColor );\r\n\t\t\t\t\t\t\t\tenvPdf /= lightsDenom;\r\n\r\n\t\t\t\t\t\t\t\t// and weight the contribution\r\n\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( scatterRec.pdf, envPdf );\r\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += environmentIntensity * envColor * state.throughputColor * misWeight;\r\n\r\n\t\t\t\t\t\t\t\t#else\r\n\r\n\t\t\t\t\t\t\t\tgl_FragColor.rgb +=\r\n\t\t\t\t\t\t\t\t\tenvironmentIntensity *\r\n\t\t\t\t\t\t\t\t\tsampleEquirectColor( envMapInfo.map, envRotation3x3 * ray.direction ) *\r\n\t\t\t\t\t\t\t\t\tstate.throughputColor;\r\n\r\n\t\t\t\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tuint materialIndex = uTexelFetch1D( materialIndexAttribute, surfaceHit.faceIndices.x ).r;\r\n\t\t\t\t\t\tMaterial material = readMaterialInfo( materials, materialIndex );\r\n\r\n\t\t\t\t\t\t#if FEATURE_FOG\r\n\r\n\t\t\t\t\t\tif ( hitType == FOG_HIT ) {\r\n\r\n\t\t\t\t\t\t\tmaterial = state.fogMaterial;\r\n\t\t\t\t\t\t\tstate.accumulatedRoughness += 0.2;\r\n\r\n\t\t\t\t\t\t} else if ( material.fogVolume ) {\r\n\r\n\t\t\t\t\t\t\tstate.fogMaterial = material;\r\n\t\t\t\t\t\t\tstate.fogMaterial.fogVolume = surfaceHit.side == 1.0;\r\n\r\n\t\t\t\t\t\t\tray.origin = stepRayOrigin( ray.origin, ray.direction, - surfaceHit.faceNormal, surfaceHit.dist );\r\n\r\n\t\t\t\t\t\t\ti -= sign( state.transmissiveTraversals );\r\n\t\t\t\t\t\t\tstate.transmissiveTraversals -= sign( state.transmissiveTraversals );\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t\t// early out if this is a matte material\r\n\t\t\t\t\t\tif ( material.matte && state.firstRay ) {\r\n\r\n\t\t\t\t\t\t\tgl_FragColor = vec4( 0.0 );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// if we've determined that this is a shadow ray and we've hit an item with no shadow casting\r\n\t\t\t\t\t\t// then skip it\r\n\t\t\t\t\t\tif ( ! material.castShadow && state.isShadowRay ) {\r\n\r\n\t\t\t\t\t\t\tray.origin = stepRayOrigin( ray.origin, ray.direction, - surfaceHit.faceNormal, surfaceHit.dist );\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tSurfaceRecord surf;\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tgetSurfaceRecord(\r\n\t\t\t\t\t\t\t\tmaterial, surfaceHit, attributesArray, state.accumulatedRoughness,\r\n\t\t\t\t\t\t\t\tsurf\r\n\t\t\t\t\t\t\t) == SKIP_SURFACE\r\n\t\t\t\t\t\t) {\r\n\r\n\t\t\t\t\t\t\t// only allow a limited number of transparency discards otherwise we could\r\n\t\t\t\t\t\t\t// crash the context with too long a loop.\r\n\t\t\t\t\t\t\ti -= sign( state.transmissiveTraversals );\r\n\t\t\t\t\t\t\tstate.transmissiveTraversals -= sign( state.transmissiveTraversals );\r\n\r\n\t\t\t\t\t\t\tray.origin = stepRayOrigin( ray.origin, ray.direction, - surfaceHit.faceNormal, surfaceHit.dist );\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tscatterRec = bsdfSample( - ray.direction, surf );\r\n\t\t\t\t\t\tstate.isShadowRay = scatterRec.specularPdf < rand( 4 );\r\n\r\n\t\t\t\t\t\tbool isBelowSurface = ! surf.volumeParticle && dot( scatterRec.direction, surf.faceNormal ) < 0.0;\r\n\t\t\t\t\t\tvec3 hitPoint = stepRayOrigin( ray.origin, ray.direction, isBelowSurface ? - surf.faceNormal : surf.faceNormal, surfaceHit.dist );\r\n\r\n\t\t\t\t\t\t// next event estimation\r\n\t\t\t\t\t\t#if FEATURE_MIS\r\n\r\n\t\t\t\t\t\tgl_FragColor.rgb += directLightContribution( - ray.direction, surf, state, hitPoint );\r\n\r\n\t\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t\t// accumulate a roughness value to offset diffuse, specular, diffuse rays that have high contribution\r\n\t\t\t\t\t\t// to a single pixel resulting in fireflies\r\n\t\t\t\t\t\t// TODO: handle transmissive surfaces\r\n\t\t\t\t\t\tif ( ! surf.volumeParticle && ! isBelowSurface ) {\r\n\r\n\t\t\t\t\t\t\t// determine if this is a rough normal or not by checking how far off straight up it is\r\n\t\t\t\t\t\t\tvec3 halfVector = normalize( - ray.direction + scatterRec.direction );\r\n\t\t\t\t\t\t\tstate.accumulatedRoughness += max(\r\n\t\t\t\t\t\t\t\tsin( acosApprox( dot( halfVector, surf.normal ) ) ),\r\n\t\t\t\t\t\t\t\tsin( acosApprox( dot( halfVector, surf.clearcoatNormal ) ) )\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tstate.transmissiveRay = false;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// accumulate emissive color\r\n\t\t\t\t\t\tgl_FragColor.rgb += ( surf.emission * state.throughputColor );\r\n\r\n\t\t\t\t\t\t// skip the sample if our PDF or ray is impossible\r\n\t\t\t\t\t\tif ( scatterRec.pdf <= 0.0 || ! isDirectionValid( scatterRec.direction, surf.normal, surf.faceNormal ) ) {\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// if we're bouncing around the inside a transmissive material then decrement\r\n\t\t\t\t\t\t// perform this separate from a bounce\r\n\t\t\t\t\t\tbool isTransmissiveRay = ! surf.volumeParticle && dot( scatterRec.direction, surf.faceNormal * surfaceHit.side ) < 0.0;\r\n\t\t\t\t\t\tif ( ( isTransmissiveRay || isBelowSurface ) && state.transmissiveTraversals > 0 ) {\r\n\r\n\t\t\t\t\t\t\tstate.transmissiveTraversals --;\r\n\t\t\t\t\t\t\ti --;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//\r\n\r\n\t\t\t\t\t\t// handle throughput color transformation\r\n\t\t\t\t\t\t// attenuate the throughput color by the medium color\r\n\t\t\t\t\t\tif ( ! surf.frontFace ) {\r\n\r\n\t\t\t\t\t\t\tstate.throughputColor *= transmissionAttenuation( surfaceHit.dist, surf.attenuationColor, surf.attenuationDistance );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t#if FEATURE_RUSSIAN_ROULETTE\r\n\r\n\t\t\t\t\t\t// russian roulette path termination\r\n\t\t\t\t\t\t// https://www.arnoldrenderer.com/research/physically_based_shader_design_in_arnold.pdf\r\n\t\t\t\t\t\tuint minBounces = 3u;\r\n\t\t\t\t\t\tfloat depthProb = float( state.depth < minBounces );\r\n\r\n\t\t\t\t\t\tfloat rrProb = luminance( state.throughputColor * scatterRec.color / scatterRec.pdf );\r\n\t\t\t\t\t\trrProb /= luminance( state.throughputColor );\r\n\t\t\t\t\t\trrProb = sqrt( rrProb );\r\n\t\t\t\t\t\trrProb = max( rrProb, depthProb );\r\n\t\t\t\t\t\trrProb = min( rrProb, 1.0 );\r\n\t\t\t\t\t\tif ( rand( 8 ) > rrProb ) {\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// perform sample clamping here to avoid bright pixels\r\n\t\t\t\t\t\tstate.throughputColor *= min( 1.0 / rrProb, 20.0 );\r\n\r\n\t\t\t\t\t\t#endif\r\n\r\n\t\t\t\t\t\t// adjust the throughput and discard and exit if we find discard the sample if there are any NaNs\r\n\t\t\t\t\t\tstate.throughputColor *= scatterRec.color / scatterRec.pdf;\r\n\t\t\t\t\t\tif ( any( isnan( state.throughputColor ) ) || any( isinf( state.throughputColor ) ) ) {\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//\r\n\r\n\t\t\t\t\t\t// prepare for next ray\r\n\t\t\t\t\t\tray.direction = scatterRec.direction;\r\n\t\t\t\t\t\tray.origin = hitPoint;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgl_FragColor.a *= opacity;\r\n\r\n\t\t\t\t\t#if DEBUG_MODE == 1\r\n\r\n\t\t\t\t\t// output the number of rays checked in the path and number of\r\n\t\t\t\t\t// transmissive rays encountered.\r\n\t\t\t\t\tgl_FragColor.rgb = vec3(\r\n\t\t\t\t\t\tfloat( state.depth ),\r\n\t\t\t\t\t\ttransmissiveBounces - state.transmissiveTraversals,\r\n\t\t\t\t\t\t0.0\r\n\t\t\t\t\t);\r\n\t\t\t\t\tgl_FragColor.a = 1.0;\r\n\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t`\r\n\r\n\t\t} );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n}\r\n","import { RGBAFormat, FloatType, Color, Vector2, WebGLRenderTarget, NoBlending, NormalBlending, Vector4, NearestFilter } from 'three';\r\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\r\nimport { BlendMaterial } from '../materials/fullscreen/BlendMaterial.js';\r\nimport { SobolNumberMapGenerator } from '../utils/SobolNumberMapGenerator.js';\r\nimport { PhysicalPathTracingMaterial } from '../materials/pathtracing/PhysicalPathTracingMaterial.js';\r\n\r\nfunction* renderTask() {\r\n\r\n\tconst {\r\n\t\t_renderer,\r\n\t\t_fsQuad,\r\n\t\t_blendQuad,\r\n\t\t_primaryTarget,\r\n\t\t_blendTargets,\r\n\t\t_sobolTarget,\r\n\t\t_subframe,\r\n\t\talpha,\r\n\t\tmaterial,\r\n\t} = this;\r\n\tconst _ogScissor = new Vector4();\r\n\tconst _ogViewport = new Vector4();\r\n\r\n\tconst blendMaterial = _blendQuad.material;\r\n\tlet [ blendTarget1, blendTarget2 ] = _blendTargets;\r\n\r\n\twhile ( true ) {\r\n\r\n\t\tif ( alpha ) {\r\n\r\n\t\t\tblendMaterial.opacity = this._opacityFactor / ( this.samples + 1 );\r\n\t\t\tmaterial.blending = NoBlending;\r\n\t\t\tmaterial.opacity = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmaterial.opacity = this._opacityFactor / ( this.samples + 1 );\r\n\t\t\tmaterial.blending = NormalBlending;\r\n\r\n\t\t}\r\n\r\n\t\tconst [ subX, subY, subW, subH ] = _subframe;\r\n\r\n\t\tconst w = _primaryTarget.width;\r\n\t\tconst h = _primaryTarget.height;\r\n\t\tmaterial.resolution.set( w * subW, h * subH );\r\n\t\tmaterial.sobolTexture = _sobolTarget.texture;\r\n\t\tmaterial.stratifiedTexture.init( 20, material.bounces + material.transmissiveBounces + 5 );\r\n\t\tmaterial.stratifiedTexture.next();\r\n\t\tmaterial.seed ++;\r\n\r\n\t\tconst tilesX = this.tiles.x || 1;\r\n\t\tconst tilesY = this.tiles.y || 1;\r\n\t\tconst totalTiles = tilesX * tilesY;\r\n\r\n\t\tconst pxSubW = Math.ceil( w * subW );\r\n\t\tconst pxSubH = Math.ceil( h * subH );\r\n\t\tconst pxSubX = Math.floor( subX * w );\r\n\t\tconst pxSubY = Math.floor( subY * h );\r\n\r\n\t\tconst pxTileW = Math.ceil( pxSubW / tilesX );\r\n\t\tconst pxTileH = Math.ceil( pxSubH / tilesY );\r\n\r\n\t\tfor ( let y = 0; y < tilesY; y ++ ) {\r\n\r\n\t\t\tfor ( let x = 0; x < tilesX; x ++ ) {\r\n\r\n\t\t\t\t// store og state\r\n\t\t\t\tconst ogRenderTarget = _renderer.getRenderTarget();\r\n\t\t\t\tconst ogAutoClear = _renderer.autoClear;\r\n\t\t\t\tconst ogScissorTest = _renderer.getScissorTest();\r\n\t\t\t\t_renderer.getScissor( _ogScissor );\r\n\t\t\t\t_renderer.getViewport( _ogViewport );\r\n\r\n\t\t\t\tlet tx = x;\r\n\t\t\t\tlet ty = y;\r\n\t\t\t\tif ( ! this.stableTiles ) {\r\n\r\n\t\t\t\t\tconst tileIndex = ( this._currentTile ) % ( tilesX * tilesY );\r\n\t\t\t\t\ttx = tileIndex % tilesX;\r\n\t\t\t\t\tty = ~ ~ ( tileIndex / tilesX );\r\n\r\n\t\t\t\t\tthis._currentTile = tileIndex + 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// set the scissor and the viewport on the render target\r\n\t\t\t\t// note that when using the webgl renderer set viewport the device pixel ratio\r\n\t\t\t\t// is multiplied into the field causing some pixels to not be rendered\r\n\t\t\t\tconst reverseTy = tilesY - ty - 1;\r\n\t\t\t\t_primaryTarget.scissor.set(\r\n\t\t\t\t\tpxSubX + tx * pxTileW,\r\n\t\t\t\t\tpxSubY + reverseTy * pxTileH,\r\n\t\t\t\t\tMath.min( pxTileW, pxSubW - tx * pxTileW ),\r\n\t\t\t\t\tMath.min( pxTileH, pxSubH - reverseTy * pxTileH ),\r\n\t\t\t\t);\r\n\r\n\t\t\t\t_primaryTarget.viewport.set(\r\n\t\t\t\t\tpxSubX,\r\n\t\t\t\t\tpxSubY,\r\n\t\t\t\t\tpxSubW,\r\n\t\t\t\t\tpxSubH,\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// three.js renderer takes values relative to the current pixel ratio\r\n\t\t\t\t_renderer.setRenderTarget( _primaryTarget );\r\n\t\t\t\t_renderer.setScissorTest( true );\r\n\r\n\t\t\t\t_renderer.autoClear = false;\r\n\t\t\t\t_fsQuad.render( _renderer );\r\n\r\n\t\t\t\t// reset original renderer state\r\n\t\t\t\t_renderer.setViewport( _ogViewport );\r\n\t\t\t\t_renderer.setScissor( _ogScissor );\r\n\t\t\t\t_renderer.setScissorTest( ogScissorTest );\r\n\t\t\t\t_renderer.setRenderTarget( ogRenderTarget );\r\n\t\t\t\t_renderer.autoClear = ogAutoClear;\r\n\r\n\t\t\t\t// swap and blend alpha targets\r\n\t\t\t\tif ( alpha ) {\r\n\r\n\t\t\t\t\tblendMaterial.target1 = blendTarget1.texture;\r\n\t\t\t\t\tblendMaterial.target2 = _primaryTarget.texture;\r\n\r\n\t\t\t\t\t_renderer.setRenderTarget( blendTarget2 );\r\n\t\t\t\t\t_blendQuad.render( _renderer );\r\n\t\t\t\t\t_renderer.setRenderTarget( ogRenderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.samples += ( 1 / totalTiles );\r\n\r\n\t\t\t\t// round the samples value if we've finished the tiles\r\n\t\t\t\tif ( x === tilesX - 1 && y === tilesY - 1 ) {\r\n\r\n\t\t\t\t\tthis.samples = Math.round( this.samples );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tyield;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t[ blendTarget1, blendTarget2 ] = [ blendTarget2, blendTarget1 ];\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst ogClearColor = new Color();\r\nexport class PathTracingRenderer {\r\n\r\n\tget material() {\r\n\r\n\t\treturn this._fsQuad.material;\r\n\r\n\t}\r\n\r\n\tset material( v ) {\r\n\r\n\t\tthis._fsQuad.material = v;\r\n\r\n\t}\r\n\r\n\tget target() {\r\n\r\n\t\treturn this._alpha ? this._blendTargets[ 1 ] : this._primaryTarget;\r\n\r\n\t}\r\n\r\n\tset alpha( v ) {\r\n\r\n\t\tif ( this._alpha === v ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! v ) {\r\n\r\n\t\t\tthis._blendTargets[ 0 ].dispose();\r\n\t\t\tthis._blendTargets[ 1 ].dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis._alpha = v;\r\n\t\tthis.reset();\r\n\r\n\t}\r\n\r\n\tget alpha() {\r\n\r\n\t\treturn this._alpha;\r\n\r\n\t}\r\n\r\n\tconstructor( renderer ) {\r\n\r\n\t\tthis.camera = null;\r\n\t\tthis.tiles = new Vector2( 3, 3 );\r\n\r\n\t\tthis.stableNoise = false;\r\n\t\tthis.stableTiles = true;\r\n\r\n\t\tthis.samples = 0;\r\n\t\tthis._subframe = new Vector4( 0, 0, 1, 1 );\r\n\t\tthis._opacityFactor = 1.0;\r\n\t\tthis._renderer = renderer;\r\n\t\tthis._alpha = false;\r\n\t\tthis._fsQuad = new FullScreenQuad( new PhysicalPathTracingMaterial() );\r\n\t\tthis._blendQuad = new FullScreenQuad( new BlendMaterial() );\r\n\t\tthis._task = null;\r\n\t\tthis._currentTile = 0;\r\n\r\n\t\tthis._sobolTarget = new SobolNumberMapGenerator().generate( renderer );\r\n\r\n\t\tthis._primaryTarget = new WebGLRenderTarget( 1, 1, {\r\n\t\t\tformat: RGBAFormat,\r\n\t\t\ttype: FloatType,\r\n\t\t\tmagFilter: NearestFilter,\r\n\t\t\tminFilter: NearestFilter,\r\n\t\t} );\r\n\t\tthis._blendTargets = [\r\n\t\t\tnew WebGLRenderTarget( 1, 1, {\r\n\t\t\t\tformat: RGBAFormat,\r\n\t\t\t\ttype: FloatType,\r\n\t\t\t\tmagFilter: NearestFilter,\r\n\t\t\t\tminFilter: NearestFilter,\r\n\t\t\t} ),\r\n\t\t\tnew WebGLRenderTarget( 1, 1, {\r\n\t\t\t\tformat: RGBAFormat,\r\n\t\t\t\ttype: FloatType,\r\n\t\t\t\tmagFilter: NearestFilter,\r\n\t\t\t\tminFilter: NearestFilter,\r\n\t\t\t} ),\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tsetCamera( camera ) {\r\n\r\n\t\tconst { material } = this;\r\n\t\tmaterial.cameraWorldMatrix.copy( camera.matrixWorld );\r\n\t\tmaterial.invProjectionMatrix.copy( camera.projectionMatrixInverse );\r\n\t\tmaterial.physicalCamera.updateFrom( camera );\r\n\r\n\t\t// Perspective camera (default)\r\n\t\tlet cameraType = 0;\r\n\r\n\t\t// An orthographic projection matrix will always have the bottom right element == 1\r\n\t\t// And a perspective projection matrix will always have the bottom right element == 0\r\n\t\tif ( camera.projectionMatrix.elements[ 15 ] > 0 ) {\r\n\r\n\t\t\t// Orthographic\r\n\t\t\tcameraType = 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( camera.isEquirectCamera ) {\r\n\r\n\t\t\t// Equirectangular\r\n\t\t\tcameraType = 2;\r\n\r\n\t\t}\r\n\r\n\t\tmaterial.setDefine( 'CAMERA_TYPE', cameraType );\r\n\r\n\t\tthis.camera = camera;\r\n\t\t// this.reset();\r\n\r\n\t}\r\n\r\n\tsetSize( w, h ) {\r\n\r\n\t\tw = Math.ceil( w );\r\n\t\th = Math.ceil( h );\r\n\r\n\t\tif ( this._primaryTarget.width === w && this._primaryTarget.height === h ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis._primaryTarget.setSize( w, h );\r\n\t\tthis._blendTargets[ 0 ].setSize( w, h );\r\n\t\tthis._blendTargets[ 1 ].setSize( w, h );\r\n\t\tthis.reset();\r\n\r\n\t}\r\n\r\n\tgetSize( target ) {\r\n\r\n\t\ttarget.x = this._primaryTarget.width;\r\n\t\ttarget.y = this._primaryTarget.height;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis._primaryTarget.dispose();\r\n\t\tthis._blendTargets[ 0 ].dispose();\r\n\t\tthis._blendTargets[ 1 ].dispose();\r\n\t\tthis._sobolTarget.dispose();\r\n\r\n\t\tthis._fsQuad.dispose();\r\n\t\tthis._blendQuad.dispose();\r\n\t\tthis._task = null;\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tconst { _renderer, _primaryTarget, _blendTargets } = this;\r\n\t\tconst ogRenderTarget = _renderer.getRenderTarget();\r\n\t\tconst ogClearAlpha = _renderer.getClearAlpha();\r\n\t\t_renderer.getClearColor( ogClearColor );\r\n\r\n\t\t_renderer.setRenderTarget( _primaryTarget );\r\n\t\t_renderer.setClearColor( 0, 0 );\r\n\t\t_renderer.clearColor();\r\n\r\n\t\t_renderer.setRenderTarget( _blendTargets[ 0 ] );\r\n\t\t_renderer.setClearColor( 0, 0 );\r\n\t\t_renderer.clearColor();\r\n\r\n\t\t_renderer.setRenderTarget( _blendTargets[ 1 ] );\r\n\t\t_renderer.setClearColor( 0, 0 );\r\n\t\t_renderer.clearColor();\r\n\r\n\t\t_renderer.setClearColor( ogClearColor, ogClearAlpha );\r\n\t\t_renderer.setRenderTarget( ogRenderTarget );\r\n\r\n\t\tthis.samples = 0;\r\n\t\tthis._task = null;\r\n\r\n\t\tif ( this.stableNoise ) {\r\n\r\n\t\t\tthis.material.seed = 0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tif ( ! this._task ) {\r\n\r\n\t\t\tthis._task = renderTask.call( this );\r\n\r\n\t\t}\r\n\r\n\t\tthis._task.next();\r\n\r\n\t}\r\n\r\n}\r\n","import {\r\n\tClampToEdgeWrapping,\r\n\tColor,\r\n\tDataTexture,\r\n\tEquirectangularReflectionMapping,\r\n\tLinearFilter,\r\n\tRepeatWrapping,\r\n\tRGBAFormat,\r\n\tSpherical,\r\n\tVector2,\r\n\tFloatType\r\n} from 'three';\r\n\r\nconst _uv = new Vector2();\r\nconst _coord = new Vector2();\r\nconst _polar = new Spherical();\r\nconst _color = new Color();\r\nexport class ProceduralEquirectTexture extends DataTexture {\r\n\r\n\tconstructor( width = 512, height = 512 ) {\r\n\r\n\t\tsuper(\r\n\t\t\tnew Float32Array( width * height * 4 ),\r\n\t\t\twidth, height, RGBAFormat, FloatType, EquirectangularReflectionMapping,\r\n\t\t\tRepeatWrapping, ClampToEdgeWrapping, LinearFilter, LinearFilter,\r\n\t\t);\r\n\r\n\t\tthis.generationCallback = null;\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tthis.dispose();\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t\tconst { data, width, height } = this.image;\r\n\t\tfor ( let x = 0; x < width; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y < height; y ++ ) {\r\n\r\n\t\t\t\t_coord.set( width, height );\r\n\r\n\t\t\t\t_uv.set( x / width, y / height );\r\n\t\t\t\t_uv.x -= 0.5;\r\n\t\t\t\t_uv.y = 1.0 - _uv.y;\r\n\r\n\t\t\t\t_polar.theta = _uv.x * 2.0 * Math.PI;\r\n\t\t\t\t_polar.phi = _uv.y * Math.PI;\r\n\t\t\t\t_polar.radius = 1.0;\r\n\r\n\t\t\t\tthis.generationCallback( _polar, _uv, _coord, _color );\r\n\r\n\t\t\t\tconst i = y * width + x;\r\n\t\t\t\tconst i4 = 4 * i;\r\n\t\t\t\tdata[ i4 + 0 ] = ( _color.r );\r\n\t\t\t\tdata[ i4 + 1 ] = ( _color.g );\r\n\t\t\t\tdata[ i4 + 2 ] = ( _color.b );\r\n\t\t\t\tdata[ i4 + 3 ] = ( 1.0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( other ) {\r\n\r\n\t\tsuper.copy( other );\r\n\t\tthis.generationCallback = other.generationCallback;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n","import { Color, Vector3 } from 'three';\r\nimport { ProceduralEquirectTexture } from './ProceduralEquirectTexture.js';\r\n\r\nconst _direction = new Vector3();\r\nexport class GradientEquirectTexture extends ProceduralEquirectTexture {\r\n\r\n\tconstructor( resolution = 512 ) {\r\n\r\n\t\tsuper( resolution, resolution );\r\n\r\n\t\tthis.topColor = new Color().set( 0xffffff );\r\n\t\tthis.bottomColor = new Color().set( 0x000000 );\r\n\t\tthis.exponent = 2;\r\n\t\tthis.generationCallback = ( polar, uv, coord, color ) => {\r\n\r\n\t\t\t_direction.setFromSpherical( polar );\r\n\r\n\t\t\tconst t = _direction.y * 0.5 + 0.5;\r\n\t\t\tcolor.lerpColors( this.bottomColor, this.topColor, t ** this.exponent );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tcopy( other ) {\r\n\r\n\t\tsuper.copy( other );\r\n\r\n\t\tthis.topColor.copy( other.topColor );\r\n\t\tthis.bottomColor.copy( other.bottomColor );\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n","import { ShaderMaterial } from 'three';\r\n\r\n// Material that tone maps a texture before performing interpolation to prevent\r\n// unexpected high values during texture stretching interpolation.\r\n// Emulates browser image stretching\r\nexport class ClampedInterpolationMaterial extends ShaderMaterial {\r\n\r\n\tget map() {\r\n\r\n\t\treturn this.uniforms.map.value;\r\n\r\n\t}\r\n\r\n\tset map( v ) {\r\n\r\n\t\tthis.uniforms.map.value = v;\r\n\r\n\t}\r\n\r\n\tget opacity() {\r\n\r\n\t\treturn this.uniforms.opacity.value;\r\n\r\n\t}\r\n\r\n\tset opacity( v ) {\r\n\r\n\t\tif ( this.uniforms ) {\r\n\r\n\t\t\tthis.uniforms.opacity.value = v;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconstructor( params ) {\r\n\r\n\t\tsuper( {\r\n\t\t\tuniforms: {\r\n\r\n\t\t\t\tmap: { value: null },\r\n\t\t\t\topacity: { value: 1 },\r\n\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: /* glsl */`\r\n\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\r\n\t\t\tfragmentShader: /* glsl */`\r\n\t\t\t\tuniform sampler2D map;\r\n\t\t\t\tuniform float opacity;\r\n\t\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\t\tvec4 clampedTexelFatch( sampler2D map, ivec2 px, int lod ) {\r\n\r\n\t\t\t\t\tvec4 res = texelFetch( map, ivec2( px.x, px.y ), 0 );\r\n\r\n\t\t\t\t\t#if defined( TONE_MAPPING )\r\n\r\n\t\t\t\t\tres.xyz = toneMapping( res.xyz );\r\n\r\n\t\t\t\t\t#endif\r\n\r\n\t\t\t  \t\treturn linearToOutputTexel( res );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvec2 size = vec2( textureSize( map, 0 ) );\r\n\t\t\t\t\tvec2 pxUv = vUv * size;\r\n\t\t\t\t\tvec2 pxCurr = floor( pxUv );\r\n\t\t\t\t\tvec2 pxFrac = fract( pxUv ) - 0.5;\r\n\t\t\t\t\tvec2 pxOffset;\r\n\t\t\t\t\tpxOffset.x = pxFrac.x > 0.0 ? 1.0 : - 1.0;\r\n\t\t\t\t\tpxOffset.y = pxFrac.y > 0.0 ? 1.0 : - 1.0;\r\n\r\n\t\t\t\t\tvec2 pxNext = clamp( pxOffset + pxCurr, vec2( 0.0 ), size - 1.0 );\r\n\t\t\t\t\tvec2 alpha = abs( pxFrac );\r\n\r\n\t\t\t\t\tvec4 p1 = mix(\r\n\t\t\t\t\t\tclampedTexelFatch( map, ivec2( pxCurr.x, pxCurr.y ), 0 ),\r\n\t\t\t\t\t\tclampedTexelFatch( map, ivec2( pxNext.x, pxCurr.y ), 0 ),\r\n\t\t\t\t\t\talpha.x\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tvec4 p2 = mix(\r\n\t\t\t\t\t\tclampedTexelFatch( map, ivec2( pxCurr.x, pxNext.y ), 0 ),\r\n\t\t\t\t\t\tclampedTexelFatch( map, ivec2( pxNext.x, pxNext.y ), 0 ),\r\n\t\t\t\t\t\talpha.x\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tgl_FragColor = mix( p1, p2, alpha.y );\r\n\t\t\t\t\tgl_FragColor.a *= opacity;\r\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\r\n\r\n\t\t\t\t}\r\n\t\t\t`\r\n\t\t} );\r\n\r\n\t\tthis.setValues( params );\r\n\r\n\t}\r\n\r\n}\r\n","import { PerspectiveCamera, Scene, Vector2, Clock, NormalBlending, NoBlending, AdditiveBlending } from 'three';\r\nimport { PathTracingSceneGenerator } from './PathTracingSceneGenerator.js';\r\nimport { PathTracingRenderer } from './PathTracingRenderer.js';\r\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\r\nimport { GradientEquirectTexture } from '../textures/GradientEquirectTexture.js';\r\nimport { getIesTextures, getLights, getTextures } from './utils/sceneUpdateUtils.js';\r\nimport { ClampedInterpolationMaterial } from '../materials/fullscreen/ClampedInterpolationMaterial.js';\r\n\r\nfunction supportsFloatBlending( renderer ) {\r\n\r\n\treturn renderer.extensions.get( 'EXT_float_blend' );\r\n\r\n}\r\n\r\nconst _resolution = new Vector2();\r\nexport class WebGLPathTracer {\r\n\r\n\tget multipleImportanceSampling() {\r\n\r\n\t\treturn Boolean( this._pathTracer.material.defines.FEATURE_MIS );\r\n\r\n\t}\r\n\r\n\tset multipleImportanceSampling( v ) {\r\n\r\n\t\tthis._pathTracer.material.setDefine( 'FEATURE_MIS', v ? 1 : 0 );\r\n\r\n\t}\r\n\r\n\tget transmissiveBounces() {\r\n\r\n\t\treturn this._pathTracer.material.transmissiveBounces;\r\n\r\n\t}\r\n\r\n\tset transmissiveBounces( v ) {\r\n\r\n\t\tthis._pathTracer.material.transmissiveBounces = v;\r\n\r\n\t}\r\n\r\n\tget bounces() {\r\n\r\n\t\treturn this._pathTracer.material.bounces;\r\n\r\n\t}\r\n\r\n\tset bounces( v ) {\r\n\r\n\t\tthis._pathTracer.material.bounces = v;\r\n\r\n\t}\r\n\r\n\tget filterGlossyFactor() {\r\n\r\n\t\treturn this._pathTracer.material.filterGlossyFactor;\r\n\r\n\t}\r\n\r\n\tset filterGlossyFactor( v ) {\r\n\r\n\t\tthis._pathTracer.material.filterGlossyFactor = v;\r\n\r\n\t}\r\n\r\n\tget samples() {\r\n\r\n\t\treturn this._pathTracer.samples;\r\n\r\n\t}\r\n\r\n\tget target() {\r\n\r\n\t\treturn this._pathTracer.target;\r\n\r\n\t}\r\n\r\n\tget tiles() {\r\n\r\n\t\treturn this._pathTracer.tiles;\r\n\r\n\t}\r\n\r\n\tconstructor( renderer ) {\r\n\r\n\t\t// members\r\n\t\tthis._renderer = renderer;\r\n\t\tthis._generator = new PathTracingSceneGenerator();\r\n\t\tthis._pathTracer = new PathTracingRenderer( renderer );\r\n\t\tthis._queueReset = false;\r\n\t\tthis._clock = new Clock();\r\n\r\n\t\tthis._lowResPathTracer = new PathTracingRenderer( renderer );\r\n\t\tthis._lowResPathTracer.tiles.set( 1, 1 );\r\n\t\tthis._quad = new FullScreenQuad( new ClampedInterpolationMaterial( {\r\n\t\t\tmap: null,\r\n\t\t\ttransparent: true,\r\n\t\t\tblending: NoBlending,\r\n\r\n\t\t\tpremultipliedAlpha: renderer.getContextAttributes().premultipliedAlpha,\r\n\t\t} ) );\r\n\t\tthis._materials = null;\r\n\r\n\t\t// options\r\n\t\tthis.renderDelay = 100;\r\n\t\tthis.minSamples = 5;\r\n\t\tthis.fadeDuration = 500;\r\n\t\tthis.enablePathTracing = true;\r\n\t\tthis.pausePathTracing = false;\r\n\t\tthis.dynamicLowRes = false;\r\n\t\tthis.lowResScale = 0.25;\r\n\t\tthis.renderScale = 1;\r\n\t\tthis.synchronizeRenderSize = true;\r\n\t\tthis.rasterizeScene = true;\r\n\t\tthis.renderToCanvas = true;\r\n\t\tthis.textureSize = new Vector2( 1024, 1024 );\r\n\t\tthis.rasterizeSceneCallback = ( scene, camera ) => {\r\n\r\n\t\t\tthis._renderer.render( scene, camera );\r\n\r\n\t\t};\r\n\r\n\t\tthis.renderToCanvasCallback = ( target, renderer, quad ) => {\r\n\r\n\t\t\tconst currentAutoClear = renderer.autoClear;\r\n\t\t\trenderer.autoClear = false;\r\n\t\t\tquad.render( renderer );\r\n\t\t\trenderer.autoClear = currentAutoClear;\r\n\r\n\t\t};\r\n\r\n\t\t// initialize the scene so it doesn't fail\r\n\t\tthis.setScene( new Scene(), new PerspectiveCamera() );\r\n\r\n\t}\r\n\r\n\tsetBVHWorker( worker ) {\r\n\r\n\t\tthis._generator.setBVHWorker( worker );\r\n\r\n\t}\r\n\r\n\tsetScene( scene, camera, options = {} ) {\r\n\r\n\t\tscene.updateMatrixWorld( true );\r\n\t\tcamera.updateMatrixWorld();\r\n\r\n\t\tconst generator = this._generator;\r\n\t\tgenerator.setObjects( scene );\r\n\r\n\t\tif ( this._buildAsync ) {\r\n\r\n\t\t\treturn generator.generateAsync( options.onProgress ).then( result => {\r\n\r\n\t\t\t\treturn this._updateFromResults( scene, camera, result );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst result = generator.generate();\r\n\t\t\treturn this._updateFromResults( scene, camera, result );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetSceneAsync( ...args ) {\r\n\r\n\t\tthis._buildAsync = true;\r\n\t\tconst result = this.setScene( ...args );\r\n\t\tthis._buildAsync = false;\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tsetCamera( camera ) {\r\n\r\n\t\tthis.camera = camera;\r\n\t\tthis.updateCamera();\r\n\r\n\t}\r\n\r\n\tupdateCamera() {\r\n\r\n\t\tconst camera = this.camera;\r\n\t\tcamera.updateMatrixWorld();\r\n\r\n\t\tthis._pathTracer.setCamera( camera );\r\n\t\tthis._lowResPathTracer.setCamera( camera );\r\n\t\tthis.reset();\r\n\r\n\t}\r\n\r\n\tupdateMaterials() {\r\n\r\n\t\tconst material = this._pathTracer.material;\r\n\t\tconst renderer = this._renderer;\r\n\t\tconst materials = this._materials;\r\n\t\tconst textureSize = this.textureSize;\r\n\r\n\t\t// reduce texture sources here - we don't want to do this in the\r\n\t\t// textures array because we need to pass the textures array into the\r\n\t\t// material target\r\n\t\tconst textures = getTextures( materials );\r\n\t\tmaterial.textures.setTextures( renderer, textures, textureSize.x, textureSize.y );\r\n\t\tmaterial.materials.updateFrom( materials, textures );\r\n\t\tthis.reset();\r\n\r\n\t}\r\n\r\n\tupdateLights() {\r\n\r\n\t\tconst scene = this.scene;\r\n\t\tconst renderer = this._renderer;\r\n\t\tconst material = this._pathTracer.material;\r\n\r\n\t\tconst lights = getLights( scene );\r\n\t\tconst iesTextures = getIesTextures( lights );\r\n\t\tmaterial.lights.updateFrom( lights, iesTextures );\r\n\t\tmaterial.iesProfiles.setTextures( renderer, iesTextures );\r\n\t\tthis.reset();\r\n\r\n\t}\r\n\r\n\tupdateEnvironment() {\r\n\r\n\t\tconst scene = this.scene;\r\n\t\tconst material = this._pathTracer.material;\r\n\r\n\t\t// update scene background\r\n\t\tmaterial.backgroundBlur = scene.backgroundBlurriness;\r\n\t\tmaterial.backgroundIntensity = scene.backgroundIntensity ?? 1;\r\n\t\tmaterial.backgroundRotation.makeRotationFromEuler( scene.backgroundRotation ).invert();\r\n\t\tif ( scene.background === null ) {\r\n\r\n\t\t\tmaterial.backgroundMap = null;\r\n\t\t\tmaterial.backgroundAlpha = 0;\r\n\r\n\t\t} else if ( scene.background.isColor ) {\r\n\r\n\t\t\tthis._colorBackground = this._colorBackground || new GradientEquirectTexture( 16 );\r\n\r\n\t\t\tconst colorBackground = this._colorBackground;\r\n\t\t\tif ( ! colorBackground.topColor.equals( scene.background ) ) {\r\n\r\n\t\t\t\t// set the texture color\r\n\t\t\t\tcolorBackground.topColor.set( scene.background );\r\n\t\t\t\tcolorBackground.bottomColor.set( scene.background );\r\n\t\t\t\tcolorBackground.update();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// assign to material\r\n\t\t\tmaterial.backgroundMap = colorBackground;\r\n\t\t\tmaterial.backgroundAlpha = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmaterial.backgroundMap = scene.background;\r\n\t\t\tmaterial.backgroundAlpha = 1;\r\n\r\n\t\t}\r\n\r\n\t\t// update scene environment\r\n\t\tmaterial.environmentIntensity = scene.environmentIntensity ?? 1;\r\n\t\tmaterial.environmentRotation.makeRotationFromEuler( scene.environmentRotation ).invert();\r\n\t\tif ( this._previousEnvironment !== scene.environment ) {\r\n\r\n\t\t\tif ( scene.environment ) {\r\n\r\n\t\t\t\t// TODO: Consider setting this to the highest supported bit depth by checking for\r\n\t\t\t\t// OES_texture_float_linear or OES_texture_half_float_linear. Requires changes to\r\n\t\t\t\t// the equirect uniform\r\n\t\t\t\tmaterial.envMapInfo.updateFrom( scene.environment );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaterial.environmentIntensity = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis._previousEnvironment = scene.environment;\r\n\t\tthis.reset();\r\n\r\n\t}\r\n\r\n\t_updateFromResults( scene, camera, results ) {\r\n\r\n\t\tconst {\r\n\t\t\tmaterials,\r\n\t\t\tgeometry,\r\n\t\t\tbvh,\r\n\t\t\tbvhChanged,\r\n\t\t} = results;\r\n\r\n\t\tthis._materials = materials;\r\n\r\n\t\tconst pathTracer = this._pathTracer;\r\n\t\tconst material = pathTracer.material;\r\n\r\n\t\tif ( bvhChanged ) {\r\n\r\n\t\t\tmaterial.bvh.updateFrom( bvh );\r\n\t\t\tmaterial.attributesArray.updateFrom(\r\n\t\t\t\tgeometry.attributes.normal,\r\n\t\t\t\tgeometry.attributes.tangent,\r\n\t\t\t\tgeometry.attributes.uv,\r\n\t\t\t\tgeometry.attributes.color,\r\n\t\t\t);\r\n\r\n\t\t\tmaterial.materialIndexAttribute.updateFrom( geometry.attributes.materialIndex );\r\n\r\n\t\t}\r\n\r\n\t\t// save previously used items\r\n\t\tthis._previousScene = scene;\r\n\t\tthis.scene = scene;\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.updateCamera();\r\n\t\tthis.updateMaterials();\r\n\t\tthis.updateEnvironment();\r\n\t\tthis.updateLights();\r\n\r\n\t\treturn results;\r\n\r\n\t}\r\n\r\n\trenderSample() {\r\n\r\n\t\tconst lowResPathTracer = this._lowResPathTracer;\r\n\t\tconst pathTracer = this._pathTracer;\r\n\t\tconst renderer = this._renderer;\r\n\t\tconst clock = this._clock;\r\n\t\tconst quad = this._quad;\r\n\r\n\t\tthis._updateScale();\r\n\r\n\t\tif ( this._queueReset ) {\r\n\r\n\t\t\tpathTracer.reset();\r\n\t\t\tlowResPathTracer.reset();\r\n\t\t\tthis._queueReset = false;\r\n\r\n\t\t\tquad.material.opacity = 0;\r\n\t\t\tclock.start();\r\n\r\n\t\t}\r\n\r\n\t\t// render the path tracing sample after enough time has passed\r\n\t\tconst delta = clock.getDelta() * 1e3;\r\n\t\tconst elapsedTime = clock.getElapsedTime() * 1e3;\r\n\t\tif ( ! this.pausePathTracing && this.enablePathTracing && this.renderDelay <= elapsedTime ) {\r\n\r\n\t\t\tpathTracer.update();\r\n\r\n\t\t}\r\n\r\n\t\t// when alpha is enabled we use a manual blending system rather than\r\n\t\t// rendering with a blend function\r\n\t\tpathTracer.alpha = pathTracer.material.backgroundAlpha !== 1 || ! supportsFloatBlending( renderer );\r\n\t\tlowResPathTracer.alpha = pathTracer.alpha;\r\n\r\n\t\tif ( this.renderToCanvas ) {\r\n\r\n\t\t\tconst renderer = this._renderer;\r\n\t\t\tconst minSamples = this.minSamples;\r\n\r\n\t\t\tif ( elapsedTime >= this.renderDelay && this.samples >= this.minSamples ) {\r\n\r\n\t\t\t\tif ( this.fadeDuration !== 0 ) {\r\n\r\n\t\t\t\t\tquad.material.opacity = Math.min( quad.material.opacity + delta / this.fadeDuration, 1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tquad.material.opacity = 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// render the fallback if we haven't rendered enough samples, are paused, or are occluded\r\n\t\t\tif ( ! this.enablePathTracing || this.samples < minSamples || quad.material.opacity < 1 ) {\r\n\r\n\t\t\t\tif ( this.dynamicLowRes ) {\r\n\r\n\t\t\t\t\tif ( lowResPathTracer.samples < 1 ) {\r\n\r\n\t\t\t\t\t\tlowResPathTracer.material = pathTracer.material;\r\n\t\t\t\t\t\tlowResPathTracer.update();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst currentOpacity = quad.material.opacity;\r\n\t\t\t\t\tquad.material.opacity = 1 - quad.material.opacity;\r\n\t\t\t\t\tquad.material.map = lowResPathTracer.target.texture;\r\n\t\t\t\t\tquad.render( renderer );\r\n\t\t\t\t\tquad.material.opacity = currentOpacity;\r\n\r\n\t\t\t\t} else if ( this.rasterizeScene ) {\r\n\r\n\t\t\t\t\tthis.rasterizeSceneCallback( this.scene, this.camera );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( this.enablePathTracing && quad.material.opacity > 0 ) {\r\n\r\n\t\t\t\tif ( quad.material.opacity < 1 ) {\r\n\r\n\t\t\t\t\t// use additive blending when the low res texture is rendered so we can fade the\r\n\t\t\t\t\t// background out while the full res fades in\r\n\t\t\t\t\tquad.material.blending = this.dynamicLowRes ? AdditiveBlending : NormalBlending;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tquad.material.map = pathTracer.target.texture;\r\n\t\t\t\tthis.renderToCanvasCallback( pathTracer.target, renderer, quad );\r\n\t\t\t\tquad.material.blending = NoBlending;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treset() {\r\n\r\n\t\tthis._queueReset = true;\r\n\t\tthis._pathTracer.samples = 0;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis._renderQuad.dispose();\r\n\t\tthis._renderQuad.material.dispose();\r\n\t\tthis._pathTracer.dispose();\r\n\r\n\t}\r\n\r\n\t_updateScale() {\r\n\r\n\t\t// update the path tracer scale if it has changed\r\n\t\tif ( this.synchronizeRenderSize ) {\r\n\r\n\t\t\tthis._renderer.getDrawingBufferSize( _resolution );\r\n\r\n\t\t\tconst w = Math.floor( this.renderScale * _resolution.x );\r\n\t\t\tconst h = Math.floor( this.renderScale * _resolution.y );\r\n\r\n\t\t\tthis._pathTracer.getSize( _resolution );\r\n\t\t\tif ( _resolution.x !== w || _resolution.y !== h ) {\r\n\r\n\t\t\t\tconst lowResScale = this.lowResScale;\r\n\t\t\t\tthis._pathTracer.setSize( w, h );\r\n\t\t\t\tthis._lowResPathTracer.setSize( Math.floor( w * lowResScale ), Math.floor( h * lowResScale ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","import { Camera } from 'three';\r\n\r\nexport class EquirectCamera extends Camera {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.isEquirectCamera = true;\r\n\r\n\t}\r\n\r\n}\r\n","import { SpotLight } from 'three';\r\n\r\nexport class PhysicalSpotLight extends SpotLight {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\r\n\t\tthis.iesMap = null;\r\n\t\tthis.radius = 0;\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.iesMap = source.iesMap;\r\n\t\tthis.radius = source.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n","import { RectAreaLight } from 'three';\r\n\r\nexport class ShapedAreaLight extends RectAreaLight {\r\n\r\n\tconstructor( ...args ) {\r\n\r\n\t\tsuper( ...args );\r\n\t\tthis.isCircular = false;\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.isCircular = source.isCircular;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n","import { WebGLRenderTarget, RGBAFormat, HalfFloatType, PMREMGenerator, DataTexture, EquirectangularReflectionMapping, FloatType, DataUtils } from 'three';\r\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\r\nimport { MaterialBase } from '../materials/MaterialBase.js';\r\nimport * as CommonGLSL from '../shader/common/index.js';\r\n\r\nclass PMREMCopyMaterial extends MaterialBase {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper( {\r\n\r\n\t\t\tuniforms: {\r\n\r\n\t\t\t\tenvMap: { value: null },\r\n\t\t\t\tblur: { value: 0 },\r\n\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: /* glsl */`\r\n\r\n\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\tvoid main() {\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\t\t\t\t}\r\n\r\n\t\t\t`,\r\n\r\n\t\t\tfragmentShader: /* glsl */`\r\n\r\n\t\t\t\t#include <common>\r\n\t\t\t\t#include <cube_uv_reflection_fragment>\r\n\r\n\t\t\t\t${ CommonGLSL.util_functions }\r\n\r\n\t\t\t\tuniform sampler2D envMap;\r\n\t\t\t\tuniform float blur;\r\n\t\t\t\tvarying vec2 vUv;\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvec3 rayDirection = equirectUvToDirection( vUv );\r\n\t\t\t\t\tgl_FragColor = textureCubeUV( envMap, rayDirection, blur );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t`,\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport class BlurredEnvMapGenerator {\r\n\r\n\tconstructor( renderer ) {\r\n\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.pmremGenerator = new PMREMGenerator( renderer );\r\n\t\tthis.copyQuad = new FullScreenQuad( new PMREMCopyMaterial() );\r\n\t\tthis.renderTarget = new WebGLRenderTarget( 1, 1, { type: FloatType, format: RGBAFormat } );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.pmremGenerator.dispose();\r\n\t\tthis.copyQuad.dispose();\r\n\t\tthis.renderTarget.dispose();\r\n\r\n\t}\r\n\r\n\tgenerate( texture, blur ) {\r\n\r\n\t\tconst { pmremGenerator, renderTarget, copyQuad, renderer } = this;\r\n\r\n\t\t// get the pmrem target\r\n\t\tconst pmremTarget = pmremGenerator.fromEquirectangular( texture );\r\n\r\n\t\t// set up the material\r\n\t\tconst { width, height } = texture.image;\r\n\t\trenderTarget.setSize( width, height );\r\n\t\tcopyQuad.material.envMap = pmremTarget.texture;\r\n\t\tcopyQuad.material.blur = blur;\r\n\r\n\t\t// render\r\n\t\tconst prevRenderTarget = renderer.getRenderTarget();\r\n\t\tconst prevClear = renderer.autoClear;\r\n\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\t\trenderer.autoClear = true;\r\n\t\tcopyQuad.render( renderer );\r\n\r\n\t\trenderer.setRenderTarget( prevRenderTarget );\r\n\t\trenderer.autoClear = prevClear;\r\n\r\n\t\t// read the data back\r\n\t\tconst buffer = new Uint16Array( width * height * 4 );\r\n\t\tconst readBuffer = new Float32Array( width * height * 4 );\r\n\t\trenderer.readRenderTargetPixels( renderTarget, 0, 0, width, height, readBuffer );\r\n\r\n\t\tfor ( let i = 0, l = readBuffer.length; i < l; i ++ ) {\r\n\r\n\t\t\tbuffer[ i ] = DataUtils.toHalfFloat( readBuffer[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\tconst result = new DataTexture( buffer, width, height, RGBAFormat, HalfFloatType );\r\n\t\tresult.minFilter = texture.minFilter;\r\n\t\tresult.magFilter = texture.magFilter;\r\n\t\tresult.wrapS = texture.wrapS;\r\n\t\tresult.wrapT = texture.wrapT;\r\n\t\tresult.mapping = EquirectangularReflectionMapping;\r\n\t\tresult.needsUpdate = true;\r\n\r\n\t\t// dispose of the now unneeded target\r\n\t\tpmremTarget.dispose();\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n","import { NoBlending } from 'three';\r\nimport { MaterialBase } from '../MaterialBase.js';\r\n\r\nexport class DenoiseMaterial extends MaterialBase {\r\n\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper( {\r\n\r\n\t\t\tblending: NoBlending,\r\n\r\n\t\t\ttransparent: false,\r\n\r\n\t\t\tdepthWrite: false,\r\n\r\n\t\t\tdepthTest: false,\r\n\r\n\t\t\tdefines: {\r\n\r\n\t\t\t\tUSE_SLIDER: 0,\r\n\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\r\n\t\t\t\tsigma: { value: 5.0 },\r\n\t\t\t\tthreshold: { value: 0.03 },\r\n\t\t\t\tkSigma: { value: 1.0 },\r\n\r\n\t\t\t\tmap: { value: null },\r\n\t\t\t\topacity: { value: 1 },\r\n\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: /* glsl */`\r\n\r\n\t\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t`,\r\n\r\n\t\t\tfragmentShader: /* glsl */`\r\n\r\n\t\t\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\t\t\t\t//  Copyright (c) 2018-2019 Michele Morrone\r\n\t\t\t\t//  All rights reserved.\r\n\t\t\t\t//\r\n\t\t\t\t//  https://michelemorrone.eu - https://BrutPitt.com\r\n\t\t\t\t//\r\n\t\t\t\t//  me@michelemorrone.eu - brutpitt@gmail.com\r\n\t\t\t\t//  twitter: @BrutPitt - github: BrutPitt\r\n\t\t\t\t//\r\n\t\t\t\t//  https://github.com/BrutPitt/glslSmartDeNoise/\r\n\t\t\t\t//\r\n\t\t\t\t//  This software is distributed under the terms of the BSD 2-Clause license\r\n\t\t\t\t//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n\t\t\t\tuniform sampler2D map;\r\n\r\n\t\t\t\tuniform float sigma;\r\n\t\t\t\tuniform float threshold;\r\n\t\t\t\tuniform float kSigma;\r\n\t\t\t\tuniform float opacity;\r\n\r\n\t\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\t\t#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439\r\n\t\t\t\t#define INV_PI 0.31830988618379067153776752674503\r\n\r\n\t\t\t\t// Parameters:\r\n\t\t\t\t//\t sampler2D tex\t - sampler image / texture\r\n\t\t\t\t//\t vec2 uv\t\t   - actual fragment coord\r\n\t\t\t\t//\t float sigma  >  0 - sigma Standard Deviation\r\n\t\t\t\t//\t float kSigma >= 0 - sigma coefficient\r\n\t\t\t\t//\t\t kSigma * sigma  -->  radius of the circular kernel\r\n\t\t\t\t//\t float threshold   - edge sharpening threshold\r\n\t\t\t\tvec4 smartDeNoise( sampler2D tex, vec2 uv, float sigma, float kSigma, float threshold ) {\r\n\r\n\t\t\t\t\tfloat radius = round( kSigma * sigma );\r\n\t\t\t\t\tfloat radQ = radius * radius;\r\n\r\n\t\t\t\t\tfloat invSigmaQx2 = 0.5 / ( sigma * sigma );\r\n\t\t\t\t\tfloat invSigmaQx2PI = INV_PI * invSigmaQx2;\r\n\r\n\t\t\t\t\tfloat invThresholdSqx2 = 0.5 / ( threshold * threshold );\r\n\t\t\t\t\tfloat invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;\r\n\r\n\t\t\t\t\tvec4 centrPx = texture2D( tex, uv );\r\n\t\t\t\t\tcentrPx.rgb *= centrPx.a;\r\n\r\n\t\t\t\t\tfloat zBuff = 0.0;\r\n\t\t\t\t\tvec4 aBuff = vec4( 0.0 );\r\n\t\t\t\t\tvec2 size = vec2( textureSize( tex, 0 ) );\r\n\r\n\t\t\t\t\tvec2 d;\r\n\t\t\t\t\tfor ( d.x = - radius; d.x <= radius; d.x ++ ) {\r\n\r\n\t\t\t\t\t\tfloat pt = sqrt( radQ - d.x * d.x );\r\n\r\n\t\t\t\t\t\tfor ( d.y = - pt; d.y <= pt; d.y ++ ) {\r\n\r\n\t\t\t\t\t\t\tfloat blurFactor = exp( - dot( d, d ) * invSigmaQx2 ) * invSigmaQx2PI;\r\n\r\n\t\t\t\t\t\t\tvec4 walkPx = texture2D( tex, uv + d / size );\r\n\t\t\t\t\t\t\twalkPx.rgb *= walkPx.a;\r\n\r\n\t\t\t\t\t\t\tvec4 dC = walkPx - centrPx;\r\n\t\t\t\t\t\t\tfloat deltaFactor = exp( - dot( dC.rgba, dC.rgba ) * invThresholdSqx2 ) * invThresholdSqrt2PI * blurFactor;\r\n\r\n\t\t\t\t\t\t\tzBuff += deltaFactor;\r\n\t\t\t\t\t\t\taBuff += deltaFactor * walkPx;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn aBuff / zBuff;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tgl_FragColor = smartDeNoise( map, vec2( vUv.x, vUv.y ), sigma, kSigma, threshold );\r\n\t\t\t\t\t#include <tonemapping_fragment>\r\n\t\t\t\t\t#include <colorspace_fragment>\r\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\r\n\r\n\t\t\t\t\tgl_FragColor.a *= opacity;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t`\r\n\r\n\t\t} );\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n}\r\n","import { Color, MeshStandardMaterial } from 'three';\r\n\r\nexport class FogVolumeMaterial extends MeshStandardMaterial {\r\n\r\n\tconstructor( params ) {\r\n\r\n\t\tsuper( params );\r\n\r\n\t\tthis.isFogVolumeMaterial = true;\r\n\r\n\t\tthis.density = 0.015;\r\n\t\tthis.emissive = new Color();\r\n\t\tthis.emissiveIntensity = 0.0;\r\n\t\tthis.opacity = 0.15;\r\n\t\tthis.transparent = true;\r\n\t\tthis.roughness = 1.0;\r\n\t\tthis.metalness = 0.0;\r\n\r\n\t\tthis.setValues( params );\r\n\r\n\t}\r\n\r\n}\r\n","// core\r\nexport * from './core/PathTracingSceneGenerator.js';\r\nexport * from './core/WebGLPathTracer.js';\r\n\r\n// objects\r\nexport * from './objects/PhysicalCamera.js';\r\nexport * from './objects/EquirectCamera.js';\r\nexport * from './objects/PhysicalSpotLight.js';\r\nexport * from './objects/ShapedAreaLight.js';\r\n\r\n// textures\r\nexport * from './textures/ProceduralEquirectTexture.js';\r\nexport * from './textures/GradientEquirectTexture.js';\r\n\r\n// utils\r\nexport * from './utils/BlurredEnvMapGenerator.js';\r\n\r\n// materials\r\nexport * from './materials/fullscreen/DenoiseMaterial.js';\r\nexport * from './materials/surface/FogVolumeMaterial.js';\r\n\r\n// deprecated\r\nexport * from './materials/pathtracing/PhysicalPathTracingMaterial.js';\r\nexport * from './core/PathTracingRenderer.js';\r\n"],"names":["BufferAttribute","BufferGeometry","Matrix4","Vector3","Vector4","Matrix3","MeshBasicMaterial","Mesh","getTextures","getLights","SAH","MeshBVH","ShaderMaterial","NoBlending","Vector2","WebGLRenderTarget","FloatType","RGBAFormat","NearestFilter","FullScreenQuad","PerspectiveCamera","DataUtils","HalfFloatType","Source","DataTexture","LinearFilter","RepeatWrapping","RedFormat","ClampToEdgeWrapping","Quaternion","DataArrayTexture","FloatVertexAttributeTexture","getTextureHash","FrontSide","BackSide","DoubleSide","Color","WebGLArrayRenderTarget","UnsignedByteType","NoToneMapping","RGFormat","MeshBVHUniformStruct","UIntVertexAttributeTexture","BVHShaderGLSL","StructsGLSL.camera_struct","StructsGLSL.lights_struct","StructsGLSL.equirect_struct","StructsGLSL.material_struct","StructsGLSL.surface_record_struct","RandomGLSL.stratified_functions","RandomGLSL.pcg_functions","RandomGLSL.sobol_common","RandomGLSL.sobol_functions","CommonGLSL.texture_sample_functions","CommonGLSL.fresnel_functions","CommonGLSL.util_functions","CommonGLSL.math_functions","CommonGLSL.shape_intersection_functions","SamplingGLSL.shape_sampling_functions","SamplingGLSL.equirect_functions","SamplingGLSL.light_sampling_functions","PTBVHGLSL.inside_fog_volume_function","BSDFGLSL.ggx_functions","BSDFGLSL.sheen_functions","BSDFGLSL.iridescence_functions","BSDFGLSL.fog_functions","BSDFGLSL.bsdf_functions","RenderGLSL.render_structs","RenderGLSL.camera_util_functions","RenderGLSL.trace_scene_function","RenderGLSL.attenuate_hit_function","RenderGLSL.direct_light_contribution_function","RenderGLSL.get_surface_record_function","NormalBlending","Spherical","EquirectangularReflectionMapping","Clock","Scene","AdditiveBlending","Camera","SpotLight","RectAreaLight","PMREMGenerator","MeshStandardMaterial"],"mappings":"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G,aAAa,GAAG,yBAAyB,CAAC;AAC7C;CACA,GAAG;AACH;CACA,EAAE;AACF;CACA,CAAC,iBAAiB,CAAC;AACnB;AACA,EAAE,GAAG,KAAK,EAAE,MAAM,GAAG,GAAG,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,GAAG,KAAK,EAAE,kDAAkD,GAAG,UAAU,EAAE;AAC9E,GAAG,GAAG,KAAK,EAAE,UAAU,GAAG,KAAK,EAAE;AACjC;AACA,GAAG,GAAG,KAAK,EAAE,iCAAiC,GAAG,aAAa,EAAE;AAChE;AACA;AACA,yBAAyB,GAAG,KAAK,EAAE;AACnC;AACA;AACA,CAAC,CAAC,CAAC;AACH;CACA,CAAC;AACD;CACO,MAAM,YAAY,aAAa,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA,CAAC,GAAG,6BAA6B,EAAE,CAAC,EAAE,EAAE;AACxC,CAAC,GAAG,6BAA6B,EAAE,CAAC,EAAE,EAAE;AACxC,CAAC,GAAG,6BAA6B,EAAE,CAAC,EAAE,EAAE;AACxC,CAAC,GAAG,6BAA6B,EAAE,CAAC,EAAE,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AACF;CACO,MAAM,sBAAsB,aAAa,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AACF;CACO,MAAM,eAAe,aAAa,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CCZM,MAAM,aAAa,aAAa,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CCtFM,MAAM,eAAe,cAAcqBAAqB,aAAa,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CC9DM,MAAM,kBAAkB,aAAa,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CCnEM,MAAM,wBAAwB,aAAa,CAAC;AACnvNM,MAAM,wBAAwB,aAAa,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CCrFM,MAAM,iBAAiB,aAAavGM,MAAM,cAAc,aAAa,CAAC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CChFM,MAAM,4BAA4B,aAAa,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CC5DM,MAAM,wBAAwB,YAAY,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CCxBM,MAAM,cAAc,aAAa,CAAC;AACznHM,MAAM,aAAa,aAAa,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CCxDM,MAAM,oBAAoB,aAAa,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CCjDD;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;AACA;CACO,MAAM,cAAc,aAAa,CAAC;AACzjcM,MAAM,aAAa,aAAa,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CCrBM,MAAM,aAAa,aAAa,CAAC;AACxrGM,MAAM,qBAAqB,aAAa,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CCtIM,MAAM,eAAe,aAAajGM,MAAM,0BAA0B,aAAa,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CC7DM,MAAM,oBAAoB,aAAa,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CC3EM,MAAM,sBAAsB,aAAa,CAAC;AACjjLM,MAAM,qBAAqB,aAAa,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CCnFM,MAAM,kCAAkC,WAAW,CAAC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CC/FM,MAAM,2BAA2B,aAAa,CAAC;AACtnUM,MAAM,cAAc,aAAa,CAAC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CCjDM,MAAM,oBAAoB,aAAa,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;CCnBM,MAAM,2BAA2B,SAAS,YAAY,CAAC;AAC9D;CACA,CAAC,cAAc,GAAG;AAClB;CACA,EAAE,IAAI,CAAC,SAAS,EAAE,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;CAC/E,EAAE,IAAI,CAAC,SAAS,EAAE,wBAAwB,EAAE,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;CACzE,EAAE,IAAI,CAAC,SAAS,EAAE,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;AACnF;CACA,EAAE;AACF;CACA,CAAC,WAAW,EAAE,UAAU,GAAG;AAC3B;CACA,EAAE,KAAK,EAAE;AACT;CACA,GAAG,WAAW,EAAE,IAAI;CACpB,GAAG,UAAU,EAAE,KAAK;AACpB;CACA,GAAG,OAAO,EAAE;CACZ,IAAI,WAAW,EAAE,CAAC;CAClB,IAAI,wBAAwB,EAAE,CAAC;CAC/B,IAAI,WAAW,EAAE,CAAC;CAC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B,EAAE;AACpC,IAAI,GAAGC,eAA2B,EAAE;AACpC,IAAI,GAAGC,qBAAiC,EAAE;AAC1C;AACA;AACA;AACA;AACA,KAAK,GAAGC,oBAA+B,EAAE;AACzC;AACA;AACA;AACA,KAAK,GAAGC,aAAwB,EAAE;AAClC,KAAK,GAAGC,YAAuB,EAAE;AACjC,KAAK,GAAGC,eAA0B,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,GAAGF,aAAwB,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,GAAGG,wBAAmC,EAAE;AAC5C,IAAI,GAAGC,iBAA4B,EAAE;AACrC,IAAI,GAAGC,cAAyB,EAAE;AAClC,IAAI,GAAGC,cAAyB,EAAE;AAClC,IAAI,GAAGC,4BAAuC,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,GAAGC,wBAAqC,EAAE;AAC9C,IAAI,GAAGC,kBAA+B,EAAE;AACxC,IAAI,GAAGC,wBAAqC,EAAE;AAC9C;AACA,IAAI,GAAGC,0BAAoC,EAAE;AAC7C,IAAI,GAAGC,aAAsB,EAAE;AAC/B,IAAI,GAAGC,eAAwB,EAAE;AACjC,IAAI,GAAGC,qBAA8B,EAAE;AACvC,IAAI,GAAGC,aAAsB,EAAE;AAC/B,IAAI,GAAGC,cAAuB,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC;AACJ;CACA,GAAG,EAAE,CAAC;AACN;CACA,EAAE,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE,CAAC;AAC/B;CACA,EAAE;AACF;CACA;;CC/IO,MAAM,iBAAiB,SAASsE,0BAAoB,CAAC;AAC5D;CACA,CAAC,WAAW,EAAE,MAAM,GAAG;AACvB;CACA,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;AAClB;CACA,EAAE,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;AAClC;CACA,EAAE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;CACvB,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI/C,WAAK,EAAE,CAAC;CAC9B,EAAE,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC;CAC/B,EAAE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;CACtB,EAAE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;CAC1B,EAAE,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;CACvB,EAAE,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;AACvB;CACA,EAAE,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,CAAC;AAC3B;CACA,EAAE;AACF;CACA;;CCtBA;;;;;;;;;;;;;;;;;;;;;;;;"}